<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Adi Reddy Mora</title>
 <link href="http://www.arm.rocks/atom.xml" rel="self"/>
 <link href="http://www.arm.rocks/"/>
 <updated>2014-11-19T18:00:00+00:00</updated>
 <id>http://www.arm.rocks</id>
 <author>
   <name>Adi Reddy Mora</name>
   <email>adiinteractive@gmail.com</email>
 </author>

 
 <entry>
   <title>Haxe default Access Modifiers and Return Types.</title>
   <link href="http://www.arm.rocks/2014/11/20/haxe-access-modifiers-return-types/"/>
   <updated>2014-11-20T00:00:00+00:00</updated>
   <id>http://www.arm.rocks/2014/11/20/haxe-access-modifiers-return-types</id>
   <content type="html">&lt;p&gt;A quick look at default access modifiers and return types in classes, interfaces and externs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Classes:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Default access modifier is &lt;code&gt;private&lt;/code&gt; if none specified.&lt;/li&gt;
&lt;li&gt;Default return type is &lt;code&gt;Void&lt;/code&gt; if none specified.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haxe&quot; data-lang=&quot;haxe&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//private variable&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; _count&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//constructor&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//private function and return type is Void&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_increaseCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Interfaces and Externs:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Default access modifier is &lt;code&gt;public&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Return type is compulsory for functions. Failing so will result in compile time error &lt;code&gt;Type required for extern classes and interfaces&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haxe&quot; data-lang=&quot;haxe&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//public variable&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; count&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//public function&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increaseCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When implementing the above interface you need to specify &lt;code&gt;public&lt;/code&gt; access modifier to variable &lt;code&gt;count&lt;/code&gt; and function &lt;code&gt;increaseCount&lt;/code&gt;. Failing so will result in the following compile time errors.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Field count should be public as requested by ITest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Field increaseCount should be public as requested by ITest&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Interesting fact from the official documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Haxe has no &lt;code&gt;protected&lt;/code&gt; keyword like in ActionScript, Java, etc. However, its &lt;code&gt;private&lt;/code&gt; behavior is equal to those language&amp;#39;s &lt;code&gt;protected&lt;/code&gt; behavior, so in reality Haxe lacks in &lt;code&gt;private&lt;/code&gt; behavior.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Haxe String Interpolation and StringTools.</title>
   <link href="http://www.arm.rocks/2014/11/17/haxe-string-interpolation-stringutils/"/>
   <updated>2014-11-17T00:00:00+00:00</updated>
   <id>http://www.arm.rocks/2014/11/17/haxe-string-interpolation-stringutils</id>
   <content type="html">&lt;p&gt;String interpolation is common in many programming languages including modern languages like &lt;a href=&quot;https://www.dartlang.org/articles/idiomatic-dart/#strings-and-interpolation&quot;&gt;Dart&lt;/a&gt;, &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/swift/conceptual/Swift_Programming_Language/StringsAndCharacters.html&quot;&gt;Swift&lt;/a&gt;, etc and I am glad that it is also available in Haxe.&lt;/p&gt;

&lt;p&gt;String interpolation provides an intuitive way of formatting strings in place of string concatenation. It is a compile-time feature and has no impact on the runtime in Haxe. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;$&lt;/code&gt; sign should be used for placeholders and string should be enclosed in single-quote &lt;code&gt;&amp;#39;&lt;/code&gt; character as shown in the example below.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haxe&quot; data-lang=&quot;haxe&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; winnings&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; bonus&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Player won £&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;winnings&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Player won £10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Player won £&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;winnings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bonus&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; including bonus&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Player won £12 including bonus&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, StringTools is another useful class for advanced string manipulation and formatting. It&amp;#39;s kept separate to keep the core String class light and this class can be used based on the application needs.&lt;/p&gt;

&lt;p&gt;StringTools should be used as a static extension to the String class with &lt;code&gt;using&lt;/code&gt; keyword as shown below.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haxe&quot; data-lang=&quot;haxe&quot;&gt;&lt;span class=&quot;kn&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;StringTools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; str &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;apples and bananas&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; newStr &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;bananas&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;grapes&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//apples and grapes&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;grapes&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Definition of Static Extension as per the official documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A static extension allows pseudo-extending existing types without modifying their source. In Haxe this is achieved by declaring a static method with a first argument of the extending type and then bringing the defining class into context through &lt;code&gt;using&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Haxe at Work.</title>
   <link href="http://www.arm.rocks/2014/11/12/haxe-at-work/"/>
   <updated>2014-11-12T00:00:00+00:00</updated>
   <id>http://www.arm.rocks/2014/11/12/haxe-at-work</id>
   <content type="html">&lt;p&gt;Over the last 2-3 years I have been exploring Haxe and OpenFL personally but now I am on cloud nine because I can officially use Haxe at work.&lt;/p&gt;

&lt;p&gt;I should thank my company &lt;a href=&quot;http://www.gamesyscorporate.com&quot;&gt;Gamesys&lt;/a&gt; for giving the opportunity to showcase the power of Haxe and how it can benefit the company and the developers.&lt;/p&gt;

&lt;p&gt;I managed to convince the team and got them excited as well, so looking forward to develop cool stuff using Haxe :)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“The idea of waiting for something makes it more exciting” ― Andy Warhol&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Why Haxe?</title>
   <link href="http://www.arm.rocks/2014/11/11/why-haxe/"/>
   <updated>2014-11-11T00:00:00+00:00</updated>
   <id>http://www.arm.rocks/2014/11/11/why-haxe</id>
   <content type="html">&lt;p&gt;Haxe is simple, lightweight, easy to learn, yet a very powerful strictly typed language with lightning fast compiler.&lt;/p&gt;

&lt;p&gt;If your main target is JavaScript like me, Haxe can be a better coding option than coding in JavaScript directly. Haxe will transpile your code to clean and efficient JavaScript.&lt;/p&gt;

&lt;p&gt;There are a lot of useful libraries readily available at &lt;a href=&quot;http://lib.haxe.org&quot;&gt;lib.haxe.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have created haxe externs for some popular JavaScript libraries and there are few libraries available from others listed below together.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://adireddy.github.io/haxe-pixi&quot;&gt;haxe-pixi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://adireddy.github.io/haxe-howler&quot;&gt;haxe-howler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://adireddy.github.io/haxe-buzz&quot;&gt;haxe-buzz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/adireddy/haxe-p2&quot;&gt;haxe-p2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/luizbills/stats.js.hx&quot;&gt;stats.js.hx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Blank101/haxe-phaser&quot;&gt;haxe-phaser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/adireddy/haxe-threejs&quot;&gt;haxe-threejs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Haxe "never" and "inline" keywords.</title>
   <link href="http://www.arm.rocks/2014/11/08/never-inline-keywords/"/>
   <updated>2014-11-08T00:00:00+00:00</updated>
   <id>http://www.arm.rocks/2014/11/08/never-inline-keywords</id>
   <content type="html">&lt;p&gt;There is no “const” keyword in Haxe to define constants like in ActionScript.&lt;/p&gt;

&lt;p&gt;So “never” keyword can be used to define constants/read-only variables as shown below.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haxe&quot; data-lang=&quot;haxe&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; MAX_COUNT&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you try to set the value of MAX&lt;em&gt;COUNT, compiler will throw an error saying “&lt;/em&gt;Cannot access field or identifier MAX&lt;em&gt;COUNT for writing&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;For static variables and functions “inline” keyword can be used as a powerful optimization tool.&lt;/p&gt;

&lt;p&gt;The following is a way to define static constant/read-only variables using “inline”.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haxe&quot; data-lang=&quot;haxe&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; MAX_COUNT&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;“inline” should be carefully used with functions as not all functions will be ideal candidates for optimization.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haxe&quot; data-lang=&quot;haxe&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stageCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At run-time the function call&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haxe&quot; data-lang=&quot;haxe&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; pos &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stageCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will be translated to the following by eliminating the function call.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haxe&quot; data-lang=&quot;haxe&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; pos &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As per the official documentation,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is not always easy to judge if a function is ideal for inline. Short functions that have no writing expressions (such as a = value) are usually a good choice, but even more complex functions can be candidates. However, in some cases inlining can actually be detrimental to performance, e.g. because the compiler has to create temporary variables for complex expressions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that “inline” can be totally disabled by passing compiler argument &lt;em&gt;--no-inline&lt;/em&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Haxe/OpenFL will soon be integrated with Flash CC IDE.</title>
   <link href="http://www.arm.rocks/2014/11/02/openfl-in-flash-cc/"/>
   <updated>2014-11-02T00:00:00+00:00</updated>
   <id>http://www.arm.rocks/2014/11/02/openfl-in-flash-cc</id>
   <content type="html">&lt;p&gt;With the new “&lt;a href=&quot;http://www.adobe.com/uk/products/flash/features.html&quot;&gt;Custom platform support&lt;/a&gt;” in Flash Professional CC, Haxe/OpenFL will soon be available in Flash IDE which is a great news for Haxe developers.&lt;/p&gt;

&lt;p&gt;Look at Joshua Granick&amp;#39;s &lt;a href=&quot;http://max.adobe.com/sessions/max-online/#/video/567&quot;&gt;quick demo&lt;/a&gt; showing how it works.&lt;/p&gt;

&lt;p&gt;You can skip to Haxe/OpenFL demo which starts at around 25:00.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Benefits of Transpiling to JavaScript.</title>
   <link href="http://www.arm.rocks/2014/10/31/benefits-of-transpiling-to-js/"/>
   <updated>2014-10-31T00:00:00+00:00</updated>
   <id>http://www.arm.rocks/2014/10/31/benefits-of-transpiling-to-js</id>
   <content type="html">&lt;p&gt;A beautiful article about “&lt;a href=&quot;http://io.pellucid.com/blog/the-benefits-of-transpiling-to-javascript&quot;&gt;The benefits of transpiling to JavaScript&lt;/a&gt;” by Franco Ponticelli.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A transpiler is a type of compiler that takes the source code of a programming language as its input and outputs the source code of another programming language.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 

</feed>
