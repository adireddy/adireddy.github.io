{"version":3,"file":"pixi-spine.js","sourceRoot":"","sources":["../src/core/Animation.ts","../src/core/AnimationState.ts","../src/core/AnimationStateData.ts","../src/core/AtlasAttachmentLoader.ts","../src/core/attachments/Attachment.ts","../src/core/attachments/AttachmentLoader.ts","../src/core/attachments/AttachmentType.ts","../src/core/attachments/BoundingBoxAttachment.ts","../src/core/attachments/MeshAttachment.ts","../src/core/attachments/PathAttachment.ts","../src/core/attachments/RegionAttachment.ts","../src/core/BlendMode.ts","../src/core/Bone.ts","../src/core/BoneData.ts","../src/core/Constraint.ts","../src/core/Event.ts","../src/core/EventData.ts","../src/core/IkConstraint.ts","../src/core/IkConstraintData.ts","../src/core/PathConstraint.ts","../src/core/PathConstraintData.ts","../src/core/Skeleton.ts","../src/core/SkeletonBounds.ts","../src/core/SkeletonData.ts","../src/core/SkeletonJson.ts","../src/core/Skin.ts","../src/core/Slot.ts","../src/core/SlotData.ts","../src/core/Texture.ts","../src/core/TextureAtlas.ts","../src/core/TransformConstraint.ts","../src/core/TransformConstraintData.ts","../src/core/Updatable.ts","../src/core/Utils.ts","../src/loaders.ts","../src/Spine.ts"],"names":[],"mappings":";;;;;AA8BA,IAAO,IAAI,CA4/BV;AA5/BD,WAAO,IAAI;IAAC,IAAA,KAAK,CA4/BhB;IA5/BW,WAAA,KAAK;QAAC,IAAA,IAAI,CA4/BrB;QA5/BiB,WAAA,IAAI,EAAC,CAAC;YACvB;gBAKC,mBAAa,IAAY,EAAE,SAA0B,EAAE,QAAgB;oBACtE,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;oBAC1D,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;oBACpE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;oBAC3B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAC1B,CAAC;gBAED,yBAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,IAAa,EAAE,MAAoB,EAAE,KAAa,EAAE,SAAkB,EAAE,SAAkB;oBACpJ,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAElE,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC;wBAChC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC;wBACtB,EAAE,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC;4BAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC;oBAC7C,CAAC;oBAED,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBAC/B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBAC/C,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;gBACpF,CAAC;gBAEM,sBAAY,GAAnB,UAAqB,MAAyB,EAAE,MAAc,EAAE,IAAgB;oBAAhB,oBAAgB,GAAhB,QAAgB;oBAC/E,IAAI,GAAG,GAAG,CAAC,CAAC;oBACZ,IAAI,IAAI,GAAG,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,CAAC;oBACpC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC;wBAAC,MAAM,CAAC,IAAI,CAAC;oBAC3B,IAAI,OAAO,GAAG,IAAI,KAAK,CAAC,CAAC;oBACzB,OAAO,IAAI,EAAE,CAAC;wBACb,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC;4BAC1C,GAAG,GAAG,OAAO,GAAG,CAAC,CAAC;wBACnB,IAAI;4BACH,IAAI,GAAG,OAAO,CAAC;wBAChB,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC;4BAAC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;wBACzC,OAAO,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;oBAC9B,CAAC;gBACF,CAAC;gBAEM,sBAAY,GAAnB,UAAqB,MAAyB,EAAE,MAAc,EAAE,IAAY;oBAC3E,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,MAAM,CAAC,MAAM,GAAG,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI;wBAChE,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;4BAAC,MAAM,CAAC,CAAC,CAAC;oBAClC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACX,CAAC;gBACF,gBAAC;YAAD,CAAC,AA9CD,IA8CC;YA9CY,cAAS,YA8CrB,CAAA;YAOD,WAAY,YAAY;gBACvB,mDAAM,CAAA;gBAAE,yDAAS,CAAA;gBAAE,iDAAK,CAAA;gBAAE,iDAAK,CAAA;gBAC/B,2DAAU,CAAA;gBAAE,iDAAK,CAAA;gBAAE,mDAAM,CAAA;gBACzB,iDAAK,CAAA;gBAAE,yDAAS,CAAA;gBAChB,+DAAY,CAAA;gBAAE,8EAAmB,CAAA;gBACjC,oFAAsB,CAAA;gBAAE,kFAAqB,CAAA;gBAAE,0EAAiB,CAAA;YACjE,CAAC,EANW,iBAAY,KAAZ,iBAAY,QAMvB;YAND,IAAY,YAAY,GAAZ,iBAMX,CAAA;YAED;gBAQC,uBAAa,UAAkB;oBAC9B,EAAE,CAAC,CAAC,UAAU,IAAI,CAAC,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,GAAG,UAAU,CAAC,CAAC;oBAC9E,IAAI,CAAC,MAAM,GAAG,UAAK,CAAC,aAAa,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,aAAa,CAAC,WAAW,CAAC,CAAC;gBACjF,CAAC;gBAED,qCAAa,GAAb;oBACC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC,WAAW,GAAG,CAAC,CAAC;gBAC3D,CAAC;gBAED,iCAAS,GAAT,UAAW,UAAkB;oBAC5B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,aAAa,CAAC,WAAW,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC;gBAC5E,CAAC;gBAED,kCAAU,GAAV,UAAY,UAAkB;oBAC7B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,aAAa,CAAC,WAAW,CAAC,GAAG,aAAa,CAAC,OAAO,CAAC;gBAC7E,CAAC;gBAED,oCAAY,GAAZ,UAAc,UAAkB;oBAC/B,IAAI,KAAK,GAAG,UAAU,GAAG,aAAa,CAAC,WAAW,CAAC;oBACnD,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;wBAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC;oBAC7D,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC9B,EAAE,CAAC,CAAC,IAAI,IAAI,aAAa,CAAC,MAAM,CAAC;wBAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC;oBAC9D,EAAE,CAAC,CAAC,IAAI,IAAI,aAAa,CAAC,OAAO,CAAC;wBAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC;oBAChE,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC;gBAC7B,CAAC;gBAKD,gCAAQ,GAAR,UAAU,UAAkB,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW;oBAC/E,IAAI,IAAI,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC;oBACnE,IAAI,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,EAAE,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;oBACjF,IAAI,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,KAAK,EAAE,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC;oBACrD,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,KAAK,GAAG,UAAU,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,KAAK,GAAG,UAAU,CAAC;oBAE7F,IAAI,CAAC,GAAG,UAAU,GAAG,aAAa,CAAC,WAAW,CAAC;oBAC/C,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC;oBAEnC,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;oBACrB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,WAAW,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;wBAC/D,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;wBACd,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;wBAClB,GAAG,IAAI,IAAI,CAAC;wBACZ,GAAG,IAAI,IAAI,CAAC;wBACZ,IAAI,IAAI,KAAK,CAAC;wBACd,IAAI,IAAI,KAAK,CAAC;wBACd,CAAC,IAAI,GAAG,CAAC;wBACT,CAAC,IAAI,GAAG,CAAC;oBACV,CAAC;gBACF,CAAC;gBAED,uCAAe,GAAf,UAAiB,UAAkB,EAAE,OAAe;oBACnD,OAAO,GAAG,cAAS,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBACzC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,IAAI,CAAC,GAAG,UAAU,GAAG,aAAa,CAAC,WAAW,CAAC;oBAC/C,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBACrB,EAAE,CAAC,CAAC,IAAI,IAAI,aAAa,CAAC,MAAM,CAAC;wBAAC,MAAM,CAAC,OAAO,CAAC;oBACjD,EAAE,CAAC,CAAC,IAAI,IAAI,aAAa,CAAC,OAAO,CAAC;wBAAC,MAAM,CAAC,CAAC,CAAC;oBAC5C,CAAC,EAAE,CAAC;oBACJ,IAAI,CAAC,GAAG,CAAC,CAAC;oBACV,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,WAAW,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;wBAC1E,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBACd,EAAE,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC;4BAClB,IAAI,KAAK,SAAQ,EAAE,KAAK,SAAQ,CAAC;4BACjC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;gCAChB,KAAK,GAAG,CAAC,CAAC;gCACV,KAAK,GAAG,CAAC,CAAC;4BACX,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACP,KAAK,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gCACtB,KAAK,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACvB,CAAC;4BACD,MAAM,CAAC,KAAK,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;wBAC1E,CAAC;oBACF,CAAC;oBACD,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACtB,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC9C,CAAC;gBApFM,oBAAM,GAAG,CAAC,CAAC;gBAAQ,qBAAO,GAAG,CAAC,CAAC;gBAAQ,oBAAM,GAAG,CAAC,CAAC;gBAClD,yBAAW,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;gBAsFjC,oBAAC;YAAD,CAAC,AAxFD,IAwFC;YAxFqB,kBAAa,gBAwFlC,CAAA;YAED;gBAAoC,kCAAa;gBAQhD,wBAAa,UAAkB;oBAC9B,kBAAM,UAAU,CAAC,CAAC;oBAClB,IAAI,CAAC,MAAM,GAAG,UAAK,CAAC,aAAa,CAAC,UAAU,IAAI,CAAC,CAAC,CAAC;gBACpD,CAAC;gBAED,sCAAa,GAAb;oBACC,MAAM,CAAC,CAAC,YAAY,CAAC,MAAM,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;gBACrD,CAAC;gBAGD,iCAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,OAAe;oBAC1D,UAAU,KAAK,CAAC,CAAC;oBACjB,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;oBAC/B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,cAAc,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC;gBAC7D,CAAC;gBAED,8BAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,MAAoB,EAAE,KAAa,EAAE,SAAkB,EAAE,SAAkB;oBACrI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAEzB,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBAC1C,EAAE,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACtB,EAAE,CAAC,CAAC,SAAS,CAAC;4BAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;wBAClD,MAAM,CAAC;oBACR,CAAC;oBAED,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;wBAC5D,EAAE,CAAC,CAAC,SAAS,CAAC;4BACb,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,cAAc,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC;wBACnG,IAAI,CAAC,CAAC;4BACL,IAAI,GAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,cAAc,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;4BAClG,GAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,kBAAkB,GAAG,GAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;4BAC1D,IAAI,CAAC,QAAQ,IAAI,GAAC,GAAG,KAAK,CAAC;wBAC5B,CAAC;wBACD,MAAM,CAAC;oBACR,CAAC;oBAGD,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC;oBACzE,IAAI,YAAY,GAAG,MAAM,CAAC,KAAK,GAAG,cAAc,CAAC,aAAa,CAAC,CAAC;oBAChE,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC,EAClD,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,cAAc,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;oBAElF,IAAI,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,cAAc,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC;oBAC/D,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,kBAAkB,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;oBAC1D,CAAC,GAAG,YAAY,GAAG,CAAC,GAAG,OAAO,CAAC;oBAC/B,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBACf,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,kBAAkB,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;wBAC1D,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,GAAG,KAAK,CAAC;oBAChD,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACP,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;wBAC3C,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,kBAAkB,GAAG,CAAC,GAAG,GAAG,CAAC,GAAE,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;wBACzD,IAAI,CAAC,QAAQ,IAAI,CAAC,GAAG,KAAK,CAAC;oBAC5B,CAAC;gBACF,CAAC;gBA7DM,sBAAO,GAAG,CAAC,CAAC;gBACZ,wBAAS,GAAG,CAAC,CAAC,CAAC;gBAAQ,4BAAa,GAAG,CAAC,CAAC,CAAC;gBAC1C,uBAAQ,GAAG,CAAC,CAAC;gBA4DrB,qBAAC;YAAD,CAAC,AA/DD,CAAoC,aAAa,GA+DhD;YA/DY,mBAAc,iBA+D1B,CAAA;YAED;gBAAuC,qCAAa;gBAQnD,2BAAa,UAAkB;oBAC9B,kBAAM,UAAU,CAAC,CAAC;oBAClB,IAAI,CAAC,MAAM,GAAG,UAAK,CAAC,aAAa,CAAC,UAAU,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;gBAC3E,CAAC;gBAED,yCAAa,GAAb;oBACC,MAAM,CAAC,CAAC,YAAY,CAAC,SAAS,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;gBACxD,CAAC;gBAGD,oCAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,CAAS,EAAE,CAAS;oBAC/D,UAAU,IAAI,iBAAiB,CAAC,OAAO,CAAC;oBACxC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;oBAC/B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;oBAClD,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBACnD,CAAC;gBAED,iCAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,MAAoB,EAAE,KAAa,EAAE,SAAkB,EAAE,SAAkB;oBACrI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAEzB,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBAC1C,EAAE,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACtB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACf,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;4BACrB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;wBACtB,CAAC;wBACD,MAAM,CAAC;oBACR,CAAC;oBAED,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;oBACjB,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;wBAC/D,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;wBACrD,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;oBACtD,CAAC;oBAAC,IAAI,CAAC,CAAC;wBAEP,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,iBAAiB,CAAC,OAAO,CAAC,CAAC;wBAC5E,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;wBAC7C,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;wBAC7C,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;wBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,iBAAiB,CAAC,OAAO,GAAG,CAAC,EACvE,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,iBAAiB,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;wBAErF,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;wBACzD,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;oBAC1D,CAAC;oBACD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBACf,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;wBACjC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;oBAClC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACP,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;wBAC7C,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;oBAC9C,CAAC;gBACF,CAAC;gBA3DM,yBAAO,GAAG,CAAC,CAAC;gBACZ,2BAAS,GAAG,CAAC,CAAC,CAAC;gBAAQ,wBAAM,GAAG,CAAC,CAAC,CAAC;gBAAQ,wBAAM,GAAG,CAAC,CAAC,CAAC;gBACvD,mBAAC,GAAG,CAAC,CAAC;gBAAQ,mBAAC,GAAG,CAAC,CAAC;gBA0D5B,wBAAC;YAAD,CAAC,AA7DD,CAAuC,aAAa,GA6DnD;YA7DY,sBAAiB,oBA6D7B,CAAA;YAED;gBAAmC,iCAAiB;gBACnD,uBAAa,UAAkB;oBAC9B,kBAAM,UAAU,CAAC,CAAC;gBACnB,CAAC;gBAED,qCAAa,GAAb;oBACC,MAAM,CAAC,CAAC,YAAY,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;gBACpD,CAAC;gBAED,6BAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,MAAoB,EAAE,KAAa,EAAE,SAAkB,EAAE,SAAkB;oBACrI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAEzB,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBAC1C,EAAE,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACtB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACf,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;4BAC/B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;wBAChC,CAAC;wBACD,MAAM,CAAC;oBACR,CAAC;oBAED,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;oBACjB,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;wBAC3D,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;wBACpE,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;oBACrE,CAAC;oBAAC,IAAI,CAAC,CAAC;wBAEP,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC;wBACxE,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;wBACzC,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;wBACzC,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;wBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,aAAa,CAAC,OAAO,GAAG,CAAC,EACnE,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;wBAEjF,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;wBAC7E,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;oBAC9E,CAAC;oBACD,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;wBAChB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;wBAChB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;oBACjB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACP,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;wBACnB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACf,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;4BACtB,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;wBACvB,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACP,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;4BACjB,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;wBAClB,CAAC;wBAED,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACf,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,cAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;4BACvC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,cAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;wBACxC,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACP,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;4BACxC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBACzC,CAAC;wBACD,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;wBACpC,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;oBACrC,CAAC;gBACF,CAAC;gBACF,oBAAC;YAAD,CAAC,AA7DD,CAAmC,iBAAiB,GA6DnD;YA7DY,kBAAa,gBA6DzB,CAAA;YAED;gBAAmC,iCAAiB;gBACnD,uBAAa,UAAkB;oBAC9B,kBAAM,UAAU,CAAC,CAAC;gBACnB,CAAC;gBAED,qCAAa,GAAb;oBACC,MAAM,CAAC,CAAC,YAAY,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;gBACpD,CAAC;gBAED,6BAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,MAAoB,EAAE,KAAa,EAAE,SAAkB,EAAE,SAAkB;oBACrI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAEzB,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBAC1C,EAAE,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACtB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACf,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;4BAC/B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;wBAChC,CAAC;wBACD,MAAM,CAAC;oBACR,CAAC;oBAED,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;oBACjB,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;wBAC3D,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;wBACjD,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;oBAClD,CAAC;oBAAC,IAAI,CAAC,CAAC;wBAEP,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC;wBACxE,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;wBACzC,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;wBACzC,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;wBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,aAAa,CAAC,OAAO,GAAG,CAAC,EACnE,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;wBAEjF,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;wBACxD,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;oBACzD,CAAC;oBACD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBACf,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,CAAC;wBAC3C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,CAAC;oBAC5C,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACP,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;wBAC5D,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;oBAC7D,CAAC;gBACF,CAAC;gBACF,oBAAC;YAAD,CAAC,AA7CD,CAAmC,iBAAiB,GA6CnD;YA7CY,kBAAa,gBA6CzB,CAAA;YAED;gBAAmC,iCAAa;gBAQ/C,uBAAa,UAAkB;oBAC9B,kBAAM,UAAU,CAAC,CAAC;oBAClB,IAAI,CAAC,MAAM,GAAG,UAAK,CAAC,aAAa,CAAC,UAAU,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;gBACvE,CAAC;gBAED,qCAAa,GAAb;oBACC,MAAM,CAAC,CAAC,YAAY,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;gBACpD,CAAC;gBAGD,gCAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS;oBACrF,UAAU,IAAI,aAAa,CAAC,OAAO,CAAC;oBACpC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;oBAC/B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;oBAC9C,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;oBAC9C,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;oBAC9C,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBAC/C,CAAC;gBAED,6BAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,MAAoB,EAAE,KAAa,EAAE,SAAkB,EAAE,SAAkB;oBACrI,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBAC1C,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,EAAE,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACtB,EAAE,CAAC,CAAC,SAAS,CAAC;4BAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBACxD,MAAM,CAAC;oBACR,CAAC;oBAED,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;oBAC/B,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;wBAC3D,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;wBACtB,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;wBACrC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;wBACrC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;wBACrC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;oBACtC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBAEP,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC;wBACxE,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;wBACzC,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;wBACzC,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;wBACzC,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;wBACzC,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;wBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,aAAa,CAAC,OAAO,GAAG,CAAC,EACnE,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;wBAEjF,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;wBACrD,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;wBACrD,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;wBACrD,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;oBACtD,CAAC;oBACD,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;wBACd,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC5B,IAAI,CAAC,CAAC;wBACL,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;wBACvB,EAAE,CAAC,CAAC,SAAS,CAAC;4BAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBACnD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;oBACvG,CAAC;gBACF,CAAC;gBAhEM,qBAAO,GAAG,CAAC,CAAC;gBACZ,uBAAS,GAAG,CAAC,CAAC,CAAC;gBAAQ,oBAAM,GAAG,CAAC,CAAC,CAAC;gBAAQ,oBAAM,GAAG,CAAC,CAAC,CAAC;gBAAQ,oBAAM,GAAG,CAAC,CAAC,CAAC;gBAAQ,oBAAM,GAAG,CAAC,CAAC,CAAC;gBAC/F,eAAC,GAAG,CAAC,CAAC;gBAAQ,eAAC,GAAG,CAAC,CAAC;gBAAQ,eAAC,GAAG,CAAC,CAAC;gBAAQ,eAAC,GAAG,CAAC,CAAC;gBA+DxD,oBAAC;YAAD,CAAC,AAlED,CAAmC,aAAa,GAkE/C;YAlEY,kBAAa,gBAkEzB,CAAA;YAED;gBAKC,4BAAa,UAAkB;oBAC9B,IAAI,CAAC,MAAM,GAAG,UAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBAC9C,IAAI,CAAC,eAAe,GAAG,IAAI,KAAK,CAAS,UAAU,CAAC,CAAC;gBACtD,CAAC;gBAED,0CAAa,GAAb;oBACC,MAAM,CAAC,CAAC,YAAY,CAAC,UAAU,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;gBACzD,CAAC;gBAED,0CAAa,GAAb;oBACC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;gBAC3B,CAAC;gBAGD,qCAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,cAAsB;oBACjE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;oBAC/B,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,GAAG,cAAc,CAAC;gBACnD,CAAC;gBAED,kCAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,MAAoB,EAAE,KAAa,EAAE,SAAkB,EAAE,SAAkB;oBACrI,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBAC1C,EAAE,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,CAAC,CAAC;wBAC5B,IAAI,gBAAc,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;wBAC9C,IAAI,CAAC,aAAa,CAAC,gBAAc,IAAI,IAAI,GAAG,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,EAAE,gBAAc,CAAC,CAAC,CAAC;wBAC3G,MAAM,CAAC;oBACR,CAAC;oBAED,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,EAAE,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACtB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACf,IAAI,gBAAc,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;4BAC9C,IAAI,CAAC,aAAa,CAAC,gBAAc,IAAI,IAAI,GAAG,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,EAAE,gBAAc,CAAC,CAAC,CAAC;wBAC5G,CAAC;wBACD,MAAM,CAAC;oBACR,CAAC;oBAED,IAAI,UAAU,GAAG,CAAC,CAAC;oBACnB,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;wBACrC,UAAU,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;oBAChC,IAAI;wBACH,UAAU,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;oBAE1D,IAAI,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;oBACtD,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;yBAC5B,aAAa,CAAC,cAAc,IAAI,IAAI,GAAG,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC;gBACzG,CAAC;gBACF,yBAAC;YAAD,CAAC,AAnDD,IAmDC;YAnDY,uBAAkB,qBAmD9B,CAAA;YAED;gBAAoC,kCAAa;gBAMhD,wBAAa,UAAkB;oBAC9B,kBAAM,UAAU,CAAC,CAAC;oBAClB,IAAI,CAAC,MAAM,GAAG,UAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBAC9C,IAAI,CAAC,aAAa,GAAG,IAAI,KAAK,CAAoB,UAAU,CAAC,CAAC;gBAC/D,CAAC;gBAED,sCAAa,GAAb;oBACC,MAAM,CAAC,CAAC,YAAY,CAAC,MAAM,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;gBACrD,CAAC;gBAGD,iCAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,QAA2B;oBACtE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;oBAC/B,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;gBAC3C,CAAC;gBAED,8BAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,WAAyB,EAAE,KAAa,EAAE,SAAkB,EAAE,SAAkB;oBAC1I,IAAI,IAAI,GAAS,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBAChD,IAAI,cAAc,GAAe,IAAI,CAAC,aAAa,EAAE,CAAC;oBACtD,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc,YAAY,qBAAgB,CAAC,IAAI,CAAoB,cAAe,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;wBAAC,MAAM,CAAC;oBAE9H,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,IAAI,aAAa,GAAkB,IAAI,CAAC,kBAAkB,CAAC;oBAC3D,EAAE,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACtB,EAAE,CAAC,CAAC,SAAS,CAAC;4BAAC,UAAK,CAAC,YAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;wBACpD,MAAM,CAAC;oBACR,CAAC;oBAED,IAAI,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;oBACvC,IAAI,WAAW,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;oBAE1C,EAAE,CAAC,CAAC,aAAa,CAAC,MAAM,IAAI,WAAW,CAAC;wBAAC,KAAK,GAAG,CAAC,CAAC;oBACnD,IAAI,QAAQ,GAAkB,UAAK,CAAC,YAAY,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;oBAE7E,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;wBACvC,IAAI,YAAY,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;wBACpD,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;4BAChB,UAAK,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,WAAW,CAAC,CAAC;wBAC5D,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACtB,IAAI,gBAAgB,GAAG,cAAkC,CAAC;4BAC1D,EAAE,CAAC,CAAC,gBAAgB,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;gCAEpC,IAAI,aAAa,GAAG,gBAAgB,CAAC,QAAQ,CAAC;gCAC9C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC;oCACtC,IAAI,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;oCAC7B,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC;gCACzD,CAAC;4BACF,CAAC;4BAAC,IAAI,CAAC,CAAC;gCAEP,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE;oCACnC,QAAQ,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;4BACxC,CAAC;wBACF,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACP,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE;gCACnC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;wBACzD,CAAC;wBACD,MAAM,CAAC;oBACR,CAAC;oBAGD,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;oBACjD,IAAI,YAAY,GAAG,aAAa,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;oBAC5C,IAAI,YAAY,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;oBACxC,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;oBAExG,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;wBAChB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC;4BACtC,IAAI,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;4BAC3B,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,OAAO,CAAC;wBACzD,CAAC;oBACF,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBACtB,IAAI,gBAAgB,GAAG,cAAkC,CAAC;wBAC1D,EAAE,CAAC,CAAC,gBAAgB,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;4BAEpC,IAAI,aAAa,GAAG,gBAAgB,CAAC,QAAQ,CAAC;4BAC9C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC;gCACtC,IAAI,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC,EAAE,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;gCACrD,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,OAAO,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC;4BACnF,CAAC;wBACF,CAAC;wBAAC,IAAI,CAAC,CAAC;4BAEP,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC;gCACtC,IAAI,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;gCAC3B,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,OAAO,CAAC,GAAG,KAAK,CAAC;4BACnE,CAAC;wBACF,CAAC;oBACF,CAAC;oBAAC,IAAI,CAAC,CAAC;wBAEP,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC;4BACtC,IAAI,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;4BAC3B,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;wBAClF,CAAC;oBACF,CAAC;gBACF,CAAC;gBACF,qBAAC;YAAD,CAAC,AArGD,CAAoC,aAAa,GAqGhD;YArGY,mBAAc,iBAqG1B,CAAA;YAED;gBAIC,uBAAa,UAAkB;oBAC9B,IAAI,CAAC,MAAM,GAAG,UAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBAC9C,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAQ,UAAU,CAAC,CAAC;gBAC5C,CAAC;gBAED,qCAAa,GAAb;oBACC,MAAM,CAAC,YAAY,CAAC,KAAK,IAAI,EAAE,CAAC;gBACjC,CAAC;gBAED,qCAAa,GAAb;oBACC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;gBAC3B,CAAC;gBAGD,gCAAQ,GAAR,UAAU,UAAkB,EAAE,KAAY;oBACzC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC;oBACrC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC;gBACjC,CAAC;gBAGD,6BAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,WAAyB,EAAE,KAAa,EAAE,SAAkB,EAAE,SAAkB;oBAC1I,EAAE,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC;wBAAC,MAAM,CAAC;oBAChC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,IAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;oBAEpC,EAAE,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC;wBACrB,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;wBAC3F,QAAQ,GAAG,CAAC,CAAC,CAAC;oBACf,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,IAAI,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;wBAC7C,MAAM,CAAC;oBACR,EAAE,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBAAC,MAAM,CAAC;oBAE7B,IAAI,KAAK,GAAG,CAAC,CAAC;oBACd,EAAE,CAAC,CAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBACxB,KAAK,GAAG,CAAC,CAAC;oBACX,IAAI,CAAC,CAAC;wBACL,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;wBACjD,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;wBAC9B,OAAO,KAAK,GAAG,CAAC,EAAE,CAAC;4BAClB,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC;gCAAC,KAAK,CAAC;4BAC1C,KAAK,EAAE,CAAC;wBACT,CAAC;oBACF,CAAC;oBACD,GAAG,CAAC,CAAC,EAAE,KAAK,GAAG,UAAU,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE;wBAC1D,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBACvC,CAAC;gBACF,oBAAC;YAAD,CAAC,AAlDD,IAkDC;YAlDY,kBAAa,gBAkDzB,CAAA;YAED;gBAIC,2BAAa,UAAkB;oBAC9B,IAAI,CAAC,MAAM,GAAG,UAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBAC9C,IAAI,CAAC,UAAU,GAAG,IAAI,KAAK,CAAgB,UAAU,CAAC,CAAC;gBACxD,CAAC;gBAED,yCAAa,GAAb;oBACC,MAAM,CAAC,YAAY,CAAC,SAAS,IAAI,EAAE,CAAC;gBACrC,CAAC;gBAED,yCAAa,GAAb;oBACC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;gBAC3B,CAAC;gBAID,oCAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,SAAwB;oBACnE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;oBAC/B,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,SAAS,CAAC;gBACzC,CAAC;gBAED,iCAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,WAAyB,EAAE,KAAa,EAAE,SAAkB,EAAE,SAAkB;oBAC1I,IAAI,SAAS,GAAgB,QAAQ,CAAC,SAAS,CAAC;oBAChD,IAAI,KAAK,GAAgB,QAAQ,CAAC,KAAK,CAAC;oBACxC,EAAE,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,CAAC,CAAC;wBAC5B,UAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAE,QAAQ,CAAC,SAAS,EAAE,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;wBACjF,MAAM,CAAC;oBACR,CAAC;oBAED,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,EAAE,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACtB,EAAE,CAAC,CAAC,SAAS,CAAC;4BAAC,UAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAE,QAAQ,CAAC,SAAS,EAAE,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;wBAChG,MAAM,CAAC;oBACR,CAAC;oBAED,IAAI,KAAK,GAAG,CAAC,CAAC;oBACd,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;wBACrC,KAAK,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;oBAC3B,IAAI;wBACH,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;oBAElD,IAAI,qBAAqB,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;oBACnD,EAAE,CAAC,CAAC,qBAAqB,IAAI,IAAI,CAAC;wBACjC,UAAK,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;oBACvD,IAAI,CAAC,CAAC;wBACL,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,qBAAqB,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;4BAC3D,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC;oBACjD,CAAC;gBACF,CAAC;gBACF,wBAAC;YAAD,CAAC,AApDD,IAoDC;YApDY,sBAAiB,oBAoD7B,CAAA;YAED;gBAA0C,wCAAa;gBAQtD,8BAAa,UAAkB;oBAC9B,kBAAM,UAAU,CAAC,CAAC;oBAClB,IAAI,CAAC,MAAM,GAAG,UAAK,CAAC,aAAa,CAAC,UAAU,GAAG,oBAAoB,CAAC,OAAO,CAAC,CAAC;gBAC9E,CAAC;gBAED,4CAAa,GAAb;oBACC,MAAM,CAAC,CAAC,YAAY,CAAC,YAAY,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC;gBACnE,CAAC;gBAGD,uCAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,GAAW,EAAE,aAAqB;oBAC7E,UAAU,IAAI,oBAAoB,CAAC,OAAO,CAAC;oBAC3C,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;oBAC/B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,oBAAoB,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;oBACzD,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,oBAAoB,CAAC,cAAc,CAAC,GAAG,aAAa,CAAC;gBAC/E,CAAC;gBAED,oCAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,WAAyB,EAAE,KAAa,EAAE,SAAkB,EAAE,SAAkB;oBAC1I,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,IAAI,UAAU,GAAiB,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;oBAC9E,EAAE,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACtB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACf,UAAU,CAAC,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC;4BACrC,UAAU,CAAC,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC;wBAC1D,CAAC;wBACD,MAAM,CAAC;oBACR,CAAC;oBAED,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;wBAClE,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACf,UAAU,CAAC,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,oBAAoB,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;4BAC7H,UAAU,CAAC,aAAa,GAAG,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,aAAa;kCACjE,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,oBAAoB,CAAC,mBAAmB,CAAC,CAAC;wBACrE,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACP,UAAU,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,oBAAoB,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;4BACnG,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;gCAAC,UAAU,CAAC,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,oBAAoB,CAAC,mBAAmB,CAAC,CAAC;wBAC7G,CAAC;wBACD,MAAM,CAAC;oBACR,CAAC;oBAGD,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,oBAAoB,CAAC,OAAO,CAAC,CAAC;oBAC/E,IAAI,GAAG,GAAG,MAAM,CAAC,KAAK,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC;oBACxD,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,oBAAoB,CAAC,OAAO,GAAG,CAAC,EAC1E,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,oBAAoB,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;oBAExF,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBACf,UAAU,CAAC,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,oBAAoB,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;wBACxI,UAAU,CAAC,aAAa,GAAG,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,KAAK,GAAG,oBAAoB,CAAC,mBAAmB,CAAC,CAAC;oBACjI,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACP,UAAU,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,oBAAoB,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;wBAC9G,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;4BAAC,UAAU,CAAC,aAAa,GAAG,MAAM,CAAC,KAAK,GAAG,oBAAoB,CAAC,mBAAmB,CAAC,CAAC;oBACrG,CAAC;gBACF,CAAC;gBA7DM,4BAAO,GAAG,CAAC,CAAC;gBACZ,8BAAS,GAAG,CAAC,CAAC,CAAC;gBAAQ,6BAAQ,GAAG,CAAC,CAAC,CAAC;gBAAQ,wCAAmB,GAAG,CAAC,CAAC,CAAC;gBACtE,wBAAG,GAAG,CAAC,CAAC;gBAAQ,mCAAc,GAAG,CAAC,CAAC;gBA4D3C,2BAAC;YAAD,CAAC,AA/DD,CAA0C,aAAa,GA+DtD;YA/DY,yBAAoB,uBA+DhC,CAAA;YAED;gBAAiD,+CAAa;gBAQ7D,qCAAa,UAAkB;oBAC9B,kBAAM,UAAU,CAAC,CAAC;oBAClB,IAAI,CAAC,MAAM,GAAG,UAAK,CAAC,aAAa,CAAC,UAAU,GAAG,2BAA2B,CAAC,OAAO,CAAC,CAAC;gBACrF,CAAC;gBAED,mDAAa,GAAb;oBACC,MAAM,CAAC,CAAC,YAAY,CAAC,mBAAmB,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBACjF,CAAC;gBAGD,8CAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,SAAiB,EAAE,YAAoB,EAAE,QAAgB,EAAE,QAAgB;oBACtH,UAAU,IAAI,2BAA2B,CAAC,OAAO,CAAC;oBAClD,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;oBAC/B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,2BAA2B,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC;oBACzE,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,2BAA2B,CAAC,SAAS,CAAC,GAAG,YAAY,CAAC;oBAC/E,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,2BAA2B,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;oBACvE,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,2BAA2B,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;gBACxE,CAAC;gBAED,2CAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,WAAyB,EAAE,KAAa,EAAE,SAAkB,EAAE,SAAkB;oBAC1I,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAEzB,IAAI,UAAU,GAAwB,QAAQ,CAAC,oBAAoB,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;oBACnG,EAAE,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACtB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACf,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;4BAC3B,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;4BACtC,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC;4BACzC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;4BACpC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;wBACrC,CAAC;wBACD,MAAM,CAAC;oBACR,CAAC;oBAED,IAAI,MAAM,GAAG,CAAC,EAAE,SAAS,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC;oBACpD,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,2BAA2B,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;wBACzE,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;wBACtB,MAAM,GAAG,MAAM,CAAC,CAAC,GAAG,2BAA2B,CAAC,WAAW,CAAC,CAAC;wBAC7D,SAAS,GAAG,MAAM,CAAC,CAAC,GAAG,2BAA2B,CAAC,cAAc,CAAC,CAAC;wBACnE,KAAK,GAAG,MAAM,CAAC,CAAC,GAAG,2BAA2B,CAAC,UAAU,CAAC,CAAC;wBAC3D,KAAK,GAAG,MAAM,CAAC,CAAC,GAAG,2BAA2B,CAAC,UAAU,CAAC,CAAC;oBAC5D,CAAC;oBAAC,IAAI,CAAC,CAAC;wBAEP,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,2BAA2B,CAAC,OAAO,CAAC,CAAC;wBACtF,MAAM,GAAG,MAAM,CAAC,KAAK,GAAG,2BAA2B,CAAC,WAAW,CAAC,CAAC;wBACjE,SAAS,GAAG,MAAM,CAAC,KAAK,GAAG,2BAA2B,CAAC,cAAc,CAAC,CAAC;wBACvE,KAAK,GAAG,MAAM,CAAC,KAAK,GAAG,2BAA2B,CAAC,UAAU,CAAC,CAAC;wBAC/D,KAAK,GAAG,MAAM,CAAC,KAAK,GAAG,2BAA2B,CAAC,UAAU,CAAC,CAAC;wBAC/D,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;wBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,2BAA2B,CAAC,OAAO,GAAG,CAAC,EACjF,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,2BAA2B,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;wBAE/F,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,2BAA2B,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO,CAAC;wBAClF,SAAS,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,2BAA2B,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,GAAG,OAAO,CAAC;wBAC3F,KAAK,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,2BAA2B,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,OAAO,CAAC;wBAC/E,KAAK,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,2BAA2B,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,OAAO,CAAC;oBAChF,CAAC;oBACD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBACf,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;wBAC3B,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;wBAC1E,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;wBACtF,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;wBACtE,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;oBACvE,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACP,UAAU,CAAC,SAAS,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;wBAChE,UAAU,CAAC,YAAY,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;wBACzE,UAAU,CAAC,QAAQ,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;wBAC7D,UAAU,CAAC,QAAQ,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;oBAC9D,CAAC;gBACF,CAAC;gBA5EM,mCAAO,GAAG,CAAC,CAAC;gBACZ,qCAAS,GAAG,CAAC,CAAC,CAAC;gBAAQ,uCAAW,GAAG,CAAC,CAAC,CAAC;gBAAQ,0CAAc,GAAG,CAAC,CAAC,CAAC;gBAAQ,sCAAU,GAAG,CAAC,CAAC,CAAC;gBAAQ,sCAAU,GAAG,CAAC,CAAC,CAAC;gBACpH,kCAAM,GAAG,CAAC,CAAC;gBAAQ,qCAAS,GAAG,CAAC,CAAC;gBAAQ,iCAAK,GAAG,CAAC,CAAC;gBAAQ,iCAAK,GAAG,CAAC,CAAC;gBA2E7E,kCAAC;YAAD,CAAC,AA9ED,CAAiD,aAAa,GA8E7D;YA9EY,gCAA2B,8BA8EvC,CAAA;YAED;gBAAoD,kDAAa;gBAShE,wCAAa,UAAkB;oBAC9B,kBAAM,UAAU,CAAC,CAAC;oBAClB,IAAI,CAAC,MAAM,GAAG,UAAK,CAAC,aAAa,CAAC,UAAU,GAAG,8BAA8B,CAAC,OAAO,CAAC,CAAC;gBACxF,CAAC;gBAED,sDAAa,GAAb;oBACC,MAAM,CAAC,CAAC,YAAY,CAAC,sBAAsB,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC;gBAC/E,CAAC;gBAGD,iDAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,KAAa;oBACxD,UAAU,IAAI,8BAA8B,CAAC,OAAO,CAAC;oBACrD,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;oBAC/B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,8BAA8B,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;gBACxE,CAAC;gBAED,8CAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,WAAyB,EAAE,KAAa,EAAE,SAAkB,EAAE,SAAkB;oBAC1I,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,IAAI,UAAU,GAAmB,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;oBACpF,EAAE,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACtB,EAAE,CAAC,CAAC,SAAS,CAAC;4BAAC,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;wBAC9D,MAAM,CAAC;oBACR,CAAC;oBAED,IAAI,QAAQ,GAAG,CAAC,CAAC;oBACjB,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,8BAA8B,CAAC,OAAO,CAAC,CAAC;wBAC1E,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,8BAA8B,CAAC,UAAU,CAAC,CAAC;oBAC9E,IAAI,CAAC,CAAC;wBAEL,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,8BAA8B,CAAC,OAAO,CAAC,CAAC;wBACzF,QAAQ,GAAG,MAAM,CAAC,KAAK,GAAG,8BAA8B,CAAC,UAAU,CAAC,CAAC;wBACrE,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;wBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,8BAA8B,CAAC,OAAO,GAAG,CAAC,EACpF,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,8BAA8B,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;wBAElG,QAAQ,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,8BAA8B,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,GAAG,OAAO,CAAC;oBACzF,CAAC;oBACD,EAAE,CAAC,CAAC,SAAS,CAAC;wBACb,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;oBAChG,IAAI;wBACH,UAAU,CAAC,QAAQ,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;gBAClE,CAAC;gBAjDM,sCAAO,GAAG,CAAC,CAAC;gBACZ,wCAAS,GAAG,CAAC,CAAC,CAAC;gBAAQ,yCAAU,GAAG,CAAC,CAAC,CAAC;gBACvC,oCAAK,GAAG,CAAC,CAAC;gBAgDlB,qCAAC;YAAD,CAAC,AAnDD,CAAoD,aAAa,GAmDhE;YAnDY,mCAA8B,iCAmD1C,CAAA;YAED;gBAAmD,iDAA8B;gBAChF,uCAAa,UAAkB;oBAC9B,kBAAM,UAAU,CAAC,CAAC;gBACnB,CAAC;gBAED,qDAAa,GAAb;oBACC,MAAM,CAAC,CAAC,YAAY,CAAC,qBAAqB,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC;gBAC9E,CAAC;gBAED,6CAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,WAAyB,EAAE,KAAa,EAAE,SAAkB,EAAE,SAAkB;oBAC1I,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,IAAI,UAAU,GAAmB,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;oBACpF,EAAE,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACtB,EAAE,CAAC,CAAC,SAAS,CAAC;4BAAC,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC;wBAC5D,MAAM,CAAC;oBACR,CAAC;oBAED,IAAI,OAAO,GAAG,CAAC,CAAC;oBAChB,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,6BAA6B,CAAC,OAAO,CAAC,CAAC;wBACzE,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,6BAA6B,CAAC,UAAU,CAAC,CAAC;oBAC5E,IAAI,CAAC,CAAC;wBAEL,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,6BAA6B,CAAC,OAAO,CAAC,CAAC;wBACxF,OAAO,GAAG,MAAM,CAAC,KAAK,GAAG,6BAA6B,CAAC,UAAU,CAAC,CAAC;wBACnE,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;wBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,6BAA6B,CAAC,OAAO,GAAG,CAAC,EACnF,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,6BAA6B,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;wBAEjG,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,6BAA6B,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC;oBACtF,CAAC;oBAED,EAAE,CAAC,CAAC,SAAS,CAAC;wBACb,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;oBAC5F,IAAI;wBACH,UAAU,CAAC,OAAO,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;gBAC/D,CAAC;gBACF,oCAAC;YAAD,CAAC,AApCD,CAAmD,8BAA8B,GAoChF;YApCY,kCAA6B,gCAoCzC,CAAA;YAED;gBAA+C,6CAAa;gBAS3D,mCAAa,UAAkB;oBAC9B,kBAAM,UAAU,CAAC,CAAC;oBAClB,IAAI,CAAC,MAAM,GAAG,UAAK,CAAC,aAAa,CAAC,UAAU,GAAG,yBAAyB,CAAC,OAAO,CAAC,CAAC;gBACnF,CAAC;gBAED,iDAAa,GAAb;oBACC,MAAM,CAAC,CAAC,YAAY,CAAC,iBAAiB,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC;gBAC1E,CAAC;gBAGD,4CAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,SAAiB,EAAE,YAAoB;oBAClF,UAAU,IAAI,yBAAyB,CAAC,OAAO,CAAC;oBAChD,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;oBAC/B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,yBAAyB,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC;oBACvE,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,yBAAyB,CAAC,SAAS,CAAC,GAAG,YAAY,CAAC;gBAC9E,CAAC;gBAED,yCAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,WAAyB,EAAE,KAAa,EAAE,SAAkB,EAAE,SAAkB;oBAC1I,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,IAAI,UAAU,GAAmB,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;oBAEpF,EAAE,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACtB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACf,UAAU,CAAC,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC;4BACjD,UAAU,CAAC,YAAY,GAAG,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC;wBACxD,CAAC;wBACD,MAAM,CAAC;oBACR,CAAC;oBAED,IAAI,MAAM,GAAG,CAAC,EAAE,SAAS,GAAG,CAAC,CAAC;oBAC9B,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,yBAAyB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;wBACvE,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,yBAAyB,CAAC,WAAW,CAAC,CAAC;wBACvE,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,yBAAyB,CAAC,cAAc,CAAC,CAAC;oBAC9E,CAAC;oBAAC,IAAI,CAAC,CAAC;wBAEP,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,yBAAyB,CAAC,OAAO,CAAC,CAAC;wBACpF,MAAM,GAAG,MAAM,CAAC,KAAK,GAAG,yBAAyB,CAAC,WAAW,CAAC,CAAC;wBAC/D,SAAS,GAAG,MAAM,CAAC,KAAK,GAAG,yBAAyB,CAAC,cAAc,CAAC,CAAC;wBACrE,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;wBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,yBAAyB,CAAC,OAAO,GAAG,CAAC,EAC/E,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,yBAAyB,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;wBAE7F,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,yBAAyB,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO,CAAC;wBAChF,SAAS,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,yBAAyB,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,GAAG,OAAO,CAAC;oBAC1F,CAAC;oBAED,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBACf,UAAU,CAAC,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;wBAChG,UAAU,CAAC,YAAY,GAAG,UAAU,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;oBAC7G,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACP,UAAU,CAAC,SAAS,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;wBAChE,UAAU,CAAC,YAAY,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;oBAC1E,CAAC;gBACF,CAAC;gBA7DM,iCAAO,GAAG,CAAC,CAAC;gBACZ,mCAAS,GAAG,CAAC,CAAC,CAAC;gBAAQ,qCAAW,GAAG,CAAC,CAAC,CAAC;gBAAQ,wCAAc,GAAG,CAAC,CAAC,CAAC;gBACpE,gCAAM,GAAG,CAAC,CAAC;gBAAQ,mCAAS,GAAG,CAAC,CAAC;gBA4DzC,gCAAC;YAAD,CAAC,AA/DD,CAA+C,aAAa,GA+D3D;YA/DY,8BAAyB,4BA+DrC,CAAA;QACF,CAAC,EA5/BiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QA4/BrB;IAAD,CAAC,EA5/BW,KAAK,GAAL,UAAK,KAAL,UAAK,QA4/BhB;AAAD,CAAC,EA5/BM,IAAI,KAAJ,IAAI,QA4/BV;AC5/BD,IAAO,IAAI,CA+zBV;AA/zBD,WAAO,IAAI;IAAC,IAAA,KAAK,CA+zBhB;IA/zBW,WAAA,KAAK;QAAC,IAAA,IAAI,CA+zBrB;QA/zBiB,WAAA,IAAI,EAAC,CAAC;YACvB;gBAcC,wBAAa,IAAwB;oBAVrC,WAAM,GAAG,IAAI,KAAK,EAAc,CAAC;oBACjC,WAAM,GAAG,IAAI,KAAK,EAAS,CAAC;oBAC5B,cAAS,GAAG,IAAI,KAAK,EAA2B,CAAC;oBACjD,UAAK,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;oBAC7B,gBAAW,GAAG,IAAI,WAAM,EAAE,CAAC;oBAC3B,sBAAiB,GAAG,KAAK,CAAC;oBAC1B,cAAS,GAAG,CAAC,CAAC;oBAEd,mBAAc,GAAG,IAAI,SAAI,CAAa,cAAM,OAAA,IAAI,UAAU,EAAE,EAAhB,CAAgB,CAAC,CAAC;oBAG7D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBAClB,CAAC;gBAED,+BAAM,GAAN,UAAQ,KAAa;oBACpB,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC;oBACxB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC/C,IAAI,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBACxB,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC;4BAAC,QAAQ,CAAC;wBAE9B,OAAO,CAAC,aAAa,GAAG,OAAO,CAAC,iBAAiB,CAAC;wBAClD,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC;wBAE1C,IAAI,YAAY,GAAG,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC;wBAE7C,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;4BACvB,OAAO,CAAC,KAAK,IAAI,YAAY,CAAC;4BAC9B,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;gCAAC,QAAQ,CAAC;4BAChC,YAAY,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC;4BAC9B,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;wBACnB,CAAC;wBAED,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;wBACxB,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;4BAElB,IAAI,QAAQ,GAAG,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;4BAC9C,EAAE,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC;gCACnB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;gCACf,IAAI,CAAC,SAAS,GAAG,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;gCACnD,OAAO,CAAC,SAAS,IAAI,YAAY,CAAC;gCAClC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;gCACzB,OAAO,IAAI,CAAC,UAAU,IAAI,IAAI,EAAE,CAAC;oCAChC,IAAI,CAAC,OAAO,IAAI,YAAY,CAAC;oCAC7B,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;gCACxB,CAAC;gCACD,QAAQ,CAAC;4BACV,CAAC;4BACD,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;wBAC7C,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACP,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;4BAE5C,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC;gCACzE,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;gCACjB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gCACxB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;gCAC1B,QAAQ,CAAC;4BACV,CAAC;wBACF,CAAC;wBAED,OAAO,CAAC,SAAS,IAAI,YAAY,CAAC;oBACnC,CAAC;oBAED,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;gBACpB,CAAC;gBAED,yCAAgB,GAAhB,UAAkB,KAAiB,EAAE,KAAa,EAAE,MAAe;oBAClE,IAAI,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC;oBAC5B,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,MAAM,CAAC;oBAEzB,EAAE,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;wBACvE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBACrB,IAAI,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC;wBAC9B,KAAK,CAAC,UAAU,GAAG,OAAO,CAAC;wBAC3B,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC;4BAAC,MAAM,CAAC;wBAC5B,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;wBAC7B,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;wBACrC,IAAI,GAAG,OAAO,CAAC;oBAChB,CAAC;oBAED,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC;oBAC5C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC;oBACpC,IAAI,eAAe,GAAG,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;oBAC7C,IAAI,CAAC,SAAS,IAAI,eAAe,CAAC;oBAClC,KAAK,CAAC,OAAO,IAAI,eAAe,CAAC;oBAEjC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;gBAC/D,CAAC;gBAED,8BAAK,GAAL,UAAO,QAAkB;oBACxB,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAClE,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC;wBAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;oBAEtD,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAEzB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC/C,IAAI,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBACxB,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,IAAI,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;4BAAC,QAAQ,CAAC;wBAGnD,IAAI,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC;wBACxB,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,IAAI,IAAI,CAAC;4BAAC,GAAG,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;wBAG/E,IAAI,aAAa,GAAG,OAAO,CAAC,aAAa,EAAE,aAAa,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC;wBACtF,IAAI,aAAa,GAAG,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC;wBACvD,IAAI,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC;wBAC5C,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;4BACd,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,aAAa,EAAE,EAAE,EAAE;gCACxC,SAAS,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;wBACtF,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACP,IAAI,UAAU,GAAG,OAAO,CAAC,iBAAiB,CAAC,MAAM,IAAI,CAAC,CAAC;4BACvD,EAAE,CAAC,CAAC,UAAU,CAAC;gCAAC,UAAK,CAAC,YAAY,CAAC,OAAO,CAAC,iBAAiB,EAAE,aAAa,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;4BACxF,IAAI,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;4BAElD,IAAI,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;4BAC5C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,aAAa,EAAE,EAAE,EAAE,EAAE,CAAC;gCAC3C,IAAI,QAAQ,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;gCAC7B,EAAE,CAAC,CAAC,QAAQ,YAAY,mBAAc,CAAC,CAAC,CAAC;oCACxC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG,EAAE,cAAc,CAAC,EAAE,CAAC,EAAE,iBAAiB,EAAE,EAAE,IAAI,CAAC,EAC9G,UAAU,CAAC,CAAC;gCACd,CAAC;gCAAC,IAAI;oCACL,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,EAAE,GAAG,EAAE,cAAc,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;4BACjG,CAAC;wBACF,CAAC;wBACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;wBACzC,OAAO,CAAC,iBAAiB,GAAG,aAAa,CAAC;wBAC1C,OAAO,CAAC,aAAa,GAAG,OAAO,CAAC,SAAS,CAAC;oBAC3C,CAAC;oBAED,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;gBACpB,CAAC;gBAED,wCAAe,GAAf,UAAiB,KAAiB,EAAE,QAAkB;oBACrD,IAAI,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC;oBAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC;wBAAC,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;oBAElE,IAAI,GAAG,GAAG,CAAC,CAAC;oBACZ,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,IAAI,CAAC,CAAC;wBAC1B,GAAG,GAAG,CAAC,CAAC;oBACT,IAAI,CAAC,CAAC;wBACL,GAAG,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC;wBACxC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;4BAAC,GAAG,GAAG,CAAC,CAAC;oBACtB,CAAC;oBAED,IAAI,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;oBAC5D,IAAI,WAAW,GAAG,GAAG,GAAG,IAAI,CAAC,mBAAmB,EAAE,SAAS,GAAG,GAAG,GAAG,IAAI,CAAC,kBAAkB,CAAC;oBAC5F,IAAI,aAAa,GAAG,IAAI,CAAC,aAAa,EAAE,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;oBAChF,IAAI,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC;oBACpD,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;oBACzC,IAAI,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;oBACzC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;oBAEpD,IAAI,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,IAAI,CAAC,CAAC;oBACpD,EAAE,CAAC,CAAC,UAAU,CAAC;wBAAC,UAAK,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,EAAE,aAAa,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;oBACrF,IAAI,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC;oBAE/C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,EAAE,EAAE,CAAC;wBACxC,IAAI,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;wBAC5B,IAAI,SAAS,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;wBAClC,EAAE,CAAC,CAAC,QAAQ,YAAY,mBAAc,CAAC;4BACtC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,QAAQ,EAAE,aAAa,EAAE,KAAK,EAAE,SAAS,EAAE,iBAAiB,EAAE,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,CAAC;wBACtH,IAAI,CAAC,CAAC;4BACL,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gCAChB,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,QAAQ,YAAY,uBAAkB,CAAC;oCAAC,QAAQ,CAAC;gCACrE,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,QAAQ,YAAY,sBAAiB,CAAC;oCAAC,QAAQ,CAAC;4BACnE,CAAC;4BACD,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;wBACxF,CAAC;oBACF,CAAC;oBAED,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;oBACtC,IAAI,CAAC,iBAAiB,GAAG,aAAa,CAAC;oBACvC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC;oBAEpC,MAAM,CAAC,GAAG,CAAC;gBACZ,CAAC;gBAED,4CAAmB,GAAnB,UAAqB,QAAkB,EAAE,QAAkB,EAAE,IAAY,EAAE,KAAa,EAAE,SAAkB,EAC3G,iBAAgC,EAAE,CAAS,EAAE,UAAmB;oBAChE,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;wBAChB,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;wBAC7D,MAAM,CAAC;oBACR,CAAC;oBAED,IAAI,cAAc,GAAG,QAA0B,CAAC;oBAChD,IAAI,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC;oBACnC,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;oBACpD,EAAE,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACtB,EAAE,CAAC,CAAC,SAAS,CAAC;4BAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;wBAClD,MAAM,CAAC;oBACR,CAAC;oBAED,IAAI,EAAE,GAAG,CAAC,CAAC;oBACX,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,mBAAc,CAAC,OAAO,CAAC,CAAC;wBAC1D,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,mBAAc,CAAC,aAAa,CAAC,CAAC;oBAChF,IAAI,CAAC,CAAC;wBAEL,IAAI,KAAK,GAAG,cAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,mBAAc,CAAC,OAAO,CAAC,CAAC;wBACzE,IAAI,YAAY,GAAG,MAAM,CAAC,KAAK,GAAG,mBAAc,CAAC,aAAa,CAAC,CAAC;wBAChE,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;wBAC9B,IAAI,OAAO,GAAG,cAAc,CAAC,eAAe,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC,EAC5D,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,mBAAc,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;wBAElF,EAAE,GAAG,MAAM,CAAC,KAAK,GAAG,mBAAc,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC;wBAC5D,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,kBAAkB,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;wBAC5D,EAAE,GAAG,YAAY,GAAG,EAAE,GAAG,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;wBACtD,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,kBAAkB,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;oBAC7D,CAAC;oBAGD,IAAI,EAAE,GAAG,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBACxD,IAAI,KAAK,GAAG,CAAC,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;oBAC9B,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;wBACf,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;4BAChB,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;4BACzB,KAAK,GAAG,CAAC,CAAC;wBACX,CAAC;wBAAC,IAAI;4BACL,KAAK,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;oBAC/B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACP,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,kBAAkB,GAAG,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;wBAChE,IAAI,SAAS,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,CAAC;wBAChC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;4BAChB,SAAS,GAAG,CAAC,CAAC;4BACd,QAAQ,GAAG,IAAI,CAAC;wBACjB,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACP,SAAS,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;4BACjC,QAAQ,GAAG,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACrC,CAAC;wBACD,IAAI,OAAO,GAAG,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,SAAS,IAAI,CAAC,CAAC;wBAE7C,EAAE,CAAC,CAAC,cAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,cAAS,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;4BAEtF,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC;gCAAC,SAAS,IAAI,GAAG,GAAG,cAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;4BAC9E,GAAG,GAAG,OAAO,CAAC;wBACf,CAAC;wBACD,KAAK,GAAG,IAAI,GAAG,SAAS,GAAG,SAAS,GAAG,GAAG,CAAC;wBAC3C,EAAE,CAAC,CAAC,GAAG,IAAI,OAAO,CAAC;4BAAC,KAAK,IAAI,GAAG,GAAG,cAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;wBAC/D,iBAAiB,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;oBAC9B,CAAC;oBACD,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;oBAChC,EAAE,IAAI,KAAK,GAAG,KAAK,CAAC;oBACpB,IAAI,CAAC,QAAQ,GAAG,EAAE,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,kBAAkB,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;gBAC5E,CAAC;gBAED,oCAAW,GAAX,UAAa,KAAiB,EAAE,aAAqB;oBACpD,IAAI,cAAc,GAAG,KAAK,CAAC,cAAc,EAAE,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC;oBAC7E,IAAI,QAAQ,GAAG,YAAY,GAAG,cAAc,CAAC;oBAC7C,IAAI,gBAAgB,GAAG,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC;oBAGlD,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;oBAC7B,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBACnB,IAAI,OAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBACtB,EAAE,CAAC,CAAC,OAAK,CAAC,IAAI,GAAG,gBAAgB,CAAC;4BAAC,KAAK,CAAC;wBACzC,EAAE,CAAC,CAAC,OAAK,CAAC,IAAI,GAAG,YAAY,CAAC;4BAAC,QAAQ,CAAC;wBACxC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,OAAK,CAAC,CAAC;oBAChC,CAAC;oBAGD,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,gBAAgB,GAAG,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC;0BAC7D,CAAC,aAAa,IAAI,YAAY,IAAI,KAAK,CAAC,aAAa,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;wBAC1E,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;oBAC5B,CAAC;oBAGD,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBACnB,IAAI,OAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBACtB,EAAE,CAAC,CAAC,OAAK,CAAC,IAAI,GAAG,cAAc,CAAC;4BAAC,QAAQ,CAAC;wBAC1C,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBACpC,CAAC;oBACD,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;gBACxB,CAAC;gBAED,oCAAW,GAAX;oBACC,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC;oBAChC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBACjD,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;oBACvB,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,KAAK,CAAC;oBACjC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;gBACpB,CAAC;gBAED,mCAAU,GAAV,UAAY,UAAkB;oBAC7B,EAAE,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;wBAAC,MAAM,CAAC;oBAC7C,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;oBACtC,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC;wBAAC,MAAM,CAAC;oBAE5B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBAExB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;oBAE1B,IAAI,KAAK,GAAG,OAAO,CAAC;oBACpB,OAAO,IAAI,EAAE,CAAC;wBACb,IAAI,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC;wBAC5B,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;4BAAC,KAAK,CAAC;wBACxB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBACrB,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC;wBACxB,KAAK,GAAG,IAAI,CAAC;oBACd,CAAC;oBAED,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;oBAEvC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;gBACpB,CAAC;gBAED,mCAAU,GAAV,UAAY,KAAa,EAAE,OAAmB;oBAC7C,IAAI,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;oBACrC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;oBAE7B,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;wBAClB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBAC3B,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;wBAC1B,OAAO,CAAC,OAAO,GAAG,CAAC,CAAC;wBAGpB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC;4BAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;oBAC/F,CAAC;oBAED,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBAC3B,CAAC;gBAED,qCAAY,GAAZ,UAAc,UAAkB,EAAE,aAAqB,EAAE,IAAa;oBACrE,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;oBACpE,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,aAAa,CAAC,CAAC;oBAChF,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;gBAC3D,CAAC;gBAED,yCAAgB,GAAhB,UAAkB,UAAkB,EAAE,SAAoB,EAAE,IAAa;oBACxE,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;oBACpE,IAAI,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBAC7C,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;wBACrB,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;4BAEjC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;4BAC/B,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;4BAC9B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;4BACxB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;4BAC1B,OAAO,GAAG,IAAI,CAAC;wBAChB,CAAC;wBAAC,IAAI;4BACL,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;oBAC5B,CAAC;oBACD,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;oBAClE,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;oBACnC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;oBACnB,MAAM,CAAC,KAAK,CAAC;gBACd,CAAC;gBAED,qCAAY,GAAZ,UAAc,UAAkB,EAAE,aAAqB,EAAE,IAAa,EAAE,KAAa;oBACpF,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;oBACpE,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,aAAa,CAAC,CAAC;oBAChF,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;gBAClE,CAAC;gBAED,yCAAgB,GAAhB,UAAkB,UAAkB,EAAE,SAAoB,EAAE,IAAa,EAAE,KAAa;oBACvF,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;oBAEpE,IAAI,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBAC1C,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;wBAClB,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI;4BACvB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;oBACnB,CAAC;oBAED,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;oBAE/D,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;wBAClB,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;wBACnC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;oBACpB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACP,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;wBAClB,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;4BAChB,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC;4BACvD,EAAE,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC;gCACjB,KAAK,IAAI,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;4BAC3G,IAAI;gCACH,KAAK,GAAG,CAAC,CAAC;wBACZ,CAAC;oBACF,CAAC;oBAED,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;oBACpB,MAAM,CAAC,KAAK,CAAC;gBACd,CAAC;gBAED,0CAAiB,GAAjB,UAAmB,UAAkB,EAAE,WAAmB;oBACzD,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,cAAc,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;oBACpF,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;oBAChC,KAAK,CAAC,QAAQ,GAAG,WAAW,CAAC;oBAC7B,MAAM,CAAC,KAAK,CAAC;gBACd,CAAC;gBAED,0CAAiB,GAAjB,UAAmB,UAAkB,EAAE,WAAmB,EAAE,KAAa;oBACxE,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;wBAAC,KAAK,IAAI,WAAW,CAAC;oBACrC,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,cAAc,CAAC,cAAc,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;oBAC3F,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;oBAChC,KAAK,CAAC,QAAQ,GAAG,WAAW,CAAC;oBAC7B,MAAM,CAAC,KAAK,CAAC;gBACd,CAAC;gBAED,2CAAkB,GAAlB,UAAoB,WAAmB;oBACtC,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC;oBAChC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBACpD,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBAC7B,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC;4BAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;oBAC9E,CAAC;oBACD,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,KAAK,CAAC;oBACjC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;gBACpB,CAAC;gBAED,sCAAa,GAAb,UAAe,KAAa;oBAC3B,EAAE,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;wBAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC1D,UAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;oBAC7E,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,KAAK,GAAG,CAAC,CAAC;oBAC/B,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;gBAED,mCAAU,GAAV,UAAY,UAAkB,EAAE,SAAoB,EAAE,IAAa,EAAE,IAAgB;oBACpF,IAAI,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;oBACzC,KAAK,CAAC,UAAU,GAAG,UAAU,CAAC;oBAC9B,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC;oBAC5B,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;oBAElB,KAAK,CAAC,cAAc,GAAG,CAAC,CAAC;oBACzB,KAAK,CAAC,mBAAmB,GAAG,CAAC,CAAC;oBAC9B,KAAK,CAAC,kBAAkB,GAAG,CAAC,CAAC;oBAE7B,KAAK,CAAC,cAAc,GAAG,CAAC,CAAC;oBACzB,KAAK,CAAC,YAAY,GAAG,SAAS,CAAC,QAAQ,CAAC;oBACxC,KAAK,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;oBACzB,KAAK,CAAC,iBAAiB,GAAG,CAAC,CAAC,CAAC;oBAE7B,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;oBAChB,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC;oBACpB,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;oBACrB,KAAK,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;oBACzB,KAAK,CAAC,QAAQ,GAAG,IAAI,GAAG,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC,YAAY,CAAC;oBAC9D,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC;oBAEpB,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;oBAChB,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC;oBACnB,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC;oBAClB,KAAK,CAAC,WAAW,GAAG,IAAI,IAAI,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;oBACnF,MAAM,CAAC,KAAK,CAAC;gBACd,CAAC;gBAED,oCAAW,GAAX,UAAa,KAAiB;oBAC7B,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;oBACtB,OAAO,IAAI,IAAI,IAAI,EAAE,CAAC;wBACrB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBACzB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;oBAClB,CAAC;oBACD,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;gBACnB,CAAC;gBAED,2CAAkB,GAAlB;oBACC,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;oBAE/B,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;oBAGnC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;oBAClC,WAAW,CAAC,KAAK,EAAE,CAAC;oBACpB,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBACnB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBAC3B,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC;4BAAC,QAAQ,CAAC;wBAC5B,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;wBAC9B,CAAC,EAAE,CAAC;wBACJ,KAAK,CAAC;oBACP,CAAC;oBACD,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBACnB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBAC3B,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC;4BAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;oBACpD,CAAC;gBACF,CAAC;gBAED,0CAAiB,GAAjB,UAAmB,KAAiB;oBACnC,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC;wBAC9B,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;wBACzC,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,cAAc,CAAC,CAAC;wBACtD,MAAM,CAAC;oBACR,CAAC;oBACD,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;oBACnC,IAAI,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC;oBAC1C,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC;oBACzB,IAAI,KAAK,GAAG,UAAK,CAAC,YAAY,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;oBAC/D,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC5B,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC;wBAC9C,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;oBACjB,CAAC;gBACF,CAAC;gBAED,4CAAmB,GAAnB,UAAqB,KAAiB;oBACrC,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,IAAI,IAAI,CAAC;wBAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;oBACzE,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,cAAc,CAAC,CAAC;gBACvD,CAAC;gBAED,4CAAmB,GAAnB,UAAqB,KAAiB,EAAE,UAA0B;oBACjE,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;oBACnC,IAAI,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC;oBAC1C,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC;oBACzB,IAAI,KAAK,GAAG,UAAK,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;oBAC9C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBACzB,KAAK,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC;gBAC3D,CAAC;gBAED,mCAAU,GAAV,UAAY,UAAkB;oBAC7B,EAAE,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;wBAAC,MAAM,CAAC,IAAI,CAAC;oBAClD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;gBAChC,CAAC;gBAED,oCAAW,GAAX,UAAa,QAAiC;oBAC7C,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAClE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC/B,CAAC;gBAGD,uCAAc,GAAd,UAAgB,QAAiC;oBAChD,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;oBAC7C,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;wBAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBACjD,CAAC;gBAED,uCAAc,GAAd;oBACC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;gBAC3B,CAAC;gBAED,mDAA0B,GAA1B;oBACC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;gBACpB,CAAC;gBAUK,2CAAkB,GAAlB,UAAmB,UAAkB,EAAE,aAAqB,EAAE,IAAa;oBACvE,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC;wBACrC,cAAc,CAAC,kBAAkB,GAAG,IAAI,CAAC;wBACzC,OAAO,CAAC,IAAI,CAAC,4GAA4G,CAAC,CAAC;oBAC/H,CAAC;oBACD,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;gBACvD,CAAC;gBAID,2CAAkB,GAAlB,UAAmB,UAAkB,EAAE,aAAqB,EAAE,IAAa,EAAE,KAAa;oBACtF,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC;wBACrC,cAAc,CAAC,kBAAkB,GAAG,IAAI,CAAC;wBACzC,OAAO,CAAC,IAAI,CAAC,4GAA4G,CAAC,CAAC;oBAC/H,CAAC;oBACD,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,aAAa,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;gBAC9D,CAAC;gBAID,2CAAkB,GAAlB,UAAmB,aAAqB;oBACpC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC;wBACrC,cAAc,CAAC,kBAAkB,GAAG,IAAI,CAAC;wBACzC,OAAO,CAAC,IAAI,CAAC,4GAA4G,CAAC,CAAC;oBAC/H,CAAC;oBACD,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;oBACpE,MAAM,CAAC,SAAS,KAAK,IAAI,CAAC;gBAC9B,CAAC;gBAxjBA,6BAAc,GAAG,IAAI,cAAS,CAAC,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;gBA2hBnC,iCAAkB,GAAY,KAAK,CAAC;gBAUpC,iCAAkB,GAAY,KAAK,CAAC;gBAUpC,iCAAkB,GAAY,KAAK,CAAC;gBAU1D,qBAAC;YAAD,CAAC,AA1jBD,IA0jBC;YA1jBY,mBAAc,iBA0jB1B,CAAA;YAED;gBAAA;oBAUC,mBAAc,GAAG,IAAI,KAAK,EAAW,CAAC;oBACtC,sBAAiB,GAAG,IAAI,KAAK,EAAU,CAAC;gBA6EzC,CAAC;gBA3EA,0BAAK,GAAL;oBACC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;oBACvB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;oBACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;oBACrB,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;oBAC/B,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;gBACnC,CAAC;gBAED,qCAAgB,GAAhB;oBACC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;wBACf,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC;wBACvD,EAAE,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC;4BAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;wBAC9C,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC;oBAC1D,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC1E,CAAC;gBAED,qCAAgB,GAAhB,UAAiB,aAAqB;oBACrC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;oBACnC,IAAI,CAAC,iBAAiB,GAAG,aAAa,CAAC;gBACxC,CAAC;gBAED,+BAAU,GAAV;oBACC,MAAM,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC;gBAClE,CAAC;gBAED,4CAAuB,GAAvB;oBACC,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;gBACnC,CAAC;gBAWK,sBAAI,4BAAI;yBAAR;wBACI,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAAC;4BACjC,UAAU,CAAC,kBAAkB,GAAG,IAAI,CAAC;4BACrC,OAAO,CAAC,IAAI,CAAC,uFAAuF,CAAC,CAAC;wBAC1G,CAAC;wBACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;oBAC1B,CAAC;yBAED,UAAS,KAAa;wBAClB,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAAC;4BACjC,UAAU,CAAC,kBAAkB,GAAG,IAAI,CAAC;4BACrC,OAAO,CAAC,IAAI,CAAC,uFAAuF,CAAC,CAAC;wBAC1G,CAAC;wBACD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;oBAC3B,CAAC;;;mBARA;gBAUD,sBAAI,+BAAO;yBAAX;wBACI,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAAC;4BACjC,UAAU,CAAC,kBAAkB,GAAG,IAAI,CAAC;4BACrC,OAAO,CAAC,IAAI,CAAC,yFAAyF,CAAC,CAAC;wBAC5G,CAAC;wBACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;oBAC1B,CAAC;yBAED,UAAY,KAAa;wBACrB,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAAC;4BACjC,UAAU,CAAC,kBAAkB,GAAG,IAAI,CAAC;4BACrC,OAAO,CAAC,IAAI,CAAC,yFAAyF,CAAC,CAAC;wBAC5G,CAAC;wBACD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;oBAC3B,CAAC;;;mBARA;gBAUD,+BAAU,GAAV;oBACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACtD,CAAC;gBArCc,6BAAkB,GAAY,KAAK,CAAC;gBACpC,6BAAkB,GAAY,KAAK,CAAC;gBAqC1D,iBAAC;YAAD,CAAC,AAxFD,IAwFC;YAxFY,eAAU,aAwFtB,CAAA;YAED;gBAKC,oBAAY,SAAyB;oBAJrC,YAAO,GAAe,EAAE,CAAC;oBACzB,kBAAa,GAAG,KAAK,CAAC;oBAIrB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;gBAC5B,CAAC;gBAED,0BAAK,GAAL,UAAO,KAAiB;oBACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;oBACnC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACzB,IAAI,CAAC,SAAS,CAAC,iBAAiB,GAAG,IAAI,CAAC;gBACzC,CAAC;gBAED,8BAAS,GAAT,UAAW,KAAiB;oBAC3B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;oBACvC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC1B,CAAC;gBAED,wBAAG,GAAH,UAAK,KAAiB;oBACrB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;oBACjC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACzB,IAAI,CAAC,SAAS,CAAC,iBAAiB,GAAG,IAAI,CAAC;gBACzC,CAAC;gBAED,4BAAO,GAAP,UAAS,KAAiB;oBACzB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;oBACrC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC1B,CAAC;gBAED,6BAAQ,GAAR,UAAU,KAAiB;oBAC1B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;oBACtC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC1B,CAAC;gBAED,0BAAK,GAAL,UAAO,KAAiB,EAAE,KAAY;oBACrC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;oBACnC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACzB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC1B,CAAC;gBAID,mCAAc,GAAd;oBACU,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAAC;wBACjC,UAAU,CAAC,kBAAkB,GAAG,IAAI,CAAC;wBACrC,OAAO,CAAC,IAAI,CAAC,0KAA0K,CAAC,CAAC;oBAC7L,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAEP,0BAAK,GAAL;oBACC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;wBAAC,MAAM,CAAC;oBAC/B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;oBAE1B,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;oBAC3B,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;oBAEzC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;wBAC5C,IAAI,IAAI,GAAG,OAAO,CAAC,CAAC,CAAc,CAAC;wBACnC,IAAI,KAAK,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAe,CAAC;wBACzC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;4BACf,KAAK,SAAS,CAAC,KAAK;gCACnB,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC;oCAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gCAChF,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE;oCAC3C,EAAE,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC;wCAAC,SAAS,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gCAEtC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;gCAC1E,IAAI,CAAC,SAAS,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;gCAClI,KAAK,CAAC;4BACP,KAAK,SAAS,CAAC,SAAS;gCACvB,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC;oCAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gCACxF,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE;oCAC3C,EAAE,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC;wCAAC,SAAS,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gCAC7D,KAAK,CAAC;4BACP,KAAK,SAAS,CAAC,GAAG;gCACjB,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC;oCAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gCAC5E,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE;oCAC3C,EAAE,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC;wCAAC,SAAS,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gCAElC,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;gCACtE,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;4BAExG,KAAK,SAAS,CAAC,OAAO;gCACrB,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;oCAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gCACpF,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE;oCAC3C,EAAE,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC;wCAAC,SAAS,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gCACzD,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gCAC1C,KAAK,CAAC;4BACP,KAAK,SAAS,CAAC,QAAQ;gCACtB,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC;oCAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gCACtF,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE;oCAC3C,EAAE,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC;wCAAC,SAAS,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gCAG5C,IAAI,KAAK,GAAG,cAAS,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAE;gCACjD,KAAK,CAAC,UAAU,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;gCACvF,IAAI,CAAC,SAAS,CAAC,UAAU,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;gCACxH,KAAK,CAAC;4BACP,KAAK,SAAS,CAAC,KAAK;gCACnB,IAAI,OAAK,GAAG,OAAO,CAAC,CAAC,EAAE,GAAG,CAAC,CAAU,CAAC;gCACtC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC;oCAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,OAAK,CAAC,CAAC;gCACvF,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE;oCAC3C,EAAE,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC;wCAAC,SAAS,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,OAAK,CAAC,CAAC;gCAE7C,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE,OAAK,CAAC,CAAC;gCACjF,IAAI,CAAC,SAAS,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE,OAAK,CAAC,CAAC;gCAClH,KAAK,CAAC;wBACP,CAAC;oBACF,CAAC;oBACD,IAAI,CAAC,KAAK,EAAE,CAAC;oBAEb,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;gBAC5B,CAAC;gBAED,0BAAK,GAAL;oBACC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;gBACzB,CAAC;gBA5EoB,6BAAkB,GAAY,KAAK,CAAC;gBA+E1D,iBAAC;YAAD,CAAC,AAzHD,IAyHC;YAzHY,eAAU,aAyHtB,CAAA;YAED,WAAY,SAAS;gBACpB,2CAAK,CAAA;gBAAE,mDAAS,CAAA;gBAAE,uCAAG,CAAA;gBAAE,+CAAO,CAAA;gBAAE,iDAAQ,CAAA;gBAAE,2CAAK,CAAA;YAChD,CAAC,EAFW,cAAS,KAAT,cAAS,QAEpB;YAFD,IAAY,SAAS,GAAT,cAEX,CAAA;YAwBD;gBAAA;gBAkBA,CAAC;gBAjBA,sCAAK,GAAL,UAAO,KAAiB;gBACxB,CAAC;gBAED,0CAAS,GAAT,UAAW,KAAiB;gBAC5B,CAAC;gBAED,oCAAG,GAAH,UAAK,KAAiB;gBACtB,CAAC;gBAED,wCAAO,GAAP,UAAS,KAAiB;gBAC1B,CAAC;gBAED,yCAAQ,GAAR,UAAU,KAAiB;gBAC3B,CAAC;gBAED,sCAAK,GAAL,UAAO,KAAiB,EAAE,KAAY;gBACtC,CAAC;gBACF,6BAAC;YAAD,CAAC,AAlBD,IAkBC;YAlBqB,2BAAsB,yBAkB3C,CAAA;QACF,CAAC,EA/zBiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QA+zBrB;IAAD,CAAC,EA/zBW,KAAK,GAAL,UAAK,KAAL,UAAK,QA+zBhB;AAAD,CAAC,EA/zBM,IAAI,KAAJ,IAAI,QA+zBV;AC9zBD,IAAO,IAAI,CA0CV;AA1CD,WAAO,IAAI;IAAC,IAAA,KAAK,CA0ChB;IA1CW,WAAA,KAAK;QAAC,IAAA,IAAI,CA0CrB;QA1CiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAKI,4BAAY,YAA0B;oBAHtC,uBAAkB,GAAgB,EAAE,CAAC;oBACrC,eAAU,GAAG,CAAC,CAAC;oBAGX,EAAE,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;oBAC1E,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;gBACrC,CAAC;gBAED,mCAAM,GAAN,UAAO,QAAgB,EAAE,MAAc,EAAE,QAAgB;oBACrD,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;oBACrD,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,QAAQ,CAAC,CAAC;oBACtE,IAAI,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;oBACjD,EAAE,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,MAAM,CAAC,CAAC;oBAClE,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC;gBACxC,CAAC;gBAID,yCAAY,GAAZ,UAAa,QAAgB,EAAE,MAAc,EAAE,QAAgB;oBAC3D,EAAE,CAAC,CAAC,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,CAAC;wBACzC,kBAAkB,CAAC,kBAAkB,GAAG,IAAI,CAAC;wBAC7C,OAAO,CAAC,IAAI,CAAC,oGAAoG,CAAC,CAAC;oBACvH,CAAC;oBACD,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;gBAC5C,CAAC;gBAED,uCAAU,GAAV,UAAW,IAAe,EAAE,EAAa,EAAE,QAAgB;oBACvD,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;oBAC1D,EAAE,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;oBACtD,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC;oBAC9B,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;gBAC5C,CAAC;gBAED,mCAAM,GAAN,UAAO,IAAe,EAAE,EAAa;oBACjC,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC;oBAC9B,IAAI,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;oBACzC,MAAM,CAAC,KAAK,KAAK,SAAS,GAAG,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;gBACzD,CAAC;gBArBc,qCAAkB,GAAY,KAAK,CAAC;gBAsBvD,yBAAC;YAAD,CAAC,AAxCD,IAwCC;YAxCY,uBAAkB,qBAwC9B,CAAA;QACL,CAAC,EA1CiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QA0CrB;IAAD,CAAC,EA1CW,KAAK,GAAL,UAAK,KAAL,UAAK,QA0ChB;AAAD,CAAC,EA1CM,IAAI,KAAJ,IAAI,QA0CV;AC1CD,IAAO,IAAI,CAoCV;AApCD,WAAO,IAAI;IAAC,IAAA,KAAK,CAoChB;IApCW,WAAA,KAAK;QAAC,IAAA,IAAI,CAoCrB;QApCiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAGI,+BAAY,KAAmB;oBAC3B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACvB,CAAC;gBAGD,mDAAmB,GAAnB,UAAoB,IAAU,EAAE,IAAY,EAAE,IAAY;oBACtD,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBACzC,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,6BAA6B,GAAG,IAAI,GAAG,uBAAuB,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC;oBACjH,IAAI,UAAU,GAAG,IAAI,qBAAgB,CAAC,IAAI,CAAC,CAAC;oBAC5C,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC;oBAC3B,MAAM,CAAC,UAAU,CAAC;gBACtB,CAAC;gBAGD,iDAAiB,GAAjB,UAAkB,IAAU,EAAE,IAAY,EAAE,IAAY;oBACpD,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBACzC,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,6BAA6B,GAAG,IAAI,GAAG,qBAAqB,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC;oBAC/G,IAAI,UAAU,GAAG,IAAI,mBAAc,CAAC,IAAI,CAAC,CAAC;oBAC1C,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC;oBAC3B,MAAM,CAAC,UAAU,CAAC;gBACtB,CAAC;gBAGD,wDAAwB,GAAxB,UAAyB,IAAU,EAAE,IAAY;oBAC7C,MAAM,CAAC,IAAI,0BAAqB,CAAC,IAAI,CAAC,CAAC;gBAC3C,CAAC;gBAGD,iDAAiB,GAAjB,UAAkB,IAAU,EAAE,IAAY;oBACtC,MAAM,CAAC,IAAI,mBAAc,CAAC,IAAI,CAAC,CAAC;gBACpC,CAAC;gBACL,4BAAC;YAAD,CAAC,AAlCD,IAkCC;YAlCY,0BAAqB,wBAkCjC,CAAA;QACL,CAAC,EApCiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QAoCrB;IAAD,CAAC,EApCW,KAAK,GAAL,UAAK,KAAL,UAAK,QAoChB;AAAD,CAAC,EApCM,IAAI,KAAJ,IAAI,QAoCV;ACpCD,IAAO,IAAI,CA8FV;AA9FD,WAAO,IAAI;IAAC,IAAA,KAAK,CA8FhB;IA9FW,WAAA,KAAK;QAAC,IAAA,IAAI,CA8FrB;QA9FiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAGI,oBAAY,IAAY;oBACpB,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;oBAC1D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACrB,CAAC;gBACL,iBAAC;YAAD,CAAC,AAPD,IAOC;YAPqB,eAAU,aAO/B,CAAA;YAED;gBAA+C,oCAAU;gBAKrD,0BAAY,IAAY;oBACpB,kBAAM,IAAI,CAAC,CAAC;oBAHhB,wBAAmB,GAAG,CAAC,CAAC;gBAIxB,CAAC;gBAED,+CAAoB,GAApB,UAAqB,IAAU,EAAE,aAAgC;oBAC7D,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,mBAAmB,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;gBACvF,CAAC;gBAOD,mDAAwB,GAAxB,UAAyB,IAAU,EAAE,KAAa,EAAE,KAAa,EAAE,aAAgC,EAAE,MAAc;oBAC/G,KAAK,IAAI,MAAM,CAAC;oBAChB,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;oBAClC,IAAI,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC;oBAC1C,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC7B,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;wBAChB,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;4BAAC,QAAQ,GAAG,WAAW,CAAC;wBACnD,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;wBACrB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;wBACpB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;wBACb,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;wBACb,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBACvC,GAAG,CAAC,CAAC,IAAI,GAAC,GAAG,KAAK,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,KAAK,EAAE,GAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;4BACxD,IAAI,EAAE,GAAG,QAAQ,CAAC,GAAC,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,GAAC,GAAG,CAAC,CAAC,CAAC;4BAC3C,aAAa,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;4BACvC,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;wBAC/C,CAAC;wBACD,MAAM,CAAC;oBACX,CAAC;oBACD,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC;oBACpB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;wBAChC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wBACjB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACX,IAAI,IAAI,CAAC,CAAC;oBACd,CAAC;oBACD,IAAI,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC;oBACnC,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;wBAC1B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;4BACnD,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;4BACnB,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;4BACnB,CAAC,IAAI,CAAC,CAAC;4BACP,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;gCACxB,IAAI,IAAI,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gCACnC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;gCACpB,IAAI,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gCACrE,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;gCAC5C,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;4BAChD,CAAC;4BACD,aAAa,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;4BACtB,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;wBAC9B,CAAC;oBACL,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,IAAI,MAAM,GAAG,WAAW,CAAC;wBACzB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;4BAClE,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;4BACnB,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;4BACnB,CAAC,IAAI,CAAC,CAAC;4BACP,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;gCAChC,IAAI,IAAI,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gCACnC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;gCACpB,IAAI,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gCACjG,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;gCAC5C,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;4BAChD,CAAC;4BACD,aAAa,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;4BACtB,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;wBAC9B,CAAC;oBACL,CAAC;gBACL,CAAC;gBAGD,sCAAW,GAAX,UAAY,gBAAkC;oBAC1C,MAAM,CAAC,IAAI,IAAI,gBAAgB,CAAC;gBACpC,CAAC;gBACL,uBAAC;YAAD,CAAC,AAnFD,CAA+C,UAAU,GAmFxD;YAnFqB,qBAAgB,mBAmFrC,CAAA;QACL,CAAC,EA9FiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QA8FrB;IAAD,CAAC,EA9FW,KAAK,GAAL,UAAK,KAAL,UAAK,QA8FhB;AAAD,CAAC,EA9FM,IAAI,KAAJ,IAAI,QA8FV;AE9FD,IAAO,IAAI,CAIV;AAJD,WAAO,IAAI;IAAC,IAAA,KAAK,CAIhB;IAJW,WAAA,KAAK;QAAC,IAAA,IAAI,CAIrB;QAJiB,WAAA,IAAI,EAAC,CAAC;YACpB,WAAY,cAAc;gBACtB,uDAAM,CAAA;gBAAE,iEAAW,CAAA;gBAAE,mDAAI,CAAA;gBAAE,+DAAU,CAAA;gBAAE,mDAAI,CAAA;YAC/C,CAAC,EAFW,mBAAc,KAAd,mBAAc,QAEzB;YAFD,IAAY,cAAc,GAAd,mBAEX,CAAA;QACL,CAAC,EAJiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QAIrB;IAAD,CAAC,EAJW,KAAK,GAAL,UAAK,KAAL,UAAK,QAIhB;AAAD,CAAC,EAJM,IAAI,KAAJ,IAAI,QAIV;ACJD,IAAO,IAAI,CAQV;AARD,WAAO,IAAI;IAAC,IAAA,KAAK,CAQhB;IARW,WAAA,KAAK;QAAC,IAAA,IAAI,CAQrB;QARiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAA2C,yCAAgB;gBAGvD,+BAAY,IAAY;oBACpB,kBAAM,IAAI,CAAC,CAAC;oBAHhB,UAAK,GAAG,IAAI,UAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAI9B,CAAC;gBACL,4BAAC;YAAD,CAAC,AAND,CAA2C,qBAAgB,GAM1D;YANY,0BAAqB,wBAMjC,CAAA;QACL,CAAC,EARiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QAQrB;IAAD,CAAC,EARW,KAAK,GAAL,UAAK,KAAL,UAAK,QAQhB;AAAD,CAAC,EARM,IAAI,KAAJ,IAAI,QAQV;ACRD,IAAO,IAAI,CAoEV;AApED,WAAO,IAAI;IAAC,IAAA,KAAK,CAoEhB;IApEW,WAAA,KAAK;QAAC,IAAA,IAAI,CAoErB;QApEiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAAoC,kCAAgB;gBAWhD,wBAAY,IAAY;oBACpB,kBAAM,IAAI,CAAC,CAAC;oBAPhB,UAAK,GAAG,IAAI,UAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAG9B,kBAAa,GAAG,KAAK,CAAC;oBACtB,cAAS,GAAG,IAAI,UAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAIlC,CAAC;gBAED,4CAAmB,GAAnB,UAAoB,IAAU,EAAE,kBAA2B;oBACvD,MAAM,CAAC,EAAE,CAAC;gBAEd,CAAC;gBAED,kCAAS,GAAT,UAAU,MAAqB,EAAE,GAAsB;oBACnD,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBAC/B,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC;oBACzB,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;wBAC1B,GAAG,GAAG,UAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;oBACjC,CAAC;oBAED,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;wBACjB,MAAM,CAAC;oBACX,CAAC;oBAED,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;oBAC7B,IAAI,CAAC,GAAI,OAAe,CAAC,IAAI,CAAC;oBAC9B,IAAI,EAAE,GAAG,MAAM,CAAC,KAAK,EAAE,EAAE,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,GAAG,MAAM,CAAC,aAAa,EAAE,EAAE,GAAG,MAAM,CAAC,cAAc,CAAC;oBACjG,IAAI,CAAC,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC;oBAE/C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;wBAC5B,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACrD,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;wBACtB,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;wBACtB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;wBACjF,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;oBACzF,CAAC;oBAED,MAAM,CAAC,GAAG,CAAC;gBACf,CAAC;gBAED,oCAAW,GAAX,UAAY,gBAAkC;oBAC1C,MAAM,CAAC,IAAI,IAAI,gBAAgB,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,UAAU,IAAI,gBAAgB,CAAC,CAAC;gBACnG,CAAC;gBAED,sCAAa,GAAb;oBACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAC3B,CAAC;gBAGD,sCAAa,GAAb,UAAc,UAA0B;oBACpC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;oBAC7B,EAAE,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC;wBACrB,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;wBAC9B,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;wBACpC,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;wBACtC,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;wBACtC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC;oBAC5C,CAAC;gBACL,CAAC;gBACL,qBAAC;YAAD,CAAC,AAlED,CAAoC,qBAAgB,GAkEnD;YAlEY,mBAAc,iBAkE1B,CAAA;QACL,CAAC,EApEiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QAoErB;IAAD,CAAC,EApEW,KAAK,GAAL,UAAK,KAAL,UAAK,QAoEhB;AAAD,CAAC,EApEM,IAAI,KAAJ,IAAI,QAoEV;ACpED,IAAO,IAAI,CAWV;AAXD,WAAO,IAAI;IAAC,IAAA,KAAK,CAWhB;IAXW,WAAA,KAAK;QAAC,IAAA,IAAI,CAWrB;QAXiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAAoC,kCAAgB;gBAMhD,wBAAY,IAAY;oBACpB,kBAAM,IAAI,CAAC,CAAC;oBALhB,WAAM,GAAG,KAAK,CAAC;oBACf,kBAAa,GAAG,KAAK,CAAC;oBACtB,UAAK,GAAG,IAAI,UAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAI9B,CAAC;gBACL,qBAAC;YAAD,CAAC,AATD,CAAoC,qBAAgB,GASnD;YATY,mBAAc,iBAS1B,CAAA;QACL,CAAC,EAXiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QAWrB;IAAD,CAAC,EAXW,KAAK,GAAL,UAAK,KAAL,UAAK,QAWhB;AAAD,CAAC,EAXM,IAAI,KAAJ,IAAI,QAWV;ACXD,IAAO,IAAI,CAuBV;AAvBD,WAAO,IAAI;IAAC,IAAA,KAAK,CAuBhB;IAvBW,WAAA,KAAK;QAAC,IAAA,IAAI,CAuBrB;QAvBiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAAsC,oCAAU;gBAa5C,0BAAY,IAAY;oBACpB,kBAAM,IAAI,CAAC,CAAC;oBAbhB,MAAC,GAAG,CAAC,CAAC;oBACN,MAAC,GAAG,CAAC,CAAC;oBACN,WAAM,GAAG,CAAC,CAAC;oBACX,WAAM,GAAG,CAAC,CAAC;oBACX,aAAQ,GAAG,CAAC,CAAC;oBACb,UAAK,GAAG,CAAC,CAAC;oBACV,WAAM,GAAG,CAAC,CAAC;oBACX,UAAK,GAAG,IAAI,UAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAO9B,CAAC;gBAED,8CAAmB,GAAnB,UAAoB,IAAU,EAAE,kBAA2B;oBACvD,MAAM,CAAC,EAAE,CAAC;gBAEd,CAAC;gBACL,uBAAC;YAAD,CAAC,AArBD,CAAsC,eAAU,GAqB/C;YArBY,qBAAgB,mBAqB5B,CAAA;QACL,CAAC,EAvBiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QAuBrB;IAAD,CAAC,EAvBW,KAAK,GAAL,UAAK,KAAL,UAAK,QAuBhB;AAAD,CAAC,EAvBM,IAAI,KAAJ,IAAI,QAuBV;ACvBD,IAAO,IAAI,CAOV;AAPD,WAAO,IAAI;IAAC,IAAA,KAAK,CAOhB;IAPW,WAAA,KAAK;QAAC,IAAA,IAAI,CAOrB;QAPiB,WAAA,IAAI,EAAC,CAAC;YACpB,WAAY,SAAS;gBACjB,6CAAM,CAAA;gBACN,iDAAQ,CAAA;gBACR,iDAAQ,CAAA;gBACR,6CAAM,CAAA;YACV,CAAC,EALW,cAAS,KAAT,cAAS,QAKpB;YALD,IAAY,SAAS,GAAT,cAKX,CAAA;QACL,CAAC,EAPiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QAOrB;IAAD,CAAC,EAPW,KAAK,GAAL,UAAK,KAAL,UAAK,QAOhB;AAAD,CAAC,EAPM,IAAI,KAAJ,IAAI,QAOV;ACPD,IAAO,IAAI,CA6SV;AA7SD,WAAO,IAAI;IAAC,IAAA,KAAK,CA6ShB;IA7SW,WAAA,KAAK;QAAC,IAAA,IAAI,CA6SrB;QA7SiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAoCI,cAAY,IAAc,EAAE,QAAkB,EAAE,MAAY;oBAjC5D,WAAM,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;oBAa3B,aAAQ,GAAG,IAAI,KAAK,EAAQ,CAAC;oBAC7B,MAAC,GAAG,CAAC,CAAC;oBACN,MAAC,GAAG,CAAC,CAAC;oBACN,aAAQ,GAAG,CAAC,CAAC;oBACb,WAAM,GAAG,CAAC,CAAC;oBACX,WAAM,GAAG,CAAC,CAAC;oBACX,WAAM,GAAG,CAAC,CAAC;oBACX,WAAM,GAAG,CAAC,CAAC;oBACX,OAAE,GAAG,CAAC,CAAC;oBACP,OAAE,GAAG,CAAC,CAAC;oBACP,cAAS,GAAG,CAAC,CAAC;oBACd,YAAO,GAAG,CAAC,CAAC;oBACZ,YAAO,GAAG,CAAC,CAAC;oBACZ,YAAO,GAAG,CAAC,CAAC;oBACZ,YAAO,GAAG,CAAC,CAAC;oBACZ,iBAAY,GAAG,KAAK,CAAC;oBAErB,WAAM,GAAG,KAAK,CAAC;oBAIX,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;oBAC1D,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAClE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;oBACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,cAAc,EAAE,CAAC;gBAC1B,CAAC;gBAtCD,sBAAI,wBAAM;yBAAV;wBACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;oBAC1B,CAAC;;;mBAAA;gBAED,sBAAI,wBAAM;yBAAV;wBACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;oBAC1B,CAAC;;;mBAAA;gBAmCD,qBAAM,GAAN;oBACI,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBACrH,CAAC;gBAGD,mCAAoB,GAApB;oBACI,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBACrH,CAAC;gBAGD,uCAAwB,GAAxB,UAAyB,CAAS,EAAE,CAAS,EAAE,QAAgB,EAAE,MAAc,EAAE,MAAc,EAAE,MAAc,EAAE,MAAc;oBAC3H,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;oBACZ,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;oBACZ,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;oBAC1B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;oBACtB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;oBACtB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;oBACtB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;oBACtB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;oBAEzB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;oBACpB,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;wBACjB,IAAI,SAAS,GAAG,QAAQ,GAAG,EAAE,GAAG,MAAM,CAAC;wBACvC,IAAI,EAAE,GAAG,cAAS,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC;wBACtD,IAAI,EAAE,GAAG,cAAS,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC;wBAC9C,IAAI,EAAE,GAAG,cAAS,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC;wBACtD,IAAI,EAAE,GAAG,cAAS,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC;wBAC9C,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;wBAC7B,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;4BACjB,CAAC,GAAG,CAAC,CAAC,CAAC;4BACP,EAAE,GAAG,CAAC,EAAE,CAAC;4BACT,EAAE,GAAG,CAAC,EAAE,CAAC;wBACb,CAAC;wBACD,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;4BAChC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACP,EAAE,GAAG,CAAC,EAAE,CAAC;4BACT,EAAE,GAAG,CAAC,EAAE,CAAC;wBACb,CAAC;wBACD,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;wBACT,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;wBACT,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;wBACT,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;wBACT,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;wBACtB,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;wBACtB,MAAM,CAAC;oBACX,CAAC;oBAED,IAAI,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC3F,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;oBAC1C,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;oBAC1C,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;wBAC9B,KAAK,kBAAa,CAAC,MAAM,EAAE,CAAC;4BACxB,IAAI,SAAS,GAAG,QAAQ,GAAG,EAAE,GAAG,MAAM,CAAC;4BACvC,IAAI,EAAE,GAAG,cAAS,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC;4BACtD,IAAI,EAAE,GAAG,cAAS,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC;4BAC9C,IAAI,EAAE,GAAG,cAAS,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC;4BACtD,IAAI,EAAE,GAAG,cAAS,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC;4BAC9C,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;4BACxB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;4BACxB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;4BACxB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;4BACxB,MAAM,CAAC;wBACX,CAAC;wBACD,KAAK,kBAAa,CAAC,eAAe,EAAE,CAAC;4BACjC,IAAI,SAAS,GAAG,QAAQ,GAAG,EAAE,GAAG,MAAM,CAAC;4BACvC,CAAC,CAAC,CAAC,GAAG,cAAS,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC;4BACnD,CAAC,CAAC,CAAC,GAAG,cAAS,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC;4BAC3C,CAAC,CAAC,CAAC,GAAG,cAAS,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC;4BACnD,CAAC,CAAC,CAAC,GAAG,cAAS,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC;4BAC3C,KAAK,CAAC;wBACV,CAAC;wBACD,KAAK,kBAAa,CAAC,sBAAsB,EAAE,CAAC;4BACxC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;4BAC1B,IAAI,GAAG,GAAG,CAAC,CAAC;4BACZ,EAAE,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;gCACb,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;gCACpC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;gCACZ,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;gCACZ,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,cAAS,CAAC,MAAM,CAAC;4BAChD,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,EAAE,GAAG,CAAC,CAAC;gCACP,EAAE,GAAG,CAAC,CAAC;gCACP,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,cAAS,CAAC,MAAM,CAAC;4BACrD,CAAC;4BACD,IAAI,EAAE,GAAG,QAAQ,GAAG,MAAM,GAAG,GAAG,CAAC;4BACjC,IAAI,EAAE,GAAG,QAAQ,GAAG,MAAM,GAAG,GAAG,GAAG,EAAE,CAAC;4BACtC,IAAI,EAAE,GAAG,cAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;4BACvC,IAAI,EAAE,GAAG,cAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;4BACvC,IAAI,EAAE,GAAG,cAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;4BACvC,IAAI,EAAE,GAAG,cAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;4BACvC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;4BACxB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;4BACxB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;4BACxB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;4BACxB,KAAK,CAAC;wBACV,CAAC;wBACD,KAAK,kBAAa,CAAC,OAAO,CAAC;wBAC3B,KAAK,kBAAa,CAAC,mBAAmB,EAAE,CAAC;4BACrC,IAAI,GAAG,GAAG,cAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;4BACrC,IAAI,GAAG,GAAG,cAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;4BACrC,IAAI,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;4BAC7B,IAAI,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;4BAC7B,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;4BACrC,EAAE,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;gCAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;4BAC3B,EAAE,IAAI,CAAC,CAAC;4BACR,EAAE,IAAI,CAAC,CAAC;4BACR,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;4BACjC,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4BACzC,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;4BACzB,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;4BACzB,IAAI,EAAE,GAAG,cAAS,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC;4BAC3C,IAAI,EAAE,GAAG,cAAS,CAAC,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC;4BAChD,IAAI,EAAE,GAAG,cAAS,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC;4BAC3C,IAAI,EAAE,GAAG,cAAS,CAAC,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC;4BAChD,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;4BACxB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;4BACxB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;4BACxB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;4BACxB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,kBAAa,CAAC,mBAAmB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gCACtJ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gCACX,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;4BACf,CAAC;4BACD,MAAM,CAAC;wBACX,CAAC;oBACL,CAAC;oBACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;wBACtB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;wBACX,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBACf,CAAC;oBACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;wBACpC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;wBACX,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBACf,CAAC;gBACL,CAAC;gBAED,6BAAc,GAAd;oBACI,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;oBACrB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;oBAChB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;oBAChB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC9B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC9B,CAAC;gBAED,gCAAiB,GAAjB;oBACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,cAAS,CAAC,MAAM,CAAC;gBACvE,CAAC;gBAED,gCAAiB,GAAjB;oBACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,cAAS,CAAC,MAAM,CAAC;gBACvE,CAAC;gBAED,6BAAc,GAAd;oBACI,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;oBACpB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5C,CAAC;gBAED,6BAAc,GAAd;oBACI,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;oBACpB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5C,CAAC;gBAED,oCAAqB,GAArB;oBACI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC;wBAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;oBAC1C,IAAI,EAAE,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;oBACxC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,cAAS,CAAC,MAAM,CAAC;gBAC3F,CAAC;gBAED,oCAAqB,GAArB;oBACI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC;wBAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;oBAC1C,IAAI,EAAE,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;oBACxC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,cAAS,CAAC,MAAM,CAAC;gBAC3F,CAAC;gBAED,0BAAW,GAAX,UAAY,OAAe;oBACvB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;oBACpB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACjD,IAAI,GAAG,GAAG,cAAS,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,GAAG,GAAG,cAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;oBACrE,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;oBACxB,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;oBACxB,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;oBACxB,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;oBACxB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;gBAC9B,CAAC;gBAMD,qCAAsB,GAAtB;oBACI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;oBACzB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;oBACpB,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;wBACjB,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC;wBACf,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC;wBACf,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,cAAS,CAAC,MAAM,CAAC;wBACzD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;wBAChD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;wBAChD,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;wBACjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,cAAS,CAAC,MAAM,CAAC;wBAC3F,MAAM,CAAC;oBACX,CAAC;oBACD,IAAI,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC;oBACvB,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;oBAC1C,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;oBACzC,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;oBAC9C,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;oBAC9C,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;oBACpB,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;oBACpB,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;oBACpB,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;oBACpB,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC7B,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC7B,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC7B,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC7B,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;oBACjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;oBAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC;wBACxB,IAAI,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;wBAC5B,IAAI,CAAC,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;wBAClC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,CAAC,GAAG,cAAS,CAAC,MAAM,CAAC;wBACrE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,cAAS,CAAC,MAAM,CAAC;oBAC3D,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;wBACjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;wBAC5C,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;wBACjB,IAAI,CAAC,SAAS,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,cAAS,CAAC,MAAM,CAAC;oBAChE,CAAC;gBACL,CAAC;gBAED,2BAAY,GAAZ,UAAa,KAAc;oBACvB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;oBACpB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACvC,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;oBACjC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;oBAC3C,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;oBAC5C,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;oBAC5C,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED,2BAAY,GAAZ,UAAa,KAAc;oBACvB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;oBACpB,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;oBAC7B,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;oBACnC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;oBACnC,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAzSM,UAAK,GAAY,KAAK,CAAC;gBA0SlC,WAAC;YAAD,CAAC,AA3SD,IA2SC;YA3SY,SAAI,OA2ShB,CAAA;QACL,CAAC,EA7SiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QA6SrB;IAAD,CAAC,EA7SW,KAAK,GAAL,UAAK,KAAL,UAAK,QA6ShB;AAAD,CAAC,EA7SM,IAAI,KAAJ,IAAI,QA6SV;AC7SD,IAAO,IAAI,CA2BV;AA3BD,WAAO,IAAI;IAAC,IAAA,KAAK,CA2BhB;IA3BW,WAAA,KAAK;QAAC,IAAA,IAAI,CA2BrB;QA3BiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAcI,kBAAY,KAAa,EAAE,IAAY,EAAE,MAAgB;oBATzD,MAAC,GAAG,CAAC,CAAC;oBACN,MAAC,GAAG,CAAC,CAAC;oBACN,aAAQ,GAAG,CAAC,CAAC;oBACb,WAAM,GAAG,CAAC,CAAC;oBACX,WAAM,GAAG,CAAC,CAAC;oBACX,WAAM,GAAG,CAAC,CAAC;oBACX,WAAM,GAAG,CAAC,CAAC;oBACX,kBAAa,GAAG,aAAa,CAAC,MAAM,CAAC;oBAGjC,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;oBACtD,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;oBAC1D,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACzB,CAAC;gBACL,eAAC;YAAD,CAAC,AArBD,IAqBC;YArBY,aAAQ,WAqBpB,CAAA;YAED,WAAY,aAAa;gBACrB,qDAAM,CAAA;gBAAE,uEAAe,CAAA;gBAAE,qFAAsB,CAAA;gBAAE,uDAAO,CAAA;gBAAE,+EAAmB,CAAA;YACjF,CAAC,EAFW,kBAAa,KAAb,kBAAa,QAExB;YAFD,IAAY,aAAa,GAAb,kBAEX,CAAA;QACL,CAAC,EA3BiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QA2BrB;IAAD,CAAC,EA3BW,KAAK,GAAL,UAAK,KAAL,UAAK,QA2BhB;AAAD,CAAC,EA3BM,IAAI,KAAJ,IAAI,QA2BV;AE3BD,IAAO,IAAI,CAcV;AAdD,WAAO,IAAI;IAAC,IAAA,KAAK,CAchB;IAdW,WAAA,KAAK;QAAC,IAAA,IAAI,CAcrB;QAdiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAOI,eAAY,IAAY,EAAE,IAAe;oBACrC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;oBAC1D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACrB,CAAC;gBACL,YAAC;YAAD,CAAC,AAZD,IAYC;YAZY,UAAK,QAYjB,CAAA;QACL,CAAC,EAdiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QAcrB;IAAD,CAAC,EAdW,KAAK,GAAL,UAAK,KAAL,UAAK,QAchB;AAAD,CAAC,EAdM,IAAI,KAAJ,IAAI,QAcV;ACdD,IAAO,IAAI,CAWV;AAXD,WAAO,IAAI;IAAC,IAAA,KAAK,CAWhB;IAXW,WAAA,KAAK;QAAC,IAAA,IAAI,CAWrB;QAXiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAMI,mBAAa,IAAY;oBACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACrB,CAAC;gBACL,gBAAC;YAAD,CAAC,AATD,IASC;YATY,cAAS,YASrB,CAAA;QACL,CAAC,EAXiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QAWrB;IAAD,CAAC,EAXW,KAAK,GAAL,UAAK,KAAL,UAAK,QAWhB;AAAD,CAAC,EAXM,IAAI,KAAJ,IAAI,QAWV;ACXD,IAAO,IAAI,CAyMV;AAzMD,WAAO,IAAI;IAAC,IAAA,KAAK,CAyMhB;IAzMW,WAAA,KAAK;QAAC,IAAA,IAAI,CAyMrB;QAzMiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBASI,sBAAY,IAAsB,EAAE,QAAkB;oBALtD,QAAG,GAAG,CAAC,CAAC;oBACR,kBAAa,GAAG,CAAC,CAAC;oBAElB,UAAK,GAAG,CAAC,CAAC;oBAGN,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;oBAC1D,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAClE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;oBACpB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;oBAExC,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAQ,CAAC;oBAC/B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;wBACtC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC3D,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACtD,CAAC;gBAED,+BAAQ,GAAR;oBACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;gBAC3B,CAAC;gBAED,4BAAK,GAAL;oBACI,IAAI,CAAC,MAAM,EAAE,CAAC;gBAClB,CAAC;gBAED,6BAAM,GAAN;oBACI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,MAAM,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;wBACnB,KAAK,CAAC;4BACF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;4BAC9D,KAAK,CAAC;wBACV,KAAK,CAAC;4BACF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;4BAC5F,KAAK,CAAC;oBACd,CAAC;gBACL,CAAC;gBAID,6BAAM,GAAN,UAAO,IAAU,EAAE,OAAe,EAAE,OAAe,EAAE,KAAa;oBAC9D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC;wBAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBACtD,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;oBAC5B,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;oBACzC,IAAI,CAAC,GAAG,OAAO,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,OAAO,GAAG,EAAE,CAAC,EAAE,CAAC;oBAC7C,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;oBACzF,IAAI,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,cAAS,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC;oBACvF,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;wBAAC,UAAU,IAAI,GAAG,CAAC;oBACxC,EAAE,CAAC,CAAC,UAAU,GAAG,GAAG,CAAC;wBACjB,UAAU,IAAI,GAAG,CAAC;oBACtB,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,GAAG,CAAC,GAAG,CAAC;wBAAC,UAAU,IAAI,GAAG,CAAC;oBAC9C,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,GAAG,UAAU,GAAG,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EACzH,IAAI,CAAC,OAAO,CAAC,CAAC;gBACtB,CAAC;gBAKD,6BAAM,GAAN,UAAO,MAAY,EAAE,KAAW,EAAE,OAAe,EAAE,OAAe,EAAE,OAAe,EAAE,KAAa;oBAC9F,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;wBACb,KAAK,CAAC,oBAAoB,EAAE,CAAC;wBAC7B,MAAM,CAAC;oBACX,CAAC;oBACD,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC;wBAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC;oBAC1D,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC;wBAAC,KAAK,CAAC,sBAAsB,EAAE,CAAC;oBACxD,IAAI,EAAE,GAAG,MAAM,CAAC,EAAE,EAAE,EAAE,GAAG,MAAM,CAAC,EAAE,EAAE,GAAG,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC;oBAEpG,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;oBAC7B,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;wBACV,GAAG,GAAG,CAAC,GAAG,CAAC;wBACX,GAAG,GAAG,GAAG,CAAC;wBACV,EAAE,GAAG,CAAC,CAAC,CAAC;oBACZ,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,GAAG,GAAG,CAAC,CAAC;wBACR,EAAE,GAAG,CAAC,CAAC;oBACX,CAAC;oBACD,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;wBACV,GAAG,GAAG,CAAC,GAAG,CAAC;wBACX,EAAE,GAAG,CAAC,EAAE,CAAC;oBACb,CAAC;oBACD,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;wBACV,GAAG,GAAG,CAAC,GAAG,CAAC;wBACX,GAAG,GAAG,GAAG,CAAC;oBACd,CAAC;oBAAC,IAAI;wBACF,GAAG,GAAG,CAAC,CAAC;oBACZ,IAAI,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC;oBACvB,IAAI,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;oBACpF,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,MAAM,CAAC;oBACtC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACL,EAAE,GAAG,CAAC,CAAC;wBACP,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;wBACrB,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;oBACzB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC;wBACd,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;wBAC9B,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;oBAClC,CAAC;oBACD,IAAI,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC;oBACvB,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;oBAC/B,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;oBACV,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;oBACV,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;oBACV,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;oBACV,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,OAAO,GAAG,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,OAAO,GAAG,GAAG,CAAC,EAAE,CAAC;oBACzE,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;oBACnE,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC;oBACjB,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC;oBACjB,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;oBACnE,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;oBACpF,KAAK,EACD,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACJ,EAAE,IAAI,GAAG,CAAC;wBACV,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;wBAClE,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;4BACT,GAAG,GAAG,CAAC,CAAC,CAAC;wBACb,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;4BAAC,GAAG,GAAG,CAAC,CAAC;wBAC1B,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;wBAC9B,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;wBAClB,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;wBACtB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;oBACtD,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;wBACb,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;wBACb,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;wBAC5E,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;wBACrC,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;wBACpC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;wBACzB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BACT,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BACrB,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;gCAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACnB,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;4BAClB,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;4BAC5B,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;4BAC9C,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gCACd,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;gCACpC,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gCAC3B,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC;gCACzC,KAAK,CAAC,KAAK,CAAC;4BAChB,CAAC;wBACL,CAAC;wBACD,IAAI,QAAQ,GAAG,CAAC,EAAE,OAAO,GAAG,MAAM,CAAC,SAAS,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC;wBACjE,IAAI,QAAQ,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC;wBAClD,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;wBACX,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;wBACV,EAAE,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;4BACd,QAAQ,GAAG,CAAC,CAAC;4BACb,OAAO,GAAG,CAAC,CAAC;4BACZ,IAAI,GAAG,CAAC,CAAC;wBACb,CAAC;wBACD,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;wBACX,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;wBACV,EAAE,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;4BACd,QAAQ,GAAG,cAAS,CAAC,EAAE,CAAC;4BACxB,OAAO,GAAG,CAAC,CAAC;4BACZ,IAAI,GAAG,CAAC,CAAC;wBACb,CAAC;wBACD,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;wBAC3C,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;wBAC7B,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;wBACxB,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;wBAClB,EAAE,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;4BACd,QAAQ,GAAG,KAAK,CAAC;4BACjB,OAAO,GAAG,CAAC,CAAC;4BACZ,IAAI,GAAG,CAAC,CAAC;4BACT,IAAI,GAAG,CAAC,CAAC;wBACb,CAAC;wBACD,EAAE,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;4BACd,QAAQ,GAAG,KAAK,CAAC;4BACjB,OAAO,GAAG,CAAC,CAAC;4BACZ,IAAI,GAAG,CAAC,CAAC;4BACT,IAAI,GAAG,CAAC,CAAC;wBACb,CAAC;wBACD,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,OAAO,EAAE,IAAI,CAAC,CAAC;4BAC3C,EAAE,GAAG,QAAQ,GAAG,OAAO,CAAC;wBAC5B,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,OAAO,EAAE,IAAI,CAAC,CAAC;4BAC3C,EAAE,GAAG,QAAQ,GAAG,OAAO,CAAC;wBAC5B,CAAC;oBACL,CAAC;oBACL,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;oBACjC,IAAI,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC;oBAChC,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,cAAS,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ,CAAC;oBACnD,EAAE,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC;wBACT,EAAE,IAAI,GAAG,CAAC;oBACd,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC;wBAAC,EAAE,IAAI,GAAG,CAAC;oBAC9B,MAAM,CAAC,wBAAwB,CAAC,EAAE,EAAE,EAAE,EAAE,QAAQ,GAAG,EAAE,GAAG,KAAK,EAAE,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBACrG,QAAQ,GAAG,KAAK,CAAC,SAAS,CAAC;oBAC3B,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,cAAS,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,QAAQ,CAAC;oBAC1E,EAAE,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC;wBACT,EAAE,IAAI,GAAG,CAAC;oBACd,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC;wBAAC,EAAE,IAAI,GAAG,CAAC;oBAC9B,KAAK,CAAC,wBAAwB,CAAC,EAAE,EAAE,EAAE,EAAE,QAAQ,GAAG,EAAE,GAAG,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;gBAC9H,CAAC;gBACL,mBAAC;YAAD,CAAC,AAvMD,IAuMC;YAvMY,iBAAY,eAuMxB,CAAA;QACL,CAAC,EAzMiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QAyMrB;IAAD,CAAC,EAzMW,KAAK,GAAL,UAAK,KAAL,UAAK,QAyMhB;AAAD,CAAC,EAzMM,IAAI,KAAJ,IAAI,QAyMV;ACzMD,IAAO,IAAI,CAaV;AAbD,WAAO,IAAI;IAAC,IAAA,KAAK,CAahB;IAbW,WAAA,KAAK;QAAC,IAAA,IAAI,CAarB;QAbiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAQI,0BAAY,IAAY;oBANxB,UAAK,GAAG,CAAC,CAAC;oBACV,UAAK,GAAG,IAAI,KAAK,EAAY,CAAC;oBAE9B,kBAAa,GAAG,CAAC,CAAC;oBAClB,QAAG,GAAG,CAAC,CAAC;oBAGJ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACrB,CAAC;gBACL,uBAAC;YAAD,CAAC,AAXD,IAWC;YAXY,qBAAgB,mBAW5B,CAAA;QACL,CAAC,EAbiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QAarB;IAAD,CAAC,EAbW,KAAK,GAAL,UAAK,KAAL,UAAK,QAahB;AAAD,CAAC,EAbM,IAAI,KAAJ,IAAI,QAaV;ACbD,IAAO,IAAI,CA0XV;AA1XD,WAAO,IAAI;IAAC,IAAA,KAAK,CA0XhB;IA1XW,WAAA,KAAK;QAAC,IAAA,IAAI,CA0XrB;QA1XiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAoBI,wBAAY,IAAwB,EAAE,QAAkB;oBAZxD,aAAQ,GAAG,CAAC,CAAC;oBACb,YAAO,GAAG,CAAC,CAAC;oBACZ,cAAS,GAAG,CAAC,CAAC;oBACd,iBAAY,GAAG,CAAC,CAAC;oBAEjB,WAAM,GAAG,IAAI,KAAK,EAAU,CAAC;oBAC7B,cAAS,GAAG,IAAI,KAAK,EAAU,CAAC;oBAChC,UAAK,GAAG,IAAI,KAAK,EAAU,CAAC;oBAC5B,WAAM,GAAG,IAAI,KAAK,EAAU,CAAC;oBAC7B,YAAO,GAAG,IAAI,KAAK,EAAU,CAAC;oBAC9B,aAAQ,GAAG,IAAI,KAAK,EAAU,CAAC;oBAG3B,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;oBAC1D,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAClE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAQ,CAAC;oBAC/B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBAC7C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC3D,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBAClD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC9B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;oBAC5B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBAChC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;gBAC1C,CAAC;gBAED,8BAAK,GAAL;oBACI,IAAI,CAAC,MAAM,EAAE,CAAC;gBAClB,CAAC;gBAED,+BAAM,GAAN;oBACI,IAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;oBAC7C,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,YAAY,mBAAc,CAAC,CAAC;wBAAC,MAAM,CAAC;oBAEpD,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;oBACjE,IAAI,SAAS,GAAG,YAAY,GAAG,CAAC,EAAE,MAAM,GAAG,SAAS,GAAG,CAAC,CAAC;oBACzD,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC;wBAAC,MAAM,CAAC;oBAElC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;oBACrB,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;oBACnC,IAAI,aAAa,GAAG,WAAW,IAAI,gBAAW,CAAC,MAAM,CAAC;oBACtD,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;oBACjC,IAAI,QAAQ,GAAG,UAAU,IAAI,eAAU,CAAC,OAAO,EAAE,KAAK,GAAG,UAAU,IAAI,eAAU,CAAC,UAAU,CAAC;oBAC7F,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,WAAW,GAAG,QAAQ,GAAG,SAAS,GAAG,SAAS,GAAG,CAAC,CAAC;oBACtF,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,IAAI,MAAM,GAAG,UAAK,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,EAAE,OAAO,GAAkB,IAAI,CAAC;oBACzF,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;oBAC3B,EAAE,CAAC,CAAC,KAAK,IAAI,aAAa,CAAC,CAAC,CAAC;wBACzB,EAAE,CAAC,CAAC,KAAK,CAAC;4BAAC,OAAO,GAAG,UAAK,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;wBACjE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC;4BAC1C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;4BACpB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;4BACpB,IAAI,QAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,QAAM,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,QAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAClE,QAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;4BAClC,EAAE,CAAC,CAAC,KAAK,CAAC;gCAAC,OAAO,CAAC,CAAC,CAAC,GAAG,QAAM,CAAC;4BAC/B,MAAM,CAAC,EAAE,CAAC,CAAC,GAAG,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,QAAM,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC;wBAC1E,CAAC;oBACL,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE;4BAChC,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;oBAC5B,CAAC;oBAED,IAAI,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAiB,UAAU,EAAE,WAAW,EAAE,QAAQ,EACxF,IAAI,CAAC,YAAY,IAAI,iBAAY,CAAC,OAAO,EAAE,WAAW,IAAI,gBAAW,CAAC,OAAO,CAAC,CAAC;oBACnF,IAAI,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;oBACrF,IAAI,GAAG,GAAG,KAAK,CAAC;oBAChB,EAAE,CAAC,CAAC,cAAc,IAAI,CAAC,CAAC;wBACpB,GAAG,GAAG,UAAU,IAAI,eAAU,CAAC,KAAK,CAAC;oBACzC,IAAI,CAAC,CAAC;wBACF,GAAG,GAAG,KAAK,CAAC;wBACZ,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;wBACjC,cAAc,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,cAAS,CAAC,MAAM,GAAG,CAAC,cAAS,CAAC,MAAM,CAAC;oBAC3F,CAAC;oBACD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;wBAChD,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wBACpB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;wBACpB,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC;wBACtC,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC;wBACtC,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,KAAK,EAAE,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;wBAC3E,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACR,IAAI,QAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;4BACxB,EAAE,CAAC,CAAC,QAAM,IAAI,CAAC,CAAC,CAAC,CAAC;gCACd,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,QAAM,GAAG,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,CAAC;gCACpE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;gCACT,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;4BACb,CAAC;wBACL,CAAC;wBACD,KAAK,GAAG,CAAC,CAAC;wBACV,KAAK,GAAG,CAAC,CAAC;wBACV,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;4BACT,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;4BAChE,EAAE,CAAC,CAAC,QAAQ,CAAC;gCACT,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACzB,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;gCACxB,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACzB,IAAI;gCACA,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4BAC3B,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;4BACtB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gCACN,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gCAClB,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gCAClB,IAAI,QAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;gCAC9B,KAAK,IAAI,CAAC,QAAM,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC;gCACzD,KAAK,IAAI,CAAC,QAAM,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC;4BAC7D,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,CAAC,IAAI,cAAc,CAAC;4BACxB,CAAC;4BACD,EAAE,CAAC,CAAC,CAAC,GAAG,cAAS,CAAC,EAAE,CAAC;gCACjB,CAAC,IAAI,cAAS,CAAC,GAAG,CAAC;4BACvB,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,cAAS,CAAC,EAAE,CAAC;gCACvB,CAAC,IAAI,cAAS,CAAC,GAAG,CAAC;4BACvB,CAAC,IAAI,SAAS,CAAC;4BACf,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BAClB,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BAClB,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;4BACxB,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;4BACxB,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;4BACxB,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;wBAC5B,CAAC;wBACD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;oBAC9B,CAAC;gBACL,CAAC;gBAED,8CAAqB,GAArB,UAAsB,IAAoB,EAAE,WAAmB,EAAE,QAAiB,EAAE,eAAwB,EACtF,cAAuB;oBACzC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC7B,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,UAAK,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,GAAkB,IAAI,CAAC;oBACrH,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,IAAI,cAAc,GAAG,IAAI,CAAC,mBAAmB,EAAE,UAAU,GAAG,cAAc,GAAG,CAAC,EAAE,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC;oBAEhH,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;wBACtB,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;wBAC3B,UAAU,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;wBAC7B,IAAI,YAAU,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;wBACrC,EAAE,CAAC,CAAC,eAAe,CAAC;4BAAC,QAAQ,IAAI,YAAU,CAAC;wBAC5C,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;4BACjB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE;gCAChC,MAAM,CAAC,CAAC,CAAC,IAAI,YAAU,CAAC;wBAChC,CAAC;wBACD,KAAK,GAAG,UAAK,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;wBAC1C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;4BAC7D,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;4BACtB,QAAQ,IAAI,KAAK,CAAC;4BAClB,IAAI,CAAC,GAAG,QAAQ,CAAC;4BAEjB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gCACT,CAAC,IAAI,YAAU,CAAC;gCAChB,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;oCAAC,CAAC,IAAI,YAAU,CAAC;gCAC3B,KAAK,GAAG,CAAC,CAAC;4BACd,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gCACf,EAAE,CAAC,CAAC,SAAS,IAAI,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;oCACrC,SAAS,GAAG,cAAc,CAAC,MAAM,CAAC;oCAClC,IAAI,CAAC,wBAAwB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;gCAC1D,CAAC;gCACD,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;gCAC5C,QAAQ,CAAC;4BACb,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,YAAU,CAAC,CAAC,CAAC;gCACxB,EAAE,CAAC,CAAC,SAAS,IAAI,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;oCACpC,SAAS,GAAG,cAAc,CAAC,KAAK,CAAC;oCACjC,IAAI,CAAC,wBAAwB,CAAC,MAAM,EAAE,cAAc,GAAG,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;gCAC3E,CAAC;gCACD,IAAI,CAAC,gBAAgB,CAAC,CAAC,GAAG,YAAU,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;gCACxD,QAAQ,CAAC;4BACb,CAAC;4BAGD,GAAG,CAAC,CAAC,GAAI,KAAK,EAAE,EAAE,CAAC;gCACf,IAAI,QAAM,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;gCAC5B,EAAE,CAAC,CAAC,CAAC,GAAG,QAAM,CAAC;oCAAC,QAAQ,CAAC;gCACzB,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;oCACX,CAAC,IAAI,QAAM,CAAC;gCAChB,IAAI,CAAC,CAAC;oCACF,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;oCAC9B,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAM,GAAG,IAAI,CAAC,CAAC;gCACrC,CAAC;gCACD,KAAK,CAAC;4BACV,CAAC;4BACD,EAAE,CAAC,CAAC,KAAK,IAAI,SAAS,CAAC,CAAC,CAAC;gCACrB,SAAS,GAAG,KAAK,CAAC;gCAClB,EAAE,CAAC,CAAC,MAAM,IAAI,KAAK,IAAI,UAAU,CAAC,CAAC,CAAC;oCAChC,IAAI,CAAC,wBAAwB,CAAC,MAAM,EAAE,cAAc,GAAG,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;oCACvE,IAAI,CAAC,wBAAwB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;gCAC1D,CAAC;gCAAC,IAAI;oCACF,IAAI,CAAC,wBAAwB,CAAC,MAAM,EAAE,KAAK,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;4BAC1E,CAAC;4BACD,IAAI,CAAC,gBAAgB,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAC3G,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;wBAC3C,CAAC;wBACD,MAAM,CAAC,GAAG,CAAC;oBACf,CAAC;oBAGD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;wBACT,cAAc,IAAI,CAAC,CAAC;wBACpB,KAAK,GAAG,UAAK,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;wBACvD,IAAI,CAAC,wBAAwB,CAAC,MAAM,EAAE,CAAC,EAAE,cAAc,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;wBACvE,IAAI,CAAC,wBAAwB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,cAAc,GAAG,CAAC,CAAC,CAAC;wBACvE,KAAK,CAAC,cAAc,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wBACrC,KAAK,CAAC,cAAc,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACzC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,UAAU,EAAE,CAAC;wBACb,cAAc,IAAI,CAAC,CAAC;wBACpB,KAAK,GAAG,UAAK,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;wBACvD,IAAI,CAAC,wBAAwB,CAAC,MAAM,EAAE,CAAC,EAAE,cAAc,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;oBACvE,CAAC;oBAGD,IAAI,MAAM,GAAG,UAAK,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;oBACzD,IAAI,UAAU,GAAG,CAAC,CAAC;oBACnB,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;oBACrF,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;oBACnF,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;wBACjD,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wBACf,GAAG,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACnB,GAAG,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACnB,GAAG,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACnB,EAAE,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBAClB,EAAE,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBAClB,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,MAAM,CAAC;wBACrC,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,MAAM,CAAC;wBACrC,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,OAAO,CAAC;wBAC9C,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,OAAO,CAAC;wBAC9C,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC;wBACxB,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC;wBACxB,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG,UAAU,CAAC;wBACpD,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG,UAAU,CAAC;wBACpD,UAAU,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;wBAC/C,GAAG,IAAI,IAAI,CAAC;wBACZ,GAAG,IAAI,IAAI,CAAC;wBACZ,IAAI,IAAI,KAAK,CAAC;wBACd,IAAI,IAAI,KAAK,CAAC;wBACd,UAAU,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;wBAC/C,GAAG,IAAI,IAAI,CAAC;wBACZ,GAAG,IAAI,IAAI,CAAC;wBACZ,UAAU,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;wBAC/C,GAAG,IAAI,IAAI,GAAG,KAAK,CAAC;wBACpB,GAAG,IAAI,IAAI,GAAG,KAAK,CAAC;wBACpB,UAAU,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;wBAC/C,MAAM,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;wBACvB,EAAE,GAAG,EAAE,CAAC;wBACR,EAAE,GAAG,EAAE,CAAC;oBACZ,CAAC;oBACD,EAAE,CAAC,CAAC,eAAe,CAAC;wBAAC,QAAQ,IAAI,UAAU,CAAC;oBAC5C,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;wBACjB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE;4BAChC,MAAM,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC;oBAChC,CAAC;oBAED,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC7B,IAAI,WAAW,GAAG,CAAC,CAAC;oBACpB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;wBAC1E,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBACtB,QAAQ,IAAI,KAAK,CAAC;wBAClB,IAAI,CAAC,GAAG,QAAQ,CAAC;wBAEjB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;4BACT,CAAC,IAAI,UAAU,CAAC;4BAChB,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gCAAC,CAAC,IAAI,UAAU,CAAC;4BAC3B,KAAK,GAAG,CAAC,CAAC;wBACd,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BACf,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;4BAC5C,QAAQ,CAAC;wBACb,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;4BACxB,IAAI,CAAC,gBAAgB,CAAC,CAAC,GAAG,UAAU,EAAE,KAAK,EAAE,cAAc,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;4BACzE,QAAQ,CAAC;wBACb,CAAC;wBAGD,GAAG,CAAC,CAAC,GAAI,KAAK,EAAE,EAAE,CAAC;4BACf,IAAI,QAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;4BAC3B,EAAE,CAAC,CAAC,CAAC,GAAG,QAAM,CAAC;gCAAC,QAAQ,CAAC;4BACzB,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;gCACX,CAAC,IAAI,QAAM,CAAC;4BAChB,IAAI,CAAC,CAAC;gCACF,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gCAC7B,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAM,GAAG,IAAI,CAAC,CAAC;4BACrC,CAAC;4BACD,KAAK,CAAC;wBACV,CAAC;wBAGD,EAAE,CAAC,CAAC,KAAK,IAAI,SAAS,CAAC,CAAC,CAAC;4BACrB,SAAS,GAAG,KAAK,CAAC;4BAClB,IAAI,EAAE,GAAG,KAAK,GAAG,CAAC,CAAC;4BACnB,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC;4BACf,EAAE,GAAG,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;4BACnB,GAAG,GAAG,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;4BACpB,GAAG,GAAG,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;4BACpB,GAAG,GAAG,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;4BACpB,GAAG,GAAG,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;4BACpB,EAAE,GAAG,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;4BACnB,EAAE,GAAG,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;4BACnB,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC;4BACnC,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC;4BACnC,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;4BAC5C,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;4BAC5C,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC;4BACxB,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC;4BACxB,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,GAAG,IAAI,GAAG,KAAK,GAAG,UAAU,CAAC;4BACnD,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,GAAG,IAAI,GAAG,KAAK,GAAG,UAAU,CAAC;4BACnD,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;4BAC/C,QAAQ,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC;4BAC1B,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;gCACxB,GAAG,IAAI,IAAI,CAAC;gCACZ,GAAG,IAAI,IAAI,CAAC;gCACZ,IAAI,IAAI,KAAK,CAAC;gCACd,IAAI,IAAI,KAAK,CAAC;gCACd,WAAW,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;gCAChD,QAAQ,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC;4BAC/B,CAAC;4BACD,GAAG,IAAI,IAAI,CAAC;4BACZ,GAAG,IAAI,IAAI,CAAC;4BACZ,WAAW,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;4BAChD,QAAQ,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC;4BAC1B,GAAG,IAAI,IAAI,GAAG,KAAK,CAAC;4BACpB,GAAG,IAAI,IAAI,GAAG,KAAK,CAAC;4BACpB,WAAW,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;4BAChD,QAAQ,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC;4BAC1B,OAAO,GAAG,CAAC,CAAC;wBAChB,CAAC;wBAGD,CAAC,IAAI,WAAW,CAAC;wBACjB,GAAG,CAAC,CAAC,GAAI,OAAO,EAAE,EAAE,CAAC;4BACjB,IAAI,QAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;4BAC/B,EAAE,CAAC,CAAC,CAAC,GAAG,QAAM,CAAC;gCAAC,QAAQ,CAAC;4BACzB,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC;gCACb,CAAC,IAAI,QAAM,CAAC;4BAChB,IAAI,CAAC,CAAC;gCACF,IAAI,IAAI,GAAG,QAAQ,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;gCACjC,CAAC,GAAG,OAAO,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAM,GAAG,IAAI,CAAC,CAAC;4BAC/C,CAAC;4BACD,KAAK,CAAC;wBACV,CAAC;wBACD,IAAI,CAAC,gBAAgB,CAAC,CAAC,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;oBAClH,CAAC;oBACD,MAAM,CAAC,GAAG,CAAC;gBACf,CAAC;gBAED,0CAAiB,GAAjB,UAAkB,CAAS,EAAE,IAAmB,EAAE,CAAS,EAAE,GAAkB,EAAE,CAAS;oBACtF,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;oBACzG,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC9B,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAClC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;gBACnB,CAAC;gBAED,yCAAgB,GAAhB,UAAiB,CAAS,EAAE,IAAmB,EAAE,CAAS,EAAE,GAAkB,EAAE,CAAS;oBACrF,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;oBACzG,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC9B,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAClC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;gBACnB,CAAC;gBAED,yCAAgB,GAAhB,UAAiB,CAAS,EAAE,EAAU,EAAE,EAAU,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,EAAU,EAAE,EAAU,EAC7G,GAAkB,EAAE,CAAS,EAAE,QAAiB;oBAC7D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;wBAAC,CAAC,GAAG,MAAM,CAAC;oBACnC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;oBAClE,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,GAAG,GAAG,EAAE,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;oBAC7D,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,EAAE,GAAG,GAAG,CAAC;oBACzG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;oBACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;oBACf,EAAE,CAAC,CAAC,QAAQ,CAAC;wBAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC5H,CAAC;gBAED,iCAAQ,GAAR;oBACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;gBAC3B,CAAC;gBAtXM,mBAAI,GAAG,CAAC,CAAC,CAAC;gBACV,qBAAM,GAAG,CAAC,CAAC,CAAC;gBACZ,oBAAK,GAAG,CAAC,CAAC,CAAC;gBAqXtB,qBAAC;YAAD,CAAC,AAxXD,IAwXC;YAxXY,mBAAc,iBAwX1B,CAAA;QACL,CAAC,EA1XiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QA0XrB;IAAD,CAAC,EA1XW,KAAK,GAAL,UAAK,KAAL,UAAK,QA0XhB;AAAD,CAAC,EA1XM,IAAI,KAAJ,IAAI,QA0XV;AC1XD,IAAO,IAAI,CA+BV;AA/BD,WAAO,IAAI;IAAC,IAAA,KAAK,CA+BhB;IA/BW,WAAA,KAAK;QAAC,IAAA,IAAI,CA+BrB;QA/BiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAcI,4BAAY,IAAY;oBAZxB,UAAK,GAAG,CAAC,CAAC;oBACV,UAAK,GAAG,IAAI,KAAK,EAAY,CAAC;oBAY1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACrB,CAAC;gBACL,yBAAC;YAAD,CAAC,AAjBD,IAiBC;YAjBY,uBAAkB,qBAiB9B,CAAA;YAED,WAAY,YAAY;gBACpB,iDAAK,CAAA;gBAAE,qDAAO,CAAA;YAClB,CAAC,EAFW,iBAAY,KAAZ,iBAAY,QAEvB;YAFD,IAAY,YAAY,GAAZ,iBAEX,CAAA;YAED,WAAY,WAAW;gBACnB,iDAAM,CAAA;gBAAE,+CAAK,CAAA;gBAAE,mDAAO,CAAA;YAC1B,CAAC,EAFW,gBAAW,KAAX,gBAAW,QAEtB;YAFD,IAAY,WAAW,GAAX,gBAEX,CAAA;YAED,WAAY,UAAU;gBAClB,iDAAO,CAAA;gBAAE,6CAAK,CAAA;gBAAE,uDAAU,CAAA;YAC9B,CAAC,EAFW,eAAU,KAAV,eAAU,QAErB;YAFD,IAAY,UAAU,GAAV,eAEX,CAAA;QACL,CAAC,EA/BiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QA+BrB;IAAD,CAAC,EA/BW,KAAK,GAAL,UAAK,KAAL,UAAK,QA+BhB;AAAD,CAAC,EA/BM,IAAI,KAAJ,IAAI,QA+BV;AC/BD,IAAO,IAAI,CA6cV;AA7cD,WAAO,IAAI;IAAC,IAAA,KAAK,CA6chB;IA7cW,WAAA,KAAK;QAAC,IAAA,IAAI,CA6crB;QA7ciB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAkBI,kBAAY,IAAkB;oBAV9B,iBAAY,GAAG,IAAI,KAAK,EAAa,CAAC;oBACtC,qBAAgB,GAAG,IAAI,KAAK,EAAa,CAAC;oBAG1C,SAAI,GAAG,CAAC,CAAC;oBACT,UAAK,GAAG,KAAK,CAAC;oBACd,UAAK,GAAG,KAAK,CAAC;oBACd,MAAC,GAAG,CAAC,CAAC;oBACN,MAAC,GAAG,CAAC,CAAC;oBAGF,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;oBAC1D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBAEjB,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAQ,CAAC;oBAC/B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBACzC,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC7B,IAAI,IAAI,SAAM,CAAC;wBACf,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC;4BACxB,IAAI,GAAG,IAAI,SAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;wBAC1C,IAAI,CAAC,CAAC;4BACF,IAAI,QAAM,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;4BAC/C,IAAI,GAAG,IAAI,SAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,QAAM,CAAC,CAAC;4BACxC,QAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAC/B,CAAC;wBACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAC1B,CAAC;oBAED,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAQ,CAAC;oBAC/B,IAAI,CAAC,SAAS,GAAG,IAAI,KAAK,EAAQ,CAAC;oBACnC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBACzC,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC7B,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;wBAC/C,IAAI,IAAI,GAAG,IAAI,SAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;wBACpC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACtB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAC9B,CAAC;oBAED,IAAI,CAAC,aAAa,GAAG,IAAI,KAAK,EAAgB,CAAC;oBAC/C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBACjD,IAAI,gBAAgB,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;wBAC7C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,iBAAY,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC,CAAC;oBACtE,CAAC;oBAED,IAAI,CAAC,oBAAoB,GAAG,IAAI,KAAK,EAAuB,CAAC;oBAC7D,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBACxD,IAAI,uBAAuB,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;wBAC3D,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,wBAAmB,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAAC,CAAC;oBAC3F,CAAC;oBAED,IAAI,CAAC,eAAe,GAAG,IAAI,KAAK,EAAkB,CAAC;oBACnD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBACnD,IAAI,kBAAkB,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;wBACjD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,mBAAc,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC,CAAC;oBAC5E,CAAC;oBAED,IAAI,CAAC,KAAK,GAAG,IAAI,UAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBACnC,IAAI,CAAC,WAAW,EAAE,CAAC;gBACvB,CAAC;gBAED,8BAAW,GAAX;oBACI,IAAI,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;oBACpC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;oBAEvB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBACxC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC;oBAE5B,IAAI,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;oBACvC,IAAI,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;oBACrD,IAAI,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;oBAC3C,IAAI,OAAO,GAAG,aAAa,CAAC,MAAM,EAAE,cAAc,GAAG,oBAAoB,CAAC,MAAM,EAAE,SAAS,GAAG,eAAe,CAAC,MAAM,CAAC;oBACrH,IAAI,eAAe,GAAG,OAAO,GAAG,cAAc,GAAG,SAAS,CAAC;oBAE3D,KAAK,EACD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,CAAC,EAAE,EAAE,CAAC;wBACvC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,OAAO,EAAE,EAAE,EAAE,EAAE,CAAC;4BAClC,IAAI,UAAU,GAAG,aAAa,CAAC,EAAE,CAAC,CAAC;4BACnC,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;gCAC7B,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;gCAClC,QAAQ,CAAC,KAAK,CAAC;4BACnB,CAAC;wBACL,CAAC;wBACD,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,cAAc,EAAE,EAAE,EAAE,EAAE,CAAC;4BACzC,IAAI,UAAU,GAAG,oBAAoB,CAAC,EAAE,CAAC,CAAC;4BAC1C,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;gCAC7B,IAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;gCACzC,QAAQ,CAAC,KAAK,CAAC;4BACnB,CAAC;wBACL,CAAC;wBACD,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,EAAE,EAAE,EAAE,EAAE,CAAC;4BACpC,IAAI,UAAU,GAAG,eAAe,CAAC,EAAE,CAAC,CAAC;4BACrC,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;gCAC7B,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;gCACpC,QAAQ,CAAC,KAAK,CAAC;4BACnB,CAAC;wBACL,CAAC;oBACL,CAAC;oBAEL,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBACxC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChC,CAAC;gBAED,mCAAgB,GAAhB,UAAiB,UAAwB;oBACrC,IAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;oBAC/B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oBAEtB,IAAI,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC;oBACnC,IAAI,MAAM,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;oBAC5B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oBAEtB,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBACzB,IAAI,KAAK,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;wBAChD,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACpF,CAAC;oBAED,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAEnC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;oBAChC,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;gBACtD,CAAC;gBAED,qCAAkB,GAAlB,UAAmB,UAA0B;oBACzC,IAAI,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC;oBAC7B,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;oBAChC,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;oBACzB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;oBACzF,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,CAAC;wBACpE,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;oBAClF,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE;wBACvD,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;oBAEhF,IAAI,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;oBACtC,EAAE,CAAC,CAAC,UAAU,YAAY,mBAAc,CAAC;wBAAC,IAAI,CAAC,gCAAgC,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;oBAEtG,IAAI,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC;oBACnC,IAAI,SAAS,GAAG,WAAW,CAAC,MAAM,CAAC;oBACnC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,EAAE,EAAE,EAAE;wBACjC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;oBAEnC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAEnC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,EAAE,EAAE,EAAE;wBACjC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;oBAC7C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,EAAE,EAAE,EAAE;wBACjC,WAAW,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;gBACtC,CAAC;gBAED,0CAAuB,GAAvB,UAAwB,UAA+B;oBACnD,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;oBAEjC,IAAI,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC;oBACnC,IAAI,SAAS,GAAG,WAAW,CAAC,MAAM,CAAC;oBACnC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,EAAE,EAAE,EAAE;wBACjC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;oBAEnC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAEnC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,EAAE,EAAE,EAAE;wBACjC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;oBAC7C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,EAAE,EAAE,EAAE;wBACjC,WAAW,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;gBACtC,CAAC;gBAED,+CAA4B,GAA5B,UAA6B,IAAU,EAAE,SAAiB,EAAE,QAAc;oBACtE,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;oBAC9C,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wBAAC,MAAM,CAAC;oBACzB,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC;wBAC1B,IAAI,CAAC,gCAAgC,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC;oBACtE,CAAC;gBACL,CAAC;gBAED,mDAAgC,GAAhC,UAAiC,UAAsB,EAAE,QAAc;oBACnE,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,YAAY,mBAAc,CAAC,CAAC;wBAAC,MAAM,CAAC;oBACpD,IAAI,SAAS,GAAoB,UAAW,CAAC,KAAK,CAAC;oBACnD,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC;wBAClB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;oBAC5B,IAAI,CAAC,CAAC;wBACF,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;wBACvB,IAAI,CAAC,GAAG,CAAC,CAAC;wBACV,OAAO,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC;4BAC1B,IAAI,SAAS,GAAG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;4BAC/B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gCACrC,IAAI,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;gCAC7B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;4BACpC,CAAC;wBACL,CAAC;oBACL,CAAC;gBACL,CAAC;gBAED,2BAAQ,GAAR,UAAS,IAAU;oBACf,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;wBAAC,MAAM,CAAC;oBACxB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC;wBAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oBAC1C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;oBACnB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACjC,CAAC;gBAED,4BAAS,GAAT,UAAU,KAAkB;oBACxB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC3C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wBACpB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;4BAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wBAC/C,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;oBACxB,CAAC;gBACL,CAAC;gBAGD,uCAAoB,GAApB;oBACI,IAAI,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;oBAC7C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBACtD,IAAI,IAAI,GAAG,gBAAgB,CAAC,CAAC,CAAS,CAAC;wBACvC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;wBACjB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;wBACjB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC;wBAC/B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;wBAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;wBAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;wBAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;wBAC3B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;oBAC7B,CAAC;oBACD,IAAI,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;oBACpC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBAC9C,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;gBAChC,CAAC;gBAGD,iCAAc,GAAd;oBACI,IAAI,CAAC,mBAAmB,EAAE,CAAC;oBAC3B,IAAI,CAAC,mBAAmB,EAAE,CAAC;gBAC/B,CAAC;gBAGD,sCAAmB,GAAnB;oBACI,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBACxC,KAAK,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC;oBAE9B,IAAI,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;oBACvC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBACnD,IAAI,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;wBAClC,UAAU,CAAC,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC;wBACzD,UAAU,CAAC,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC;oBACzC,CAAC;oBAED,IAAI,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;oBACrD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,oBAAoB,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC1D,IAAI,UAAU,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;wBACzC,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;wBAC3B,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;wBACtC,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;wBAC5C,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;wBACpC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBACxC,CAAC;oBAED,IAAI,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;oBAC3C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBACrD,IAAI,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;wBACpC,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;wBAC3B,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;wBACpC,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;wBAClC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;wBACtC,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;oBAChD,CAAC;gBACL,CAAC;gBAED,sCAAmB,GAAnB;oBACI,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,UAAK,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;oBAC3D,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBACxC,KAAK,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC;gBAClC,CAAC;gBAGD,8BAAW,GAAX;oBACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC;wBAAC,MAAM,CAAC,IAAI,CAAC;oBACxC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACzB,CAAC;gBAGD,2BAAQ,GAAR,UAAS,QAAgB;oBACrB,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC3C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wBACpB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC;4BAAC,MAAM,CAAC,IAAI,CAAC;oBAChD,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAGD,gCAAa,GAAb,UAAc,QAAgB;oBAC1B,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBACxC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC;4BAAC,MAAM,CAAC,CAAC,CAAC;oBACjD,MAAM,CAAC,CAAC,CAAC,CAAC;gBACd,CAAC;gBAGD,2BAAQ,GAAR,UAAS,QAAgB;oBACrB,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC3C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wBACpB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC;4BAAC,MAAM,CAAC,IAAI,CAAC;oBAChD,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAGD,gCAAa,GAAb,UAAc,QAAgB;oBAC1B,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBACxC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC;4BAAC,MAAM,CAAC,CAAC,CAAC;oBACjD,MAAM,CAAC,CAAC,CAAC,CAAC;gBACd,CAAC;gBAID,gCAAa,GAAb,UAAc,QAAgB;oBAC1B,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;oBACxC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,QAAQ,CAAC,CAAC;oBACjE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACvB,CAAC;gBAMD,0BAAO,GAAP,UAAQ,OAAa;oBACjB,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;wBAClB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC;4BAClB,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;wBACvC,IAAI,CAAC,CAAC;4BACF,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;4BACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gCAC3C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gCACpB,IAAI,MAAI,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;gCACpC,EAAE,CAAC,CAAC,MAAI,IAAI,IAAI,CAAC,CAAC,CAAC;oCACf,IAAI,UAAU,GAAe,OAAO,CAAC,aAAa,CAAC,CAAC,EAAE,MAAI,CAAC,CAAC;oCAC5D,EAAE,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC;wCAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCAC3D,CAAC;4BACL,CAAC;wBACL,CAAC;oBACL,CAAC;oBACD,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;gBACxB,CAAC;gBAGD,sCAAmB,GAAnB,UAAoB,QAAgB,EAAE,cAAsB;oBACxD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,cAAc,CAAC,CAAC;gBACjF,CAAC;gBAGD,gCAAa,GAAb,UAAc,SAAiB,EAAE,cAAsB;oBACnD,EAAE,CAAC,CAAC,cAAc,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;oBAC9E,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;wBACpB,IAAI,UAAU,GAAe,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;wBAChF,EAAE,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC;4BAAC,MAAM,CAAC,UAAU,CAAC;oBAC9C,CAAC;oBACD,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC;wBAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;oBACzG,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAGD,gCAAa,GAAb,UAAc,QAAgB,EAAE,cAAsB;oBAClD,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC3C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wBACpB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC,CAAC,CAAC;4BAC7B,IAAI,UAAU,GAAe,IAAI,CAAC;4BAClC,EAAE,CAAC,CAAC,cAAc,IAAI,IAAI,CAAC,CAAC,CAAC;gCACzB,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;gCACnD,EAAE,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC;oCACnB,MAAM,IAAI,KAAK,CAAC,wBAAwB,GAAG,cAAc,GAAG,cAAc,GAAG,QAAQ,CAAC,CAAC;4BAC/F,CAAC;4BACD,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;4BAC/B,MAAM,CAAC;wBACX,CAAC;oBACL,CAAC;oBACD,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,QAAQ,CAAC,CAAC;gBACnD,CAAC;gBAGD,mCAAgB,GAAhB,UAAiB,cAAsB;oBACnC,EAAE,CAAC,CAAC,cAAc,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;oBAC9E,IAAI,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;oBACvC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBACnD,IAAI,YAAY,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;wBACpC,EAAE,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,IAAI,cAAc,CAAC;4BAAC,MAAM,CAAC,YAAY,CAAC;oBACtE,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAGD,0CAAuB,GAAvB,UAAwB,cAAsB;oBAC1C,EAAE,CAAC,CAAC,cAAc,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;oBAC9E,IAAI,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;oBACrD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,oBAAoB,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC1D,IAAI,UAAU,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;wBACzC,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,cAAc,CAAC;4BAAC,MAAM,CAAC,UAAU,CAAC;oBAClE,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAGD,qCAAkB,GAAlB,UAAmB,cAAsB;oBACrC,EAAE,CAAC,CAAC,cAAc,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;oBAC9E,IAAI,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;oBAC3C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBACrD,IAAI,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;wBACpC,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,cAAc,CAAC;4BAAC,MAAM,CAAC,UAAU,CAAC;oBAClE,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAKD,4BAAS,GAAT,UAAU,MAAe,EAAE,IAAa;oBACpC,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;oBAC9D,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;oBAC1D,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBAC/B,IAAI,IAAI,GAAG,MAAM,CAAC,iBAAiB,EAAE,IAAI,GAAG,MAAM,CAAC,iBAAiB,EAAE,IAAI,GAAG,MAAM,CAAC,iBAAiB,EAAE,IAAI,GAAG,MAAM,CAAC,iBAAiB,CAAC;oBACvI,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC/C,IAAI,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;wBACxB,IAAI,QAAQ,GAAsB,IAAI,CAAC;wBACvC,IAAI,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;wBACtC,EAAE,CAAC,CAAC,UAAU,YAAY,qBAAgB,CAAC;4BACvC,QAAQ,GAAsB,UAAW,CAAC,mBAAmB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;wBAC/E,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,YAAY,mBAAc,CAAC;4BAC1C,QAAQ,GAAoB,UAAW,CAAC,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBAC5E,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;4BACnB,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC;gCACtD,IAAI,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;gCAC3C,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gCACzB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gCACzB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gCACzB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;4BAC7B,CAAC;wBACL,CAAC;oBACL,CAAC;oBACD,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;oBACvB,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,CAAC;gBACvC,CAAC;gBAED,yBAAM,GAAN,UAAO,KAAa;oBAChB,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC;gBACvB,CAAC;gBACL,eAAC;YAAD,CAAC,AA3cD,IA2cC;YA3cY,aAAQ,WA2cpB,CAAA;QACL,CAAC,EA7ciB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QA6crB;IAAD,CAAC,EA7cW,KAAK,GAAL,UAAK,KAAL,UAAK,QA6chB;AAAD,CAAC,EA7cM,IAAI,KAAJ,IAAI,QA6cV;AC7cD,IAAO,IAAI,CA2KV;AA3KD,WAAO,IAAI;IAAC,IAAA,KAAK,CA2KhB;IA3KW,WAAA,KAAK;QAAC,IAAA,IAAI,CA2KrB;QA3KiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAAA;oBACI,SAAI,GAAG,CAAC,CAAC;oBACT,SAAI,GAAG,CAAC,CAAC;oBACT,SAAI,GAAG,CAAC,CAAC;oBACT,SAAI,GAAG,CAAC,CAAC;oBACT,kBAAa,GAAG,IAAI,KAAK,EAAyB,CAAC;oBACnD,aAAQ,GAAG,IAAI,KAAK,EAAqB,CAAC;oBAClC,gBAAW,GAAG,IAAI,SAAI,CAAoB;wBAC9C,MAAM,CAAC,UAAK,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;oBACnC,CAAC,CAAC,CAAC;gBAgKP,CAAC;gBA9JG,+BAAM,GAAN,UAAO,QAAkB,EAAE,UAAmB;oBAC1C,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAClE,IAAI,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;oBACvC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC7B,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;oBACnC,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;oBAC3B,IAAI,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC;oBAE7B,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC;oBACzB,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;oBAC9B,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;oBAEpB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC;wBACjC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wBACpB,IAAI,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;wBACtC,EAAE,CAAC,CAAC,UAAU,YAAY,0BAAqB,CAAC,CAAC,CAAC;4BAC9C,IAAI,WAAW,GAAG,UAAmC,CAAC;4BACtD,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;4BAEhC,IAAI,OAAO,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC;4BACnC,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,IAAI,WAAW,CAAC,mBAAmB,CAAC,CAAC,CAAC;gCACpD,OAAO,GAAG,UAAK,CAAC,aAAa,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;4BACnE,CAAC;4BACD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;4BACvB,WAAW,CAAC,oBAAoB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;wBACpD,CAAC;oBACL,CAAC;oBAED,EAAE,CAAC,CAAC,UAAU,CAAC;wBAAC,IAAI,CAAC,WAAW,EAAE,CAAC;gBACvC,CAAC;gBAED,oCAAW,GAAX;oBACI,IAAI,IAAI,GAAG,MAAM,CAAC,iBAAiB,EAAE,IAAI,GAAG,MAAM,CAAC,iBAAiB,EAAE,IAAI,GAAG,MAAM,CAAC,iBAAiB,EAAE,IAAI,GAAG,MAAM,CAAC,iBAAiB,CAAC;oBACvI,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC7B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC9C,IAAI,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;wBAC1B,IAAI,QAAQ,GAAG,OAAO,CAAC;wBACvB,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,OAAO,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC;4BACrD,IAAI,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;4BACrB,IAAI,CAAC,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;4BACzB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;4BACzB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;4BACzB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;4BACzB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;wBAC7B,CAAC;oBACL,CAAC;oBACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACrB,CAAC;gBAGD,0CAAiB,GAAjB,UAAkB,CAAS,EAAE,CAAS;oBAClC,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC;gBAChF,CAAC;gBAGD,8CAAqB,GAArB,UAAsB,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;oBAChE,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;oBACrB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;oBACrB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;oBACrB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;oBACrB,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC;wBACrH,MAAM,CAAC,KAAK,CAAC;oBACjB,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;oBAC9B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;oBAC7B,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC;wBAAC,MAAM,CAAC,IAAI,CAAC;oBACtC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;oBACzB,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC;wBAAC,MAAM,CAAC,IAAI,CAAC;oBACtC,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;oBAC7B,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC;wBAAC,MAAM,CAAC,IAAI,CAAC;oBACtC,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;oBACzB,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC;wBAAC,MAAM,CAAC,IAAI,CAAC;oBACtC,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAGD,+CAAsB,GAAtB,UAAuB,MAAsB;oBACzC,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;gBACpH,CAAC;gBAID,sCAAa,GAAb,UAAc,CAAS,EAAE,CAAS;oBAC9B,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC7B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;4BAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;oBACnF,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAGD,6CAAoB,GAApB,UAAqB,OAA0B,EAAE,CAAS,EAAE,CAAS;oBACjE,IAAI,QAAQ,GAAG,OAAO,CAAC;oBACvB,IAAI,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC;oBAExB,IAAI,SAAS,GAAG,EAAE,GAAG,CAAC,CAAC;oBACvB,IAAI,MAAM,GAAG,KAAK,CAAC;oBACnB,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC;wBAChC,IAAI,OAAO,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;wBAC/B,IAAI,KAAK,GAAG,QAAQ,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;wBACpC,EAAE,CAAC,CAAC,CAAC,OAAO,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC7D,IAAI,OAAO,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;4BAC3B,EAAE,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;gCAAC,MAAM,GAAG,CAAC,MAAM,CAAC;wBAC5G,CAAC;wBACD,SAAS,GAAG,EAAE,CAAC;oBACnB,CAAC;oBACD,MAAM,CAAC,MAAM,CAAC;gBAClB,CAAC;gBAKD,0CAAiB,GAAjB,UAAkB,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;oBAC5D,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC7B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;4BAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;oBACjG,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAGD,iDAAwB,GAAxB,UAAyB,OAA0B,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;oBAC/F,IAAI,QAAQ,GAAG,OAAO,CAAC;oBACvB,IAAI,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC;oBAExB,IAAI,OAAO,GAAG,EAAE,GAAG,EAAE,EAAE,QAAQ,GAAG,EAAE,GAAG,EAAE,CAAC;oBAC1C,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;oBAC7B,IAAI,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;oBACjD,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC;wBAChC,IAAI,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;wBAC7C,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;wBAC7B,IAAI,OAAO,GAAG,EAAE,GAAG,EAAE,EAAE,QAAQ,GAAG,EAAE,GAAG,EAAE,CAAC;wBAC1C,IAAI,IAAI,GAAG,OAAO,GAAG,QAAQ,GAAG,QAAQ,GAAG,OAAO,CAAC;wBACnD,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,OAAO,GAAG,OAAO,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;wBACjD,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;4BACnG,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,QAAQ,GAAG,QAAQ,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;4BACnD,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gCAAC,MAAM,CAAC,IAAI,CAAC;wBACtH,CAAC;wBACD,EAAE,GAAG,EAAE,CAAC;wBACR,EAAE,GAAG,EAAE,CAAC;oBACZ,CAAC;oBACD,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAGD,mCAAU,GAAV,UAAW,WAAkC;oBACzC,EAAE,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;oBACxE,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;oBACpD,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBACrD,CAAC;gBAED,iCAAQ,GAAR;oBACI,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACjC,CAAC;gBAED,kCAAS,GAAT;oBACI,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACjC,CAAC;gBACL,qBAAC;YAAD,CAAC,AAzKD,IAyKC;YAzKY,mBAAc,iBAyK1B,CAAA;QACL,CAAC,EA3KiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QA2KrB;IAAD,CAAC,EA3KW,KAAK,GAAL,UAAK,KAAL,UAAK,QA2KhB;AAAD,CAAC,EA3KM,IAAI,KAAJ,IAAI,QA2KV;AC3KD,IAAO,IAAI,CA6HV;AA7HD,WAAO,IAAI;IAAC,IAAA,KAAK,CA6HhB;IA7HW,WAAA,KAAK;QAAC,IAAA,IAAI,CA6HrB;QA7HiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAAA;oBAEI,UAAK,GAAG,IAAI,KAAK,EAAY,CAAC;oBAC9B,UAAK,GAAG,IAAI,KAAK,EAAY,CAAC;oBAC9B,UAAK,GAAG,IAAI,KAAK,EAAQ,CAAC;oBAE1B,WAAM,GAAG,IAAI,KAAK,EAAa,CAAC;oBAChC,eAAU,GAAG,IAAI,KAAK,EAAa,CAAC;oBACpC,kBAAa,GAAG,IAAI,KAAK,EAAoB,CAAC;oBAC9C,yBAAoB,GAAG,IAAI,KAAK,EAA2B,CAAC;oBAC5D,oBAAe,GAAG,IAAI,KAAK,EAAsB,CAAC;oBAOlD,QAAG,GAAG,CAAC,CAAC;gBA0GZ,CAAC;gBAvGG,+BAAQ,GAAR,UAAS,QAAgB;oBACrB,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC3C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wBACpB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC;4BAAC,MAAM,CAAC,IAAI,CAAC;oBAC3C,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED,oCAAa,GAAb,UAAc,QAAgB;oBAC1B,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBACxC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,QAAQ,CAAC;4BAAC,MAAM,CAAC,CAAC,CAAC;oBAC5C,MAAM,CAAC,CAAC,CAAC,CAAC;gBACd,CAAC;gBAED,+BAAQ,GAAR,UAAS,QAAgB;oBACrB,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC3C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wBACpB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC;4BAAC,MAAM,CAAC,IAAI,CAAC;oBAC3C,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED,oCAAa,GAAb,UAAc,QAAgB;oBAC1B,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBACxC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,QAAQ,CAAC;4BAAC,MAAM,CAAC,CAAC,CAAC;oBAC5C,MAAM,CAAC,CAAC,CAAC,CAAC;gBACd,CAAC;gBAED,+BAAQ,GAAR,UAAS,QAAgB;oBACrB,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC3C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wBACpB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC;4BAAC,MAAM,CAAC,IAAI,CAAC;oBAC3C,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED,gCAAS,GAAT,UAAU,aAAqB;oBAC3B,EAAE,CAAC,CAAC,aAAa,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;oBAC5E,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC5C,IAAI,OAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBACtB,EAAE,CAAC,CAAC,OAAK,CAAC,IAAI,IAAI,aAAa,CAAC;4BAAC,MAAM,CAAC,OAAK,CAAC;oBAClD,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED,oCAAa,GAAb,UAAc,aAAqB;oBAC/B,EAAE,CAAC,CAAC,aAAa,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;oBAC5E,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;oBACjC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBAChD,IAAI,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;wBAC9B,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,IAAI,aAAa,CAAC;4BAAC,MAAM,CAAC,SAAS,CAAC;oBAC1D,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED,uCAAgB,GAAhB,UAAiB,cAAsB;oBACnC,EAAE,CAAC,CAAC,cAAc,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;oBAC9E,IAAI,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;oBACvC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBACnD,IAAI,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;wBAClC,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,IAAI,cAAc,CAAC;4BAAC,MAAM,CAAC,UAAU,CAAC;oBAC7D,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED,8CAAuB,GAAvB,UAAwB,cAAsB;oBAC1C,EAAE,CAAC,CAAC,cAAc,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;oBAC9E,IAAI,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;oBACrD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,oBAAoB,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC1D,IAAI,UAAU,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;wBACzC,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,IAAI,cAAc,CAAC;4BAAC,MAAM,CAAC,UAAU,CAAC;oBAC7D,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED,yCAAkB,GAAlB,UAAmB,cAAsB;oBACrC,EAAE,CAAC,CAAC,cAAc,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;oBAC9E,IAAI,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;oBAC3C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBACrD,IAAI,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;wBACpC,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,IAAI,cAAc,CAAC;4BAAC,MAAM,CAAC,UAAU,CAAC;oBAC7D,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED,8CAAuB,GAAvB,UAAwB,kBAA0B;oBAC9C,EAAE,CAAC,CAAC,kBAAkB,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;oBACtF,IAAI,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;oBAC3C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBAClD,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,kBAAkB,CAAC;4BAAC,MAAM,CAAC,CAAC,CAAC;oBAChE,MAAM,CAAC,CAAC,CAAC,CAAC;gBACd,CAAC;gBACL,mBAAC;YAAD,CAAC,AA3HD,IA2HC;YA3HY,iBAAY,eA2HxB,CAAA;QACL,CAAC,EA7HiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QA6HrB;IAAD,CAAC,EA7HW,KAAK,GAAL,UAAK,KAAL,UAAK,QA6HhB;AAAD,CAAC,EA7HM,IAAI,KAAJ,IAAI,QA6HV;AC7HD,IAAO,IAAI,CAstBV;AAttBD,WAAO,IAAI;IAAC,IAAA,KAAK,CAstBhB;IAttBW,WAAA,KAAK;QAAC,IAAA,IAAI,CAstBrB;QAttBiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAKI,sBAAY,gBAAkC;oBAH9C,UAAK,GAAG,CAAC,CAAC;oBACF,iBAAY,GAAG,IAAI,KAAK,EAAc,CAAC;oBAG3C,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;gBAC7C,CAAC;gBAED,uCAAgB,GAAhB,UAAiB,IAAkB;oBAC/B,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,IAAI,YAAY,GAAG,IAAI,iBAAY,EAAE,CAAC;oBACtC,IAAI,IAAI,GAAG,OAAM,CAAC,IAAI,CAAC,KAAK,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;oBAG/D,IAAI,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAChC,EAAE,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC;wBACtB,YAAY,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;wBACrC,YAAY,CAAC,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC;wBACzC,YAAY,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;wBACvC,YAAY,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;wBACzC,YAAY,CAAC,GAAG,GAAG,WAAW,CAAC,GAAG,CAAC;wBACnC,YAAY,CAAC,UAAU,GAAG,WAAW,CAAC,MAAM,CAAC;oBACjD,CAAC;oBAGD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;wBACb,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;4BACzC,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;4BAE5B,IAAI,QAAM,GAAa,IAAI,CAAC;4BAC5B,IAAI,UAAU,GAAW,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;4BAChE,EAAE,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC;gCACrB,QAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;gCAC3C,EAAE,CAAC,CAAC,QAAM,IAAI,IAAI,CAAC;oCAAC,MAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,UAAU,CAAC,CAAC;4BAChF,CAAC;4BACD,IAAI,IAAI,GAAG,IAAI,aAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,EAAE,QAAM,CAAC,CAAC;4BACzE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;4BAC1D,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;4BAChD,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;4BAChD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;4BACtD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;4BAClD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;4BAClD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;4BAClD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;4BAGlD,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,OAAO,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;gCAEtF,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC,mBAAmB,CACjD,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,iBAAiB,EAAE,IAAI,CAAC,EAC/C,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;4BACtD,CAAC;4BAAC,IAAI,CAAC,CAAC;gCAEJ,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;4BAC7G,CAAC;4BAED,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAClC,CAAC;oBACL,CAAC;oBAGD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;wBACb,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;4BACzC,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;4BAC5B,IAAI,QAAQ,GAAW,OAAO,CAAC,IAAI,CAAC;4BACpC,IAAI,QAAQ,GAAW,OAAO,CAAC,IAAI,CAAC;4BACpC,IAAI,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;4BAC/C,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;gCAAC,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,QAAQ,CAAC,CAAC;4BAC1E,IAAI,IAAI,GAAG,IAAI,aAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;4BAEvE,IAAI,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;4BAC1D,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC;gCAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;4BAEnD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;4BACjE,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;4BAC7F,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAClC,CAAC;oBACL,CAAC;oBAGD,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;wBACV,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;4BACtC,IAAI,aAAa,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;4BAC/B,IAAI,IAAI,GAAG,IAAI,qBAAgB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;4BACpD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;4BAEtD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gCAClD,IAAI,QAAQ,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gCACtC,IAAI,IAAI,GAAG,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gCAC3C,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;oCAAC,MAAM,IAAI,KAAK,CAAC,qBAAqB,GAAG,QAAQ,CAAC,CAAC;gCACpE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BAC1B,CAAC;4BAED,IAAI,UAAU,GAAW,aAAa,CAAC,MAAM,CAAC;4BAC9C,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;4BAChD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC;gCAAC,MAAM,IAAI,KAAK,CAAC,4BAA4B,GAAG,UAAU,CAAC,CAAC;4BAEpF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,cAAc,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;4BACjF,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;4BAElD,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAC1C,CAAC;oBACL,CAAC;oBAGD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;wBACjB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;4BAC7C,IAAI,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;4BACtC,IAAI,IAAI,GAAG,IAAI,4BAAuB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;4BAC3D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;4BAEtD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gCAClD,IAAI,QAAQ,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gCACtC,IAAI,IAAI,GAAG,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gCAC3C,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;oCAAC,MAAM,IAAI,KAAK,CAAC,uCAAuC,GAAG,QAAQ,CAAC,CAAC;gCACtF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BAC1B,CAAC;4BAED,IAAI,UAAU,GAAW,aAAa,CAAC,MAAM,CAAC;4BAC9C,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;4BAChD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC;gCAAC,MAAM,IAAI,KAAK,CAAC,8CAA8C,GAAG,UAAU,CAAC,CAAC;4BAEtG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;4BAClE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;4BAC5D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;4BAC5D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;4BAC9D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;4BAC9D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;4BAE9D,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;4BAC9D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC;4BACpE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;4BAC5D,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;4BAE5D,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACjD,CAAC;oBACL,CAAC;oBAGD,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;wBACZ,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;4BACxC,IAAI,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BACjC,IAAI,IAAI,GAAG,IAAI,uBAAkB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;4BACtD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;4BAEtD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gCAClD,IAAI,QAAQ,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gCACtC,IAAI,IAAI,GAAG,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gCAC3C,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;oCAAC,MAAM,IAAI,KAAK,CAAC,uCAAuC,GAAG,QAAQ,CAAC,CAAC;gCACtF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BAC1B,CAAC;4BAED,IAAI,UAAU,GAAW,aAAa,CAAC,MAAM,CAAC;4BAC9C,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;4BAChD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC;gCAAC,MAAM,IAAI,KAAK,CAAC,8BAA8B,GAAG,UAAU,CAAC,CAAC;4BAEtF,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC,CAAC;4BACjH,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC,CAAC;4BAC7G,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,YAAY,EAAE,SAAS,CAAC,CAAC,CAAC;4BAC3G,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;4BAClE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;4BAC5D,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,iBAAY,CAAC,KAAK,CAAC;gCAAC,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC;4BACpE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;4BAC1D,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,gBAAW,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,IAAI,gBAAW,CAAC,KAAK,CAAC;gCAAC,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC;4BAC3G,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;4BAC9D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC;4BAEpE,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAC5C,CAAC;oBACL,CAAC;oBAGD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;wBACb,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;4BAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;4BAClC,IAAI,IAAI,GAAG,IAAI,SAAI,CAAC,QAAQ,CAAC,CAAC;4BAC9B,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,OAAO,CAAC,CAAC,CAAC;gCAC3B,IAAI,SAAS,GAAG,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gCACrD,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC;oCAAC,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,QAAQ,CAAC,CAAC;gCACpE,IAAI,OAAO,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;gCAChC,GAAG,CAAC,CAAC,IAAI,SAAS,IAAI,OAAO,CAAC,CAAC,CAAC;oCAC5B,IAAI,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;oCACrF,EAAE,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC;wCAAC,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;gCACjF,CAAC;4BACL,CAAC;4BACD,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC;gCAAC,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC;wBAChE,CAAC;oBACL,CAAC;oBAGD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBACvD,IAAI,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;wBACtC,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,IAAI,IAAI,GAAG,YAAY,CAAC,WAAW,GAAG,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;wBACvG,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;4BAAC,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;wBACxE,IAAI,QAAM,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;wBACzE,EAAE,CAAC,CAAC,QAAM,IAAI,IAAI,CAAC;4BAAC,MAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;wBACnF,UAAU,CAAC,IAAI,CAAC,aAAa,CAAkB,QAAM,CAAC,CAAC;oBAE3D,CAAC;oBACD,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;oBAG7B,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;wBACd,GAAG,CAAC,CAAC,IAAI,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;4BAChC,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;4BACtC,IAAI,IAAI,GAAG,IAAI,cAAS,CAAC,SAAS,CAAC,CAAC;4BACpC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;4BAClD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;4BACtD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;4BACzD,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACnC,CAAC;oBACL,CAAC;oBAGD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;wBAClB,GAAG,CAAC,CAAC,IAAI,aAAa,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;4BACxC,IAAI,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;4BAClD,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC;wBAClE,CAAC;oBACL,CAAC;oBAED,MAAM,CAAC,YAAY,CAAC;gBACxB,CAAC;gBAED,qCAAc,GAAd,UAAe,GAAQ,EAAE,IAAU,EAAE,SAAiB,EAAE,IAAY;oBAChE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;oBAExC,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;oBAEhD,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;wBACX,KAAK,QAAQ,EAAE,CAAC;4BACZ,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;4BAC5C,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;4BACzE,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC;gCAAC,MAAM,CAAC,IAAI,CAAC;4BAChC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;4BACnB,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;4BAC9C,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;4BAC9C,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;4BAChD,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;4BAChD,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;4BACpD,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;4BACjC,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC;4BAEnC,IAAI,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;4BACtD,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC;gCAAC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;4BAErD,MAAM,CAAC,MAAM,CAAC;wBAClB,CAAC;wBACD,KAAK,aAAa,EAAE,CAAC;4BACjB,IAAI,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;4BACrE,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC;gCAAC,MAAM,CAAC,IAAI,CAAC;4BAC7B,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC;4BAClD,IAAI,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;4BACtD,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC;gCAAC,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;4BAClD,MAAM,CAAC,GAAG,CAAC;wBACf,CAAC;wBAED,KAAK,cAAc,CAAC;wBACpB,KAAK,aAAa,CAAC;wBACnB,KAAK,MAAM,CAAC;wBACZ,KAAK,YAAY,EAAE,CAAC;4BAChB,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;4BAC5C,IAAI,MAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;4BACrE,EAAE,CAAC,CAAC,MAAI,IAAI,IAAI,CAAC;gCAAC,MAAM,CAAC,IAAI,CAAC;4BAC9B,MAAI,CAAC,IAAI,GAAG,IAAI,CAAC;4BAEjB,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;4BAC9C,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC;gCAAC,MAAI,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;4BAEnD,IAAI,QAAM,GAAW,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;4BACxD,EAAE,CAAC,CAAC,QAAM,IAAI,IAAI,CAAC,CAAC,CAAC;gCACjB,MAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;gCACxD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,MAAI,EAAW,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,SAAS,EAAE,QAAM,CAAC,CAAC,CAAC;gCAC3G,MAAM,CAAC,MAAI,CAAC;4BAChB,CAAC;4BAED,IAAI,GAAG,GAAkB,GAAG,CAAC,GAAG,CAAC;4BACjC,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,MAAI,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;4BACzC,MAAI,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC;4BAC/B,MAAI,CAAC,SAAS,GAAG,GAAG,CAAC;4BAGrB,MAAI,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;4BACpD,MAAM,CAAC,MAAI,CAAC;wBAChB,CAAC;wBACD,KAAK,MAAM,EAAE,CAAC;4BACV,IAAI,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;4BAC/D,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;gCAAC,MAAM,CAAC,IAAI,CAAC;4BAC9B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;4BAClD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,eAAe,EAAE,IAAI,CAAC,CAAC;4BAE/D,IAAI,WAAW,GAAG,GAAG,CAAC,WAAW,CAAC;4BAClC,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,EAAE,WAAW,IAAI,CAAC,CAAC,CAAC;4BAE/C,IAAI,OAAO,GAAkB,UAAK,CAAC,QAAQ,CAAC,WAAW,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;4BAChE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE;gCACvC,OAAO,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;4BAC1C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;4BAEvB,IAAI,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;4BACtD,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC;gCAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;4BACnD,MAAM,CAAC,IAAI,CAAC;wBAChB,CAAC;oBACL,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED,mCAAY,GAAZ,UAAa,GAAQ,EAAE,UAA4B,EAAE,cAAsB;oBACvE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,UAAU,CAAC,mBAAmB,GAAG,cAAc,CAAC;oBAChD,IAAI,QAAQ,GAAkB,GAAG,CAAC,QAAQ,CAAC;oBAC3C,EAAE,CAAC,CAAC,cAAc,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;wBACpC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;4BACb,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;gCAC3C,QAAQ,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC;wBAC7B,CAAC;wBACD,UAAU,CAAC,QAAQ,GAAG,UAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;wBACnD,MAAM,CAAC;oBACX,CAAC;oBACD,IAAI,OAAO,GAAG,IAAI,KAAK,EAAU,CAAC;oBAClC,IAAI,KAAK,GAAG,IAAI,KAAK,EAAU,CAAC;oBAChC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC;wBAC1C,IAAI,SAAS,GAAG,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;wBAC9B,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;wBACtB,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,SAAS,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;4BAC9C,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;4BACxB,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;4BACtC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;4BACtC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBAClC,CAAC;oBACL,CAAC;oBACD,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC;oBACzB,UAAU,CAAC,QAAQ,GAAG,UAAK,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;gBACtD,CAAC;gBAED,oCAAa,GAAb,UAAc,GAAQ,EAAE,IAAY,EAAE,YAA0B;oBAC5D,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,IAAI,SAAS,GAAG,IAAI,KAAK,EAAY,CAAC;oBACtC,IAAI,QAAQ,GAAG,CAAC,CAAC;oBAGjB,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;wBACZ,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;4BAC7B,IAAI,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;4BAClC,IAAI,SAAS,GAAG,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;4BACrD,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC;gCAAC,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,QAAQ,CAAC,CAAC;4BACpE,GAAG,CAAC,CAAC,IAAI,YAAY,IAAI,OAAO,CAAC,CAAC,CAAC;gCAC/B,IAAI,WAAW,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;gCACxC,EAAE,CAAC,CAAC,YAAY,IAAI,OAAO,CAAC,CAAC,CAAC;oCAC1B,IAAI,QAAQ,GAAG,IAAI,kBAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;oCACrD,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;oCAE/B,IAAI,UAAU,GAAG,CAAC,CAAC;oCACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wCAC1C,IAAI,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;wCAC9B,IAAI,KAAK,GAAG,IAAI,UAAK,EAAE,CAAC;wCACxB,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;wCACpC,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;wCACjF,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;wCAC/C,UAAU,EAAE,CAAC;oCACjB,CAAC;oCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,GAAG,kBAAa,CAAC,OAAO,CAAC,CAAC,CAAC;gCAE3G,CAAC;gCAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,GAAG,YAAY,CAAC,CAAC,CAAC;oCACrC,IAAI,QAAQ,GAAG,IAAI,uBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;oCAC1D,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;oCAE/B,IAAI,UAAU,GAAG,CAAC,CAAC;oCACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wCAC1C,IAAI,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;wCAC9B,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;oCAClE,CAAC;oCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;gCACjF,CAAC;gCAAC,IAAI;oCACF,MAAM,IAAI,KAAK,CAAC,oCAAoC,GAAG,YAAY,GAAG,IAAI,GAAG,QAAQ,GAAG,GAAG,CAAC,CAAC;4BACrG,CAAC;wBACL,CAAC;oBACL,CAAC;oBAGD,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;wBACZ,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;4BAC7B,IAAI,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;4BAClC,IAAI,SAAS,GAAG,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;4BACrD,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC;gCAAC,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,QAAQ,CAAC,CAAC;4BACpE,GAAG,CAAC,CAAC,IAAI,YAAY,IAAI,OAAO,CAAC,CAAC,CAAC;gCAC/B,IAAI,WAAW,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;gCACxC,EAAE,CAAC,CAAC,YAAY,KAAK,QAAQ,CAAC,CAAC,CAAC;oCAC5B,IAAI,QAAQ,GAAG,IAAI,mBAAc,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;oCACtD,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;oCAE/B,IAAI,UAAU,GAAG,CAAC,CAAC;oCACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wCAC1C,IAAI,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;wCAC9B,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;wCAC7D,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;wCAC/C,UAAU,EAAE,CAAC;oCACjB,CAAC;oCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,GAAG,mBAAc,CAAC,OAAO,CAAC,CAAC,CAAC;gCAE5G,CAAC;gCAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,KAAK,WAAW,IAAI,YAAY,KAAK,OAAO,IAAI,YAAY,KAAK,OAAO,CAAC,CAAC,CAAC;oCAC9F,IAAI,QAAQ,GAAsB,IAAI,CAAC;oCACvC,IAAI,aAAa,GAAG,CAAC,CAAC;oCACtB,EAAE,CAAC,CAAC,YAAY,KAAK,OAAO,CAAC;wCACzB,QAAQ,GAAG,IAAI,kBAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;oCACrD,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,KAAK,OAAO,CAAC;wCAC9B,QAAQ,GAAG,IAAI,kBAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;oCACrD,IAAI,CAAC,CAAC;wCACF,QAAQ,GAAG,IAAI,sBAAiB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;wCACrD,aAAa,GAAG,KAAK,CAAC;oCAC1B,CAAC;oCACD,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;oCAE/B,IAAI,UAAU,GAAG,CAAC,CAAC;oCACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wCAC1C,IAAI,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;wCAC9B,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;wCAC7E,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,GAAG,aAAa,CAAC,CAAC;wCACnF,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;wCAC/C,UAAU,EAAE,CAAC;oCACjB,CAAC;oCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,GAAG,sBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC;gCAE/G,CAAC;gCAAC,IAAI;oCACF,MAAM,IAAI,KAAK,CAAC,oCAAoC,GAAG,YAAY,GAAG,IAAI,GAAG,QAAQ,GAAG,GAAG,CAAC,CAAC;4BACrG,CAAC;wBACL,CAAC;oBACL,CAAC;oBAGD,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;wBACT,GAAG,CAAC,CAAC,IAAI,cAAc,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;4BAChC,IAAI,aAAa,GAAG,GAAG,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC;4BAC3C,IAAI,UAAU,GAAG,YAAY,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;4BAC/D,IAAI,QAAQ,GAAG,IAAI,yBAAoB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;4BAC9D,QAAQ,CAAC,iBAAiB,GAAG,YAAY,CAAC,aAAa,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;4BAC5E,IAAI,UAAU,GAAG,CAAC,CAAC;4BACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gCAC5C,IAAI,QAAQ,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;gCAChC,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,EAC1E,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,cAAc,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gCAC5D,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;gCAC/C,UAAU,EAAE,CAAC;4BACjB,CAAC;4BACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;4BACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,GAAG,yBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC;wBAClH,CAAC;oBACL,CAAC;oBAGD,EAAE,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;wBAChB,GAAG,CAAC,CAAC,IAAI,cAAc,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;4BACvC,IAAI,aAAa,GAAG,GAAG,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;4BAClD,IAAI,UAAU,GAAG,YAAY,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC;4BACtE,IAAI,QAAQ,GAAG,IAAI,gCAA2B,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;4BACrE,QAAQ,CAAC,wBAAwB,GAAG,YAAY,CAAC,oBAAoB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;4BAC1F,IAAI,UAAU,GAAG,CAAC,CAAC;4BACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gCAC5C,IAAI,QAAQ,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;gCAChC,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,WAAW,EAAE,CAAC,CAAC,EAChF,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,cAAc,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;gCAChI,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;gCAC/C,UAAU,EAAE,CAAC;4BACjB,CAAC;4BACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;4BACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EACxB,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,GAAG,gCAA2B,CAAC,OAAO,CAAC,CAAC,CAAC;wBAC/F,CAAC;oBACL,CAAC;oBAGD,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;wBACZ,GAAG,CAAC,CAAC,IAAI,cAAc,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;4BACnC,IAAI,aAAa,GAAG,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;4BAC9C,IAAI,KAAK,GAAG,YAAY,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC;4BACjE,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;gCAAC,MAAM,IAAI,KAAK,CAAC,6BAA6B,GAAG,cAAc,CAAC,CAAC;4BACjF,IAAI,IAAI,GAAG,YAAY,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;4BAC/C,GAAG,CAAC,CAAC,IAAI,YAAY,IAAI,aAAa,CAAC,CAAC,CAAC;gCACrC,IAAI,WAAW,GAAG,aAAa,CAAC,YAAY,CAAC,CAAC;gCAC9C,EAAE,CAAC,CAAC,YAAY,KAAK,UAAU,IAAI,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC;oCAC5D,IAAI,QAAQ,GAAmC,IAAI,CAAC;oCACpD,IAAI,aAAa,GAAG,CAAC,CAAC;oCACtB,EAAE,CAAC,CAAC,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC;wCAC7B,QAAQ,GAAG,IAAI,kCAA6B,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;wCACjE,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,gBAAW,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,IAAI,gBAAW,CAAC,KAAK,CAAC;4CAAC,aAAa,GAAG,KAAK,CAAC;oCAC/G,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,QAAQ,GAAG,IAAI,mCAA8B,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;wCAClE,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,iBAAY,CAAC,KAAK,CAAC;4CAAC,aAAa,GAAG,KAAK,CAAC;oCACvE,CAAC;oCACD,QAAQ,CAAC,mBAAmB,GAAG,KAAK,CAAC;oCACrC,IAAI,UAAU,GAAG,CAAC,CAAC;oCACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wCAC1C,IAAI,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;wCAC9B,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,EAAE,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC;wCACvG,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;wCAC/C,UAAU,EAAE,CAAC;oCACjB,CAAC;oCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EACxB,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,GAAG,mCAA8B,CAAC,OAAO,CAAC,CAAC,CAAC;gCAClG,CAAC;gCAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,KAAK,KAAK,CAAC,CAAC,CAAC;oCAChC,IAAI,QAAQ,GAAG,IAAI,8BAAyB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;oCACjE,QAAQ,CAAC,mBAAmB,GAAG,KAAK,CAAC;oCACrC,IAAI,UAAU,GAAG,CAAC,CAAC;oCACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wCAC1C,IAAI,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;wCAC9B,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,WAAW,EAAE,CAAC,CAAC,EAChF,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;wCAChD,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;wCAC/C,UAAU,EAAE,CAAC;oCACjB,CAAC;oCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EACxB,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,GAAG,8BAAyB,CAAC,OAAO,CAAC,CAAC,CAAC;gCAC7F,CAAC;4BACL,CAAC;wBACL,CAAC;oBACL,CAAC;oBAGD,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;wBACb,GAAG,CAAC,CAAC,IAAI,UAAU,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;4BAChC,IAAI,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;4BACvC,IAAI,IAAI,GAAG,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;4BAC7C,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;gCAAC,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,UAAU,CAAC,CAAC;4BACnE,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,SAAS,CAAC,CAAC,CAAC;gCAC7B,IAAI,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;gCAClC,IAAI,SAAS,GAAG,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gCACrD,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC;oCAAC,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;gCACxE,GAAG,CAAC,CAAC,IAAI,YAAY,IAAI,OAAO,CAAC,CAAC,CAAC;oCAC/B,IAAI,WAAW,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;oCACxC,IAAI,UAAU,GAAqB,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;oCAC/E,EAAE,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC;wCAAC,MAAM,IAAI,KAAK,CAAC,+BAA+B,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;oCAC5F,IAAI,QAAQ,GAAG,UAAU,CAAC,KAAK,IAAI,IAAI,CAAC;oCACxC,IAAI,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;oCACnC,IAAI,YAAY,GAAG,QAAQ,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC;oCAExE,IAAI,QAAQ,GAAG,IAAI,mBAAc,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;oCACtD,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;oCAC/B,QAAQ,CAAC,UAAU,GAAG,UAAU,CAAC;oCAEjC,IAAI,UAAU,GAAG,CAAC,CAAC;oCACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wCAC1C,IAAI,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;wCAC9B,IAAI,MAAM,SAAmB,CAAC;wCAC9B,IAAI,aAAa,GAAkB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;wCAC7E,EAAE,CAAC,CAAC,aAAa,IAAI,IAAI,CAAC;4CACtB,MAAM,GAAG,QAAQ,GAAG,UAAK,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC;wCACrE,IAAI,CAAC,CAAC;4CACF,MAAM,GAAG,UAAK,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;4CAC3C,IAAI,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;4CACzD,UAAK,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC;4CACvE,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;gDACb,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oDACxD,MAAM,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC;4CAC3B,CAAC;4CACD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gDACZ,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE;oDACjC,MAAM,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC;4CACjC,CAAC;wCACL,CAAC;wCAED,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;wCACrD,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;wCAC/C,UAAU,EAAE,CAAC;oCACjB,CAAC;oCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;gCACjF,CAAC;4BACL,CAAC;wBACL,CAAC;oBACL,CAAC;oBAGD,IAAI,aAAa,GAAG,GAAG,CAAC,SAAS,CAAC;oBAClC,EAAE,CAAC,CAAC,aAAa,IAAI,IAAI,CAAC;wBAAC,aAAa,GAAG,GAAG,CAAC,SAAS,CAAC;oBACzD,EAAE,CAAC,CAAC,aAAa,IAAI,IAAI,CAAC,CAAC,CAAC;wBACxB,IAAI,QAAQ,GAAG,IAAI,sBAAiB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;wBAC3D,IAAI,SAAS,GAAG,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC;wBAC1C,IAAI,UAAU,GAAG,CAAC,CAAC;wBACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;4BAC5C,IAAI,YAAY,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;4BACpC,IAAI,SAAS,GAAkB,IAAI,CAAC;4BACpC,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;4BAC3D,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;gCAClB,SAAS,GAAG,UAAK,CAAC,QAAQ,CAAS,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;gCAClD,IAAI,SAAS,GAAG,UAAK,CAAC,QAAQ,CAAS,SAAS,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gCACtE,IAAI,aAAa,GAAG,CAAC,EAAE,cAAc,GAAG,CAAC,CAAC;gCAC1C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oCACtC,IAAI,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;oCAC3B,IAAI,SAAS,GAAG,YAAY,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;oCAC3D,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC;wCAAC,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;oCAE1E,OAAO,aAAa,IAAI,SAAS;wCAC7B,SAAS,CAAC,cAAc,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC;oCAElD,SAAS,CAAC,aAAa,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,aAAa,EAAE,CAAC;gCAClE,CAAC;gCAED,OAAO,aAAa,GAAG,SAAS;oCAC5B,SAAS,CAAC,cAAc,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC;gCAElD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,SAAS,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;oCACnC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;wCAAC,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,EAAE,cAAc,CAAC,CAAC;4BAC3E,CAAC;4BACD,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;wBAClE,CAAC;wBACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wBACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;oBACjF,CAAC;oBAGD,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;wBACb,IAAI,QAAQ,GAAG,IAAI,kBAAa,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;wBACpD,IAAI,UAAU,GAAG,CAAC,CAAC;wBACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;4BACzC,IAAI,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;4BAC7B,IAAI,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;4BACtD,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC;gCAAC,MAAM,IAAI,KAAK,CAAC,mBAAmB,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;4BAC5E,IAAI,OAAK,GAAG,IAAI,UAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;4BAChD,OAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC;4BACpE,OAAK,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC;4BAC1E,OAAK,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC,WAAW,CAAC,CAAC;4BAC7E,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,OAAK,CAAC,CAAC;wBAC3C,CAAC;wBACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wBACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;oBACjF,CAAC;oBAED,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;wBAClB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;oBACtE,CAAC;oBAED,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,cAAS,CAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;gBAC3E,CAAC;gBAED,gCAAS,GAAT,UAAU,GAAQ,EAAE,QAAuB,EAAE,UAAkB;oBAC3D,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC;wBAAC,MAAM,CAAC;oBACvB,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,KAAK,SAAS,CAAC;wBACxB,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;oBACpC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,gBAAgB,CAAC,CAAC,CAAC;wBACtE,IAAI,KAAK,GAAkB,GAAG,CAAC,KAAK,CAAC;wBACrC,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC1E,CAAC;gBACL,CAAC;gBAED,+BAAQ,GAAR,UAAS,GAAQ,EAAE,IAAY,EAAE,YAAiB;oBAC9C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC;gBAC9D,CAAC;gBAEM,gCAAmB,GAA1B,UAA2B,GAAW;oBAClC,EAAE,CAAC,CAAC,GAAG,KAAK,UAAU,CAAC;wBAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;oBACzD,EAAE,CAAC,CAAC,GAAG,KAAK,UAAU,CAAC;wBAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC;oBACpD,EAAE,CAAC,CAAC,GAAG,KAAK,QAAQ,CAAC;wBAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;oBACrD,EAAE,CAAC,CAAC,GAAG,KAAK,QAAQ,CAAC;wBAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;oBACrD,MAAM,IAAI,KAAK,CAAC,yBAAuB,GAAK,CAAC,CAAC;gBAClD,CAAC;gBAEM,mCAAsB,GAA7B,UAA8B,GAAW;oBACrC,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;oBACxB,EAAE,CAAC,CAAC,GAAG,IAAI,OAAO,CAAC;wBAAC,MAAM,CAAC,iBAAY,CAAC,KAAK,CAAC;oBAC9C,EAAE,CAAC,CAAC,GAAG,IAAI,SAAS,CAAC;wBAAC,MAAM,CAAC,iBAAY,CAAC,OAAO,CAAC;oBAClD,MAAM,IAAI,KAAK,CAAC,4BAA0B,GAAK,CAAC,CAAC;gBACrD,CAAC;gBAEM,kCAAqB,GAA5B,UAA6B,GAAW;oBACpC,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;oBACxB,EAAE,CAAC,CAAC,GAAG,IAAI,QAAQ,CAAC;wBAAC,MAAM,CAAC,gBAAW,CAAC,MAAM,CAAC;oBAC/C,EAAE,CAAC,CAAC,GAAG,IAAI,OAAO,CAAC;wBAAC,MAAM,CAAC,gBAAW,CAAC,KAAK,CAAC;oBAC7C,EAAE,CAAC,CAAC,GAAG,IAAI,SAAS,CAAC;wBAAC,MAAM,CAAC,gBAAW,CAAC,OAAO,CAAC;oBACjD,MAAM,IAAI,KAAK,CAAC,4BAA0B,GAAK,CAAC,CAAC;gBACrD,CAAC;gBAEM,iCAAoB,GAA3B,UAA4B,GAAW;oBACnC,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;oBACxB,EAAE,CAAC,CAAC,GAAG,IAAI,SAAS,CAAC;wBAAC,MAAM,CAAC,eAAU,CAAC,OAAO,CAAC;oBAChD,EAAE,CAAC,CAAC,GAAG,IAAI,OAAO,CAAC;wBAAC,MAAM,CAAC,eAAU,CAAC,KAAK,CAAC;oBAC5C,EAAE,CAAC,CAAC,GAAG,IAAI,YAAY,CAAC;wBAAC,MAAM,CAAC,eAAU,CAAC,UAAU,CAAC;oBACtD,MAAM,IAAI,KAAK,CAAC,0BAAwB,GAAK,CAAC,CAAC;gBACnD,CAAC;gBAEM,oCAAuB,GAA9B,UAA+B,GAAW;oBACtC,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;oBACxB,EAAE,CAAC,CAAC,GAAG,IAAI,QAAQ,CAAC;wBAAC,MAAM,CAAC,kBAAa,CAAC,MAAM,CAAC;oBACjD,EAAE,CAAC,CAAC,GAAG,IAAI,iBAAiB,CAAC;wBAAC,MAAM,CAAC,kBAAa,CAAC,eAAe,CAAC;oBACnE,EAAE,CAAC,CAAC,GAAG,IAAI,wBAAwB,CAAC;wBAAC,MAAM,CAAC,kBAAa,CAAC,sBAAsB,CAAC;oBACjF,EAAE,CAAC,CAAC,GAAG,IAAI,SAAS,CAAC;wBAAC,MAAM,CAAC,kBAAa,CAAC,OAAO,CAAC;oBACnD,EAAE,CAAC,CAAC,GAAG,IAAI,qBAAqB,CAAC;wBAAC,MAAM,CAAC,kBAAa,CAAC,mBAAmB,CAAC;oBAC3E,MAAM,IAAI,KAAK,CAAC,6BAA2B,GAAK,CAAC,CAAC;gBACtD,CAAC;gBAEM,gCAAmB,GAA1B,UAA2B,eAAwB,EAAE,YAAqB;oBACtE,OAAO,CAAC,GAAG,CAAC,oMAAoM,CAAC,CAAC;oBAClN,EAAE,CAAC,CAAC,eAAe,IAAI,YAAY,CAAC,CAAC,CAAC;wBAClC,MAAM,CAAC,kBAAa,CAAC,MAAM,CAAC;oBAChC,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;wBACzB,MAAM,CAAC,kBAAa,CAAC,mBAAmB,CAAC;oBAC7C,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;wBACtB,MAAM,CAAC,kBAAa,CAAC,sBAAsB,CAAC;oBAChD,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,kBAAa,CAAC,eAAe,CAAC;oBACzC,CAAC;gBACL,CAAC;gBACL,mBAAC;YAAD,CAAC,AAtsBD,IAssBC;YAtsBY,iBAAY,eAssBxB,CAAA;YAED;gBAMI,oBAAY,IAAoB,EAAE,IAAY,EAAE,SAAiB,EAAE,MAAc;oBAC7E,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;oBAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACzB,CAAC;gBACL,iBAAC;YAAD,CAAC,AAZD,IAYC;QACL,CAAC,EAttBiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QAstBrB;IAAD,CAAC,EAttBW,KAAK,GAAL,UAAK,KAAL,UAAK,QAstBhB;AAAD,CAAC,EAttBM,IAAI,KAAJ,IAAI,QAstBV;ACttBD,IAAO,IAAI,CA6CV;AA7CD,WAAO,IAAI;IAAC,IAAA,KAAK,CA6ChB;IA7CW,WAAA,KAAK;QAAC,IAAA,IAAI,CA6CrB;QA7CiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAII,cAAY,IAAY;oBAFxB,gBAAW,GAAG,IAAI,KAAK,EAAmB,CAAC;oBAGvC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;oBAC1D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACrB,CAAC;gBAED,4BAAa,GAAb,UAAc,SAAiB,EAAE,IAAY,EAAE,UAAsB;oBACjE,EAAE,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;oBACtE,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;oBACnC,EAAE,CAAC,CAAC,SAAS,IAAI,WAAW,CAAC,MAAM,CAAC;wBAAC,WAAW,CAAC,MAAM,GAAG,SAAS,GAAG,CAAC,CAAC;oBACxE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;wBAAC,WAAW,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;oBACzD,WAAW,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC;gBAC9C,CAAC;gBAGD,4BAAa,GAAb,UAAc,SAAiB,EAAE,IAAY;oBACzC,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;oBAC7C,MAAM,CAAC,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;gBAChD,CAAC;gBAGD,wBAAS,GAAT,UAAU,QAAkB,EAAE,OAAa;oBACvC,IAAI,SAAS,GAAG,CAAC,CAAC;oBAClB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC7C,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC7B,IAAI,cAAc,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;wBAC1C,EAAE,CAAC,CAAC,cAAc,IAAI,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;4BAC3D,IAAI,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;4BAChD,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC;gCACzB,IAAI,cAAc,GAAe,UAAU,CAAC,GAAG,CAAC,CAAC;gCACjD,EAAE,CAAC,CAAC,cAAc,IAAI,cAAc,CAAC,CAAC,CAAC;oCACnC,IAAI,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;oCACrD,EAAE,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC;wCAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oCACvD,KAAK,CAAC;gCACV,CAAC;4BACL,CAAC;wBACL,CAAC;wBACD,SAAS,EAAE,CAAC;oBAChB,CAAC;gBACL,CAAC;gBACL,WAAC;YAAD,CAAC,AA3CD,IA2CC;YA3CY,SAAI,OA2ChB,CAAA;QACL,CAAC,EA7CiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QA6CrB;IAAD,CAAC,EA7CW,KAAK,GAAL,UAAK,KAAL,UAAK,QA6ChB;AAAD,CAAC,EA7CM,IAAI,KAAJ,IAAI,QA6CV;AC7CD,IAAO,IAAI,CAiEV;AAjED,WAAO,IAAI;IAAC,IAAA,KAAK,CAiEhB;IAjEW,WAAA,KAAK;QAAC,IAAA,IAAI,CAiErB;QAjEiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAqBI,cAAY,IAAc,EAAE,IAAU;oBAFtC,uBAAkB,GAAG,IAAI,KAAK,EAAU,CAAC;oBAGrC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;oBAC1D,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;oBAC1D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,KAAK,GAAG,IAAI,UAAK,EAAE,CAAC;oBACzB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBAChC,IAAI,CAAC,cAAc,EAAE,CAAC;gBAC1B,CAAC;gBAGD,4BAAa,GAAb;oBACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAC3B,CAAC;gBAID,4BAAa,GAAb,UAAc,UAAsB;oBAChC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,UAAU,CAAC;wBAAC,MAAM,CAAC;oBAC1C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;oBAC7B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;oBAC9C,IAAI,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC;gBACvC,CAAC;gBAED,gCAAiB,GAAjB,UAAkB,IAAY;oBAC1B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;gBACzD,CAAC;gBAGD,gCAAiB,GAAjB;oBACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC;gBACzD,CAAC;gBAED,6BAAc,GAAd;oBACI,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACzC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC;wBACjC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;oBAC3B,IAAI,CAAC,CAAC;wBACF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;wBACvB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;oBACpG,CAAC;gBACL,CAAC;gBACL,WAAC;YAAD,CAAC,AA/DD,IA+DC;YA/DY,SAAI,OA+DhB,CAAA;QACL,CAAC,EAjEiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QAiErB;IAAD,CAAC,EAjEW,KAAK,GAAL,UAAK,KAAL,UAAK,QAiEhB;AAAD,CAAC,EAjEM,IAAI,KAAJ,IAAI,QAiEV;ACjED,IAAO,IAAI,CAkBV;AAlBD,WAAO,IAAI;IAAC,IAAA,KAAK,CAkBhB;IAlBW,WAAA,KAAK;QAAC,IAAA,IAAI,CAkBrB;QAlBiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAQI,kBAAY,KAAa,EAAE,IAAY,EAAE,QAAkB;oBAJ3D,UAAK,GAAG,IAAI,UAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAK1B,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;oBACtD,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;oBAC1D,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAClE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAC7B,CAAC;gBACL,eAAC;YAAD,CAAC,AAhBD,IAgBC;YAhBY,aAAQ,WAgBpB,CAAA;QACL,CAAC,EAlBiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QAkBrB;IAAD,CAAC,EAlBW,KAAK,GAAL,UAAK,KAAL,UAAK,QAkBhB;AAAD,CAAC,EAlBM,IAAI,KAAJ,IAAI,QAkBV;AClBD,IAAO,IAAI,CA0JV;AA1JD,WAAO,IAAI;IAAC,IAAA,KAAK,CA0JhB;IA1JW,WAAA,KAAK;QAAC,IAAA,IAAI,CA0JrB;QA1JiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAGI,iBAAa,KAAuB;oBAChC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;gBACxB,CAAC;gBAED,0BAAQ,GAAR;oBACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBACvB,CAAC;gBAOa,wBAAgB,GAA9B,UAAgC,IAAY;oBACxC,MAAM,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;wBACzB,KAAK,SAAS,EAAE,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC;wBAC7C,KAAK,QAAQ,EAAE,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC;wBAC3C,KAAK,QAAQ,EAAE,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC;wBAC3C,KAAK,sBAAsB,EAAE,MAAM,CAAC,aAAa,CAAC,oBAAoB,CAAC;wBACvE,KAAK,qBAAqB,EAAE,MAAM,CAAC,aAAa,CAAC,mBAAmB,CAAC;wBACrE,KAAK,qBAAqB,EAAE,MAAM,CAAC,aAAa,CAAC,mBAAmB,CAAC;wBACrE,KAAK,oBAAoB,EAAE,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC;wBACnE,SAAS,MAAM,IAAI,KAAK,CAAC,4BAA0B,IAAM,CAAC,CAAC;oBAC/D,CAAC;gBACL,CAAC;gBAEa,sBAAc,GAA5B,UAA8B,IAAY;oBACtC,MAAM,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;wBACzB,KAAK,gBAAgB,EAAE,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC;wBACzD,KAAK,aAAa,EAAE,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC;wBACnD,KAAK,QAAQ,EAAE,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC;wBACzC,SAAS,MAAM,IAAI,KAAK,CAAC,0BAAwB,IAAM,CAAC,CAAC;oBAC7D,CAAC;gBACL,CAAC;gBACL,cAAC;YAAD,CAAC,AArCD,IAqCC;YArCqB,YAAO,UAqC5B,CAAA;YAED,WAAY,aAAa;gBACrB,0DAAc,CAAA;gBACd,wDAAa,CAAA;gBACb,wDAAa,CAAA;gBACb,oFAA2B,CAAA;gBAC3B,kFAA0B,CAAA;gBAC1B,kFAA0B,CAAA;gBAC1B,gFAAyB,CAAA;YAC7B,CAAC,EARW,kBAAa,KAAb,kBAAa,QAQxB;YARD,IAAY,aAAa,GAAb,kBAQX,CAAA;YAED,WAAY,WAAW;gBACnB,qEAAsB,CAAA;gBACtB,+DAAmB,CAAA;gBACnB,qDAAc,CAAA;YAClB,CAAC,EAJW,gBAAW,KAAX,gBAAW,QAItB;YAJD,IAAY,WAAW,GAAX,gBAIX,CAAA;YAED;gBAAA;oBAII,SAAI,GAAmB,IAAI,CAAC;gBA6FhC,CAAC;gBA3FG,sBAAI,gCAAK;yBAAT;wBACI,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;wBACzB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;4BACzB,MAAM,CAAE,GAAW,CAAC,IAAI,CAAC,KAAK,CAAC;wBACnC,CAAC;wBACD,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;4BACX,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;wBAC1B,CAAC;wBACD,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;oBAC1B,CAAC;;;mBAAA;gBAED,sBAAI,iCAAM;yBAAV;wBACI,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;wBACzB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;4BACzB,MAAM,CAAE,GAAW,CAAC,IAAI,CAAC,MAAM,CAAC;wBACpC,CAAC;wBACD,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;4BACX,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;wBAC3B,CAAC;wBACD,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;oBAC3B,CAAC;;;mBAAA;gBAED,sBAAI,4BAAC;yBAAL;wBACI,MAAM,CAAE,IAAI,CAAC,OAAe,CAAC,IAAI,CAAC,EAAE,CAAC;oBACzC,CAAC;;;mBAAA;gBAED,sBAAI,4BAAC;yBAAL;wBACI,MAAM,CAAE,IAAI,CAAC,OAAe,CAAC,IAAI,CAAC,EAAE,CAAC;oBACzC,CAAC;;;mBAAA;gBAED,sBAAI,6BAAE;yBAAN;wBACI,MAAM,CAAE,IAAI,CAAC,OAAe,CAAC,IAAI,CAAC,EAAE,CAAC;oBACzC,CAAC;;;mBAAA;gBAED,sBAAI,6BAAE;yBAAN;wBACI,MAAM,CAAE,IAAI,CAAC,OAAe,CAAC,IAAI,CAAC,EAAE,CAAC;oBACzC,CAAC;;;mBAAA;gBAED,sBAAI,kCAAO;yBAAX;wBACI,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;wBACzB,MAAM,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;oBACrC,CAAC;;;mBAAA;gBAED,sBAAI,kCAAO;yBAAX;wBACI,OAAO,CAAC,IAAI,CAAC,wJAAwJ,CAAC,CAAC;wBACvK,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;oBAC7B,CAAC;;;mBAAA;gBAED,sBAAI,sCAAW;yBAAf;wBACI,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;wBACzB,MAAM,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;oBACrC,CAAC;;;mBAAA;gBAED,sBAAI,uCAAY;yBAAhB;wBACI,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;wBACvB,MAAM,CAAC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBAC3E,CAAC;;;mBAAA;gBAED,sBAAI,wCAAa;yBAAjB;wBACI,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;wBACvB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;4BACzB,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;gCACX,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;4BAC1B,CAAC;4BACD,MAAM,CAAE,GAAW,CAAC,IAAI,CAAC,KAAK,CAAC;wBACnC,CAAC;wBACD,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;oBAC1B,CAAC;;;mBAAA;gBAED,sBAAI,yCAAc;yBAAlB;wBACI,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;wBACzB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;4BACzB,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;gCACX,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;4BAC3B,CAAC;4BACD,MAAM,CAAE,GAAW,CAAC,IAAI,CAAC,MAAM,CAAC;wBACpC,CAAC;wBACD,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;oBAC3B,CAAC;;;mBAAA;gBAED,sBAAI,4BAAC;yBAAL;wBACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;oBAChC,CAAC;;;mBAAA;gBAED,sBAAI,4BAAC;yBAAL;wBACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;oBAChC,CAAC;;;mBAAA;gBAED,sBAAI,iCAAM;yBAAV;wBACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC;oBACrC,CAAC;;;mBAAA;gBACL,oBAAC;YAAD,CAAC,AAjGD,IAiGC;YAjGY,kBAAa,gBAiGzB,CAAA;QACL,CAAC,EA1JiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QA0JrB;IAAD,CAAC,EA1JW,KAAK,GAAL,UAAK,KAAL,UAAK,QA0JhB;AAAD,CAAC,EA1JM,IAAI,KAAJ,IAAI,QA0JV;AC1JD,IAAO,IAAI,CA+QV;AA/QD,WAAO,IAAI;IAAC,IAAA,KAAK,CA+QhB;IA/QW,WAAA,KAAK;QAAC,IAAA,IAAI,CA+QrB;QA/QiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAII,sBAAY,SAAiB,EAAE,aAAoF,EAAE,QAAoC;oBAHzJ,UAAK,GAAG,IAAI,KAAK,EAAoB,CAAC;oBACtC,YAAO,GAAG,IAAI,KAAK,EAAsB,CAAC;oBAGtC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBACZ,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;oBAC3D,CAAC;gBACL,CAAC;gBAED,iCAAU,GAAV,UAAW,IAAY,EAAE,OAAqB;oBAC1C,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,IAAI,IAAI,GAAqB,IAAI,CAAC;oBAClC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBACpC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,KAAK,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;4BAC/C,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;4BAChB,KAAK,CAAC;wBACV,CAAC;oBACL,CAAC;oBACD,EAAE,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;wBAChB,IAAI,GAAG,IAAI,gBAAgB,EAAE,CAAC;wBAC9B,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC;wBAC1B,IAAI,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;wBACtC,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,SAAS,CAAC;wBACnC,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,UAAU,CAAC;wBACrC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;wBAE/B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,GAAG,kBAAa,CAAC,OAAO,CAAC;wBACxD,IAAI,CAAC,KAAK,GAAG,gBAAW,CAAC,WAAW,CAAC;wBACrC,IAAI,CAAC,KAAK,GAAG,gBAAW,CAAC,WAAW,CAAC;wBACrC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACrB,CAAC;oBACD,IAAI,MAAM,GAAG,IAAI,kBAAkB,EAAE,CAAC;oBACtC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;oBACnB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;oBACnB,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;oBACzB,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;oBAClB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAC1B,MAAM,CAAC,MAAM,CAAC;gBAClB,CAAC;gBAED,qCAAc,GAAd,UAAe,QAA2B,EAAE,cAAuB;oBAC/D,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,QAAQ,CAAC,CAAC,CAAC;wBACvB,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BAC/B,IAAI,CAAC,UAAU,CAAC,cAAc,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;wBAC1H,CAAC;oBACL,CAAC;gBACL,CAAC;gBAEM,oCAAa,GAApB,UAAqB,SAAiB,EAAE,aAAqF,EAAE,QAAoC;oBAC/J,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;gBACzD,CAAC;gBAEO,2BAAI,GAAZ,UAAa,SAAiB,EAAE,aAAoF,EAAE,QAAoC;oBAA1J,iBA+HC;oBA9HG,EAAE,CAAC,CAAC,aAAa,IAAI,IAAI,CAAC;wBACtB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;oBAErD,IAAI,MAAM,GAAG,IAAI,kBAAkB,CAAC,SAAS,CAAC,CAAC;oBAC/C,IAAI,KAAK,GAAG,IAAI,KAAK,CAAS,CAAC,CAAC,CAAC;oBACjC,IAAI,IAAI,GAAqB,IAAI,CAAC;oBAElC,IAAI,aAAa,GAAG;wBAChB,OAAO,IAAI,EAAE,CAAC;4BACV,IAAI,IAAI,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;4BAC7B,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;gCACf,MAAM,CAAC,QAAQ,IAAI,QAAQ,CAAC,KAAI,CAAC,CAAC;4BACtC,CAAC;4BACD,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;4BACnB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC;gCACjB,IAAI,GAAG,IAAI,CAAC;4BAChB,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gCACb,IAAI,GAAG,IAAI,gBAAgB,EAAE,CAAC;gCAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gCAEjB,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oCAC/B,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oCAChC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oCACjC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gCAC5B,CAAC;gCAGD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gCACxB,IAAI,CAAC,SAAS,GAAG,YAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gCACpD,IAAI,CAAC,SAAS,GAAG,YAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gCAEpD,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;gCACnC,IAAI,CAAC,KAAK,GAAG,gBAAW,CAAC,WAAW,CAAC;gCACrC,IAAI,CAAC,KAAK,GAAG,gBAAW,CAAC,WAAW,CAAC;gCACrC,EAAE,CAAC,CAAC,SAAS,IAAI,GAAG,CAAC;oCACjB,IAAI,CAAC,KAAK,GAAG,gBAAW,CAAC,MAAM,CAAC;gCACpC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,IAAI,GAAG,CAAC;oCACtB,IAAI,CAAC,KAAK,GAAG,gBAAW,CAAC,MAAM,CAAC;gCACpC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC;oCACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,gBAAW,CAAC,MAAM,CAAC;gCAEjD,aAAa,CAAC,IAAI,EAAE,UAAC,OAAyB;oCAC1C,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC;oCAC3B,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;wCACrB,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;wCAC3B,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oCACjC,CAAC;oCACD,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oCACtB,IAAI,CAAC,UAAU,EAAE,CAAC;oCAElB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;wCAC9B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC;wCAC/B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC;wCACjC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;4CAC9B,OAAO,CAAC,GAAG,CAAC,yBAAyB,GAAG,IAAI,CAAC,IAAI,GAAG,kIAAkI,CAAC,CAAC;wCAC5L,CAAC;oCACL,CAAC;oCACD,aAAa,EAAE,CAAC;gCACpB,CAAC,CAAC,CAAC;gCACH,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gCACtB,KAAK,CAAC;4BACV,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,IAAI,MAAM,GAAuB,IAAI,kBAAkB,EAAE,CAAC;gCAC1D,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;gCACnB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;gCAEnB,IAAI,MAAM,GAAW,MAAM,CAAC,SAAS,EAAE,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;gCAE1D,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gCACxB,IAAI,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gCAC3B,IAAI,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gCAE3B,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gCACxB,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gCAC/B,IAAI,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gCAEhC,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;gCAC7C,CAAC,IAAI,UAAU,CAAC;gCAChB,CAAC,IAAI,UAAU,CAAC;gCAChB,KAAK,IAAI,UAAU,CAAC;gCACpB,MAAM,IAAI,UAAU,CAAC;gCAErB,IAAI,KAAK,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,KAAK,EAAE,MAAM,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC;gCAEvF,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oCAG/B,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wCAG/B,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;oCAC5B,CAAC;gCACL,CAAC;gCAED,IAAI,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;gCACpD,IAAI,cAAc,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;gCACrD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gCACxB,IAAI,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;gCAC9C,IAAI,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;gCAE9C,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC;gCACnE,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,cAAc,GAAG,MAAM,GAAG,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;gCAIzF,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;oCAEzB,MAAM,CAAC,OAAO,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;gCAC1F,CAAC;gCAAC,IAAI,CAAC,CAAC;oCAEJ,IAAI,MAAM,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;oCACrD,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;oCAC1B,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;oCAC3B,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC;oCAC7B,MAAM,CAAC,OAAO,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;gCAC3F,CAAC;gCAED,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;gCAC3C,MAAM,CAAC,OAAe,CAAC,UAAU,EAAE,CAAC;gCAErC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;4BAC9B,CAAC;wBACL,CAAC;oBACL,CAAC,CAAA;oBAED,aAAa,EAAE,CAAC;gBACpB,CAAC;gBAED,iCAAU,GAAV,UAAW,IAAY;oBACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;4BAC/B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;wBAC3B,CAAC;oBACL,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED,8BAAO,GAAP;oBACI,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBACzC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;oBACxC,CAAC;gBACL,CAAC;gBACL,mBAAC;YAAD,CAAC,AApMD,IAoMC;YApMY,iBAAY,eAoMxB,CAAA;YAED;gBAII,4BAAY,IAAY;oBAFxB,UAAK,GAAW,CAAC,CAAC;oBAGd,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;gBAC1C,CAAC;gBAED,qCAAQ,GAAR;oBACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;wBAChC,MAAM,CAAC,IAAI,CAAC;oBAChB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;gBACpC,CAAC;gBAED,sCAAS,GAAT;oBACI,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;oBAC3B,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBAC9B,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;wBACZ,MAAM,IAAI,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,CAAC;oBAC7C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;gBAC5C,CAAC;gBAED,sCAAS,GAAT,UAAU,KAAoB;oBAC1B,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;oBAC3B,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBAC9B,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;wBACZ,MAAM,IAAI,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,CAAC;oBAC7C,IAAI,CAAC,GAAG,CAAC,EAAE,SAAS,GAAG,KAAK,GAAG,CAAC,CAAC;oBACjC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBAChB,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;wBACzC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;4BAAC,KAAK,CAAC;wBACvB,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,GAAG,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC;wBAC5D,SAAS,GAAG,KAAK,GAAG,CAAC,CAAC;oBAC1B,CAAC;oBACD,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC;oBAC5C,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACL,yBAAC;YAAD,CAAC,AArCD,IAqCC;YAED;gBAAA;gBA0BA,CAAC;gBAhBU,qCAAU,GAAjB;oBACI,IAAI,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC;oBAC3B,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;oBAC5B,EAAE,CAAC,CAAC,MAAM,IAAI,kBAAa,CAAC,MAAM,CAAC,CAAC,CAAC;wBACjC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;oBAC5C,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,kBAAa,CAAC,OAAO,CAAC,CAAC,CAAC;wBACjD,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;oBAC7C,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC;wBAClB,EAAE,CAAC,CAAC,MAAM,IAAI,kBAAa,CAAC,oBAAoB,CAAC,CAAC,CAAC;4BAC/C,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;wBAC7C,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;wBAC5C,CAAC;oBACL,CAAC;gBACL,CAAC;gBACL,uBAAC;YAAD,CAAC,AA1BD,IA0BC;YA1BY,qBAAgB,mBA0B5B,CAAA;YAED;gBAAwC,sCAAa;gBAArD;oBAAwC,8BAAa;gBAIrD,CAAC;gBAAD,yBAAC;YAAD,CAAC,AAJD,CAAwC,kBAAa,GAIpD;YAJY,uBAAkB,qBAI9B,CAAA;QACL,CAAC,EA/QiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QA+QrB;IAAD,CAAC,EA/QW,KAAK,GAAL,UAAK,KAAL,UAAK,QA+QhB;AAAD,CAAC,EA/QM,IAAI,KAAJ,IAAI,QA+QV;AC/QD,IAAO,IAAI,CAoGV;AApGD,WAAO,IAAI;IAAC,IAAA,KAAK,CAoGhB;IApGW,WAAA,KAAK;QAAC,IAAA,IAAI,CAoGrB;QApGiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAUI,6BAAY,IAA6B,EAAE,QAAkB;oBAN7D,cAAS,GAAG,CAAC,CAAC;oBACd,iBAAY,GAAG,CAAC,CAAC;oBACjB,aAAQ,GAAG,CAAC,CAAC;oBACb,aAAQ,GAAG,CAAC,CAAC;oBACb,SAAI,GAAG,IAAI,YAAO,EAAE,CAAC;oBAGjB,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;oBAC1D,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAClE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBAChC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;oBACtC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC9B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAQ,CAAC;oBAC/B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;wBACtC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC3D,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACtD,CAAC;gBAED,mCAAK,GAAL;oBACI,IAAI,CAAC,MAAM,EAAE,CAAC;gBAClB,CAAC;gBAED,oCAAM,GAAN;oBACI,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,YAAY,GAAG,IAAI,CAAC,YAAY,EAAE,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBACrH,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzB,IAAI,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC3F,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC3C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wBACpB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;wBACpB,IAAI,QAAQ,GAAG,KAAK,CAAC;wBAErB,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC,CAAC;4BACjB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BACvC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,cAAS,CAAC,MAAM,CAAC;4BAC5F,EAAE,CAAC,CAAC,CAAC,GAAG,cAAS,CAAC,EAAE,CAAC;gCACjB,CAAC,IAAI,cAAS,CAAC,GAAG,CAAC;4BACvB,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,cAAS,CAAC,EAAE,CAAC;gCACvB,CAAC,IAAI,cAAS,CAAC,GAAG,CAAC;4BACvB,CAAC,IAAI,SAAS,CAAC;4BACf,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BACzC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;4BACxB,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;4BACxB,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;4BACxB,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;4BACxB,QAAQ,GAAG,IAAI,CAAC;wBACpB,CAAC;wBAED,EAAE,CAAC,CAAC,YAAY,IAAI,CAAC,CAAC,CAAC,CAAC;4BACpB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;4BACrB,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;4BACpE,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC;4BACvC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC;4BACvC,QAAQ,GAAG,IAAI,CAAC;wBACpB,CAAC;wBAED,EAAE,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;4BACf,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;4BACzC,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;4BACtC,EAAE,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;gCAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;4BAC5E,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;4BACT,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;4BACT,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;4BACrC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;4BAClC,EAAE,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;gCAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;4BAC5E,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;4BACT,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;4BACT,QAAQ,GAAG,IAAI,CAAC;wBACpB,CAAC;wBAED,EAAE,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;4BACf,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BACrB,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;4BAC1B,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC9E,EAAE,CAAC,CAAC,CAAC,GAAG,cAAS,CAAC,EAAE,CAAC;gCACjB,CAAC,IAAI,cAAS,CAAC,GAAG,CAAC;4BACvB,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,cAAS,CAAC,EAAE,CAAC;gCACvB,CAAC,IAAI,cAAS,CAAC,GAAG,CAAC;4BACvB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,GAAG,cAAS,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;4BACpE,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;4BACjC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;4BACtB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;4BACtB,QAAQ,GAAG,IAAI,CAAC;wBACpB,CAAC;wBAED,EAAE,CAAC,CAAC,QAAQ,CAAC;4BAAC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;oBAC5C,CAAC;gBACL,CAAC;gBAED,sCAAQ,GAAR;oBACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;gBAC3B,CAAC;gBACL,0BAAC;YAAD,CAAC,AAlGD,IAkGC;YAlGY,wBAAmB,sBAkG/B,CAAA;QACL,CAAC,EApGiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QAoGrB;IAAD,CAAC,EApGW,KAAK,GAAL,UAAK,KAAL,UAAK,QAoGhB;AAAD,CAAC,EApGM,IAAI,KAAJ,IAAI,QAoGV;ACpGD,IAAO,IAAI,CAsBV;AAtBD,WAAO,IAAI;IAAC,IAAA,KAAK,CAsBhB;IAtBW,WAAA,KAAK;QAAC,IAAA,IAAI,CAsBrB;QAtBiB,WAAA,IAAI,EAAC,CAAC;YACpB;gBAgBI,iCAAY,IAAY;oBAdxB,UAAK,GAAG,CAAC,CAAC;oBACV,UAAK,GAAG,IAAI,KAAK,EAAY,CAAC;oBAE9B,cAAS,GAAG,CAAC,CAAC;oBACd,iBAAY,GAAG,CAAC,CAAC;oBACjB,aAAQ,GAAG,CAAC,CAAC;oBACb,aAAQ,GAAG,CAAC,CAAC;oBACb,mBAAc,GAAG,CAAC,CAAC;oBACnB,YAAO,GAAG,CAAC,CAAC;oBACZ,YAAO,GAAG,CAAC,CAAC;oBACZ,iBAAY,GAAG,CAAC,CAAC;oBACjB,iBAAY,GAAG,CAAC,CAAC;oBACjB,iBAAY,GAAG,CAAC,CAAC;oBAGb,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;wBAAC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;oBAC1D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACrB,CAAC;gBACL,8BAAC;YAAD,CAAC,AApBD,IAoBC;YApBY,4BAAuB,0BAoBnC,CAAA;QACL,CAAC,EAtBiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QAsBrB;IAAD,CAAC,EAtBW,KAAK,GAAL,UAAK,KAAL,UAAK,QAsBhB;AAAD,CAAC,EAtBM,IAAI,KAAJ,IAAI,QAsBV;AEvBD,IAAO,IAAI,CA6QV;AA7QD,WAAO,IAAI;IAAC,IAAA,KAAK,CA6QhB;IA7QW,WAAA,KAAK;QAAC,IAAA,IAAI,CA6QrB;QA7QiB,WAAA,IAAI,EAAC,CAAC;YAKvB;gBAAA;oBACC,UAAK,GAAG,IAAI,KAAK,EAAU,CAAC;gBAmB7B,CAAC;gBAjBA,oBAAG,GAAH,UAAK,KAAa;oBACjB,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;oBACpC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;oBAClC,MAAM,CAAC,CAAC,QAAQ,CAAC;gBAClB,CAAC;gBAED,yBAAQ,GAAR,UAAU,KAAa;oBACtB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC;gBAC3C,CAAC;gBAED,uBAAM,GAAN,UAAQ,KAAa;oBACpB,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;gBACnC,CAAC;gBAED,sBAAK,GAAL;oBACC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;gBACvB,CAAC;gBACF,aAAC;YAAD,CAAC,AApBD,IAoBC;YApBY,WAAM,SAoBlB,CAAA;YAMD;gBAOC,eAAoB,CAAa,EAAS,CAAa,EAAS,CAAa,EAAS,CAAa;oBAAtF,iBAAoB,GAApB,KAAoB;oBAAE,iBAAoB,GAApB,KAAoB;oBAAE,iBAAoB,GAApB,KAAoB;oBAAE,iBAAoB,GAApB,KAAoB;oBAA/E,MAAC,GAAD,CAAC,CAAY;oBAAS,MAAC,GAAD,CAAC,CAAY;oBAAS,MAAC,GAAD,CAAC,CAAY;oBAAS,MAAC,GAAD,CAAC,CAAY;gBACnG,CAAC;gBAED,mBAAG,GAAH,UAAK,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS;oBAC9C,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;oBACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;oBACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;oBACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;oBACX,IAAI,CAAC,KAAK,EAAE,CAAC;oBACb,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;gBAED,4BAAY,GAAZ,UAAc,CAAQ;oBACrB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACb,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACb,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACb,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACb,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;gBAED,6BAAa,GAAb,UAAe,GAAW;oBACzB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;oBACjD,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;oBAChD,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;oBAChD,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;oBAChD,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,GAAG,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;oBAC1E,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;gBAED,mBAAG,GAAH,UAAK,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS;oBAC9C,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;oBACZ,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;oBACZ,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;oBACZ,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;oBACZ,IAAI,CAAC,KAAK,EAAE,CAAC;oBACb,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;gBAED,qBAAK,GAAL;oBACC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;wBAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;oBAC3B,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;wBAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;oBAEhC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;wBAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;oBAC3B,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;wBAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;oBAEhC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;wBAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;oBAC3B,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;wBAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;oBAEhC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;wBAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;oBAC3B,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;wBAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;oBAChC,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;gBAzDa,WAAK,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC9B,SAAG,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC5B,WAAK,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC9B,UAAI,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC7B,aAAO,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAsD/C,YAAC;YAAD,CAAC,AA3DD,IA2DC;YA3DY,UAAK,QA2DjB,CAAA;YAED;gBAAA;gBAkCA,CAAC;gBA1BO,eAAK,GAAZ,UAAc,KAAa,EAAE,GAAW,EAAE,GAAW;oBACpD,EAAE,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC;wBAAC,MAAM,CAAC,GAAG,CAAC;oBAC5B,EAAE,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC;wBAAC,MAAM,CAAC,GAAG,CAAC;oBAC5B,MAAM,CAAC,KAAK,CAAC;gBACd,CAAC;gBAEM,gBAAM,GAAb,UAAe,OAAe;oBAC7B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;gBAC7C,CAAC;gBAEM,gBAAM,GAAb,UAAe,OAAe;oBAC7B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;gBAC7C,CAAC;gBAEM,gBAAM,GAAb,UAAe,KAAa;oBAC3B,MAAM,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;gBAC3C,CAAC;gBAEM,eAAK,GAAZ,UAAc,CAAS;oBACtB,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC7C,CAAC;gBAEM,cAAI,GAAX,UAAa,CAAS;oBACrB,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC,CAAC;oBACnC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;gBACvB,CAAC;gBAhCM,YAAE,GAAG,SAAS,CAAC;gBACf,aAAG,GAAG,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC;gBACvB,0BAAgB,GAAG,GAAG,GAAG,SAAS,CAAC,EAAE,CAAC;gBACtC,gBAAM,GAAG,SAAS,CAAC,gBAAgB,CAAC;gBACpC,0BAAgB,GAAG,SAAS,CAAC,EAAE,GAAG,GAAG,CAAC;gBACtC,gBAAM,GAAG,SAAS,CAAC,gBAAgB,CAAC;gBA4B5C,gBAAC;YAAD,CAAC,AAlCD,IAkCC;YAlCY,cAAS,YAkCrB,CAAA;YAED;gBAAA;gBA2CA,CAAC;gBAxCO,eAAS,GAAhB,UAAqB,MAAoB,EAAE,WAAmB,EAAE,IAAkB,EAAE,SAAiB,EAAE,WAAmB;oBACzH,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,WAAW,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,GAAG,WAAW,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;wBAClF,IAAI,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBACrB,CAAC;gBACF,CAAC;gBAEM,kBAAY,GAAnB,UAAwB,KAAe,EAAE,IAAY,EAAE,KAAc;oBAAd,qBAAc,GAAd,SAAc;oBACpE,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC;oBAC3B,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC;wBAAC,MAAM,CAAC,KAAK,CAAC;oBAClC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;oBACpB,EAAE,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC;wBACpB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,OAAO,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE;4BAAE,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;oBACvD,CAAC;oBACD,MAAM,CAAC,KAAK,CAAC;gBACd,CAAC;gBAEM,yBAAmB,GAA1B,UAA+B,KAAe,EAAE,IAAY,EAAE,KAAc;oBAAd,qBAAc,GAAd,SAAc;oBAC3E,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC;wBAAC,MAAM,CAAC,KAAK,CAAC;oBACvC,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;gBAC/C,CAAC;gBAEM,cAAQ,GAAf,UAAoB,IAAY,EAAE,YAAe;oBAChD,IAAI,KAAK,GAAG,IAAI,KAAK,CAAI,IAAI,CAAC,CAAC;oBAC/B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE;wBAAE,KAAK,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC;oBACvD,MAAM,CAAC,KAAK,CAAC;gBACd,CAAC;gBAEM,mBAAa,GAApB,UAAsB,IAAY;oBACjC,EAAE,CAAC,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC;wBACjC,MAAM,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,CAAA;oBAC9B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,IAAI,KAAK,GAAG,IAAI,KAAK,CAAS,IAAI,CAAC,CAAC;wBACpC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;4BAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;wBACpD,MAAM,CAAC,KAAK,CAAC;oBACf,CAAC;gBACF,CAAC;gBAEM,kBAAY,GAAnB,UAAqB,KAAoB;oBACxC,MAAM,CAAC,KAAK,CAAC,qBAAqB,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;gBACtE,CAAC;gBAzCM,2BAAqB,GAAG,OAAM,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC;gBA0CrE,YAAC;YAAD,CAAC,AA3CD,IA2CC;YA3CY,UAAK,QA2CjB,CAAA;YAED;gBAAA;gBAQA,CAAC;gBAPO,mBAAQ,GAAf,UAAgB,QAAkB;oBACjC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBAChD,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;wBAChB,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAA;wBACjC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;oBACzH,CAAC;gBACF,CAAC;gBACF,iBAAC;YAAD,CAAC,AARD,IAQC;YARY,eAAU,aAQtB,CAAA;YAED;gBAIC,cAAa,YAAqB;oBAH1B,UAAK,GAAG,IAAI,KAAK,EAAK,CAAC;oBAI9B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;gBAClC,CAAC;gBAED,qBAAM,GAAN;oBACC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;gBACvE,CAAC;gBAED,mBAAI,GAAJ,UAAM,IAAO;oBACZ,EAAE,CAAC,CAAE,IAAY,CAAC,KAAK,CAAC;wBAAE,IAAY,CAAC,KAAK,EAAE,CAAC;oBAC/C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACvB,CAAC;gBAED,sBAAO,GAAP,UAAS,KAAmB;oBAC3B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBACvC,EAAE,CAAC,CAAE,KAAK,CAAC,CAAC,CAAS,CAAC,KAAK,CAAC;4BAAE,KAAK,CAAC,CAAC,CAAS,CAAC,KAAK,EAAE,CAAC;wBACvD,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC1B,CAAC;gBACF,CAAC;gBAED,oBAAK,GAAL;oBACC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;gBACvB,CAAC;gBACF,WAAC;YAAD,CAAC,AA3BD,IA2BC;YA3BY,SAAI,OA2BhB,CAAA;YAED;gBACC,iBAAoB,CAAK,EAAS,CAAK;oBAA1B,iBAAY,GAAZ,KAAY;oBAAE,iBAAY,GAAZ,KAAY;oBAAnB,MAAC,GAAD,CAAC,CAAI;oBAAS,MAAC,GAAD,CAAC,CAAI;gBACvC,CAAC;gBAED,qBAAG,GAAH,UAAK,CAAS,EAAE,CAAS;oBACxB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;oBACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;oBACX,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;gBAED,wBAAM,GAAN;oBACC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;oBACf,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;oBACf,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;gBACjC,CAAC;gBAED,2BAAS,GAAT;oBACC,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;oBACxB,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;wBACd,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC;wBACd,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC;oBACf,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;gBACF,cAAC;YAAD,CAAC,AAxBD,IAwBC;YAxBY,YAAO,UAwBnB,CAAA;YAED;gBAAA;oBACC,aAAQ,GAAG,KAAK,CAAC;oBACjB,oBAAe,GAAG,CAAC,CAAC;oBACpB,UAAK,GAAG,CAAC,CAAC;oBACV,cAAS,GAAG,CAAC,CAAC;oBAEN,aAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;oBAC7B,eAAU,GAAG,CAAC,CAAC;oBACf,cAAS,GAAG,CAAC,CAAC;gBAiBvB,CAAC;gBAfA,2BAAM,GAAN;oBACC,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;oBAC5B,IAAI,CAAC,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC;oBACjC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC;oBAC7B,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC;oBAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;wBAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC3D,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;oBAEpB,IAAI,CAAC,UAAU,EAAE,CAAC;oBAClB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;wBACxB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;wBACxD,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;wBACnB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;oBACrB,CAAC;gBACF,CAAC;gBACF,iBAAC;YAAD,CAAC,AAzBD,IAyBC;YAzBY,eAAU,aAyBtB,CAAA;QAMF,CAAC,EA7QiB,IAAI,GAAJ,UAAI,KAAJ,UAAI,QA6QrB;IAAD,CAAC,EA7QW,KAAK,GAAL,UAAK,KAAL,UAAK,QA6QhB;AAAD,CAAC,EA7QM,IAAI,KAAJ,IAAI,QA6QV;AC3SD,IAAO,IAAI,CA0FV;AA1FD,WAAO,IAAI;IAAC,IAAA,KAAK,CA0FhB;IA1FW,WAAA,KAAK,EAAC,CAAC;QACf;YACI,MAAM,CAAC,UAAU,QAA+B,EAAE,IAAe;gBAE7D,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC7D,MAAM,CAAC,IAAI,EAAE,CAAC;gBAClB,CAAC;gBAED,IAAI,aAAa,GAAG,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC;gBAC5E,EAAE,CAAC,CAAC,aAAa,KAAK,KAAK,CAAC,CAAC,CAAC;oBAC1B,MAAM,CAAC,IAAI,EAAE,CAAC;gBAClB,CAAC;gBACD,EAAE,CAAC,CAAC,aAAa,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;oBAEvC,IAAI,eAAe,GAAG,IAAI,UAAI,CAAC,YAAY,CAAC,IAAI,UAAI,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAC,CAAC;oBAC3F,IAAI,YAAY,GAAG,eAAe,CAAC,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;oBAEnE,QAAQ,CAAC,SAAS,GAAG,YAAY,CAAC;oBAClC,QAAQ,CAAC,UAAU,GAAG,aAAa,CAAC;oBAEpC,MAAM,CAAC,IAAI,EAAE,CAAC;gBAClB,CAAC;gBAED,IAAI,mBAAmB,GAAG,QAAQ,CAAC;gBACnC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBAC1D,mBAAmB,GAAG,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,CAAC;gBAC7D,CAAC;gBAOD,IAAI,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,mBAAmB,CAAC;gBAE5F,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;gBAEhD,IAAI,YAAY,GAAG;oBACf,WAAW,EAAE,QAAQ,CAAC,WAAW;oBACjC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI;oBACrD,QAAQ,EAAE,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,aAAa,GAAG,IAAI;iBACvE,CAAC;gBACF,IAAI,YAAY,GAAG;oBACf,WAAW,EAAE,QAAQ,CAAC,WAAW;oBACjC,QAAQ,EAAE,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,aAAa,GAAG,IAAI;iBACvE,CAAC;gBACF,IAAI,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;gBAExE,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;gBAE5C,IAAI,OAAO,GAAG,kBAAkB,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,GAAG,cAAc,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;gBAE9F,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,GAAG,QAAQ,EAAE,SAAS,EAAE,YAAY,EAAE;oBACxD,IAAI,UAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,OAAO,EAAE,UAAU,UAAU;wBACtE,IAAI,eAAe,GAAG,IAAI,UAAI,CAAC,YAAY,CAAC,IAAI,UAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,CAAC;wBACxF,IAAI,YAAY,GAAG,eAAe,CAAC,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;wBAEnE,QAAQ,CAAC,SAAS,GAAG,YAAY,CAAC;wBAClC,QAAQ,CAAC,UAAU,GAAG,UAAU,CAAC;wBAEjC,IAAI,EAAE,CAAC;oBACX,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;YACP,CAAC,CAAC;QACN,CAAC;QA/De,iBAAW,cA+D1B,CAAA;QAED,4BAAmC,MAAW,EAAE,UAAe,EAAE,OAAY,EAAE,YAAiB;YAC5F,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/D,OAAO,IAAI,GAAG,CAAC;YACnB,CAAC;YACD,MAAM,CAAC,UAAU,IAAY,EAAE,QAAgD;gBAC3E,IAAI,IAAI,GAAG,UAAU,GAAG,IAAI,CAAC;gBAC7B,IAAI,GAAG,GAAG,OAAO,GAAG,IAAI,CAAC;gBACzB,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,YAAY,EAAE,UAAC,QAA+B;oBAChE,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;gBAC3C,CAAC,CAAC,CAAC;YACP,CAAC,CAAA;QACL,CAAC;QAXe,wBAAkB,qBAWjC,CAAA;QAED,gCAAuC,OAAY,EAAE,WAAgB;YACjE,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/D,OAAO,IAAI,GAAG,CAAC;YACnB,CAAC;YACD,MAAM,CAAC,UAAU,IAAS,EAAE,QAAa;gBACrC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC;YAC5D,CAAC,CAAA;QACL,CAAC;QAPe,4BAAsB,yBAOrC,CAAA;QAED,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;QACnD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;IACnC,CAAC,EA1FW,KAAK,GAAL,UAAK,KAAL,UAAK,QA0FhB;AAAD,CAAC,EA1FM,IAAI,KAAJ,IAAI,QA0FV;ACxFD,IAAO,IAAI,CAwdV;AAxdD,WAAO,IAAI;IAAC,IAAA,KAAK,CAwdhB;IAxdW,WAAA,KAAK,EAAC,CAAC;QAEf,UAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAEvB,IAAI,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAExB;YAAiC,+BAAW;YAGxC,qBAAY,GAAiB;gBACzB,kBAAM,GAAG,CAAC,CAAC;YACf,CAAC;YACL,kBAAC;QAAD,CAAC,AAND,CAAiC,IAAI,CAAC,MAAM,GAM3C;QANY,iBAAW,cAMvB,CAAA;QAED;YAA+B,6BAAc;YAGzC,mBAAY,OAAqB,EAAE,QAAuB,EAAE,GAAkB,EAAE,OAAqB,EAAE,QAAiB;gBACpH,kBAAM,OAAO,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;YACrD,CAAC;YACL,gBAAC;QAAD,CAAC,AAND,CAA+B,IAAI,CAAC,IAAI,CAAC,IAAI,GAM5C;QANY,eAAS,YAMrB,CAAA;QAgBD;YAA2B,yBAAc;YAUrC,eAAY,SAA4B;gBACpC,iBAAO,CAAC;gBAmZZ,0BAAqB,GAAG,UAAU,QAAgB,EAAE,OAA4B,EAAE,IAA2B;oBAAzD,uBAA4B,GAA5B,cAA4B;oBAAE,oBAA2B,GAA3B,WAA2B;oBACzG,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;oBAClD,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;wBACd,MAAM,CAAC,KAAK,CAAC;oBACjB,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;gBAC7D,CAAC,CAAA;gBAvZG,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;oBACb,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;gBACxD,CAAC;gBAED,EAAE,CAAC,CAAC,CAAC,OAAO,SAAS,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;oBAClC,MAAM,IAAI,KAAK,CAAC,0GAA0G,CAAC,CAAC;gBAChI,CAAC;gBAOD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;gBAO3B,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBAC7C,IAAI,CAAC,QAAQ,CAAC,oBAAoB,EAAE,CAAC;gBAOrC,IAAI,CAAC,SAAS,GAAG,IAAI,UAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;gBAOxD,IAAI,CAAC,KAAK,GAAG,IAAI,UAAI,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAOrD,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;gBAEzB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;oBACzD,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAClC,IAAI,UAAU,GAAQ,IAAI,CAAC,UAAU,CAAC;oBACtC,IAAI,aAAa,GAAG,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;oBACzC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBACxC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;oBAE7B,EAAE,CAAC,CAAC,UAAU,YAAY,UAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;wBAC9C,IAAI,UAAU,GAAI,UAAU,CAAC,MAAkC,CAAC,IAAI,CAAC;wBACrE,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;wBAC7D,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;wBAC5B,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC;wBACpC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oBACnC,CAAC;oBACD,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,YAAY,UAAI,CAAC,cAAc,CAAC,CAAC,CAAC;wBACjD,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;wBAC7C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;wBACxB,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC,IAAI,CAAC;wBACvC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;oBACjC,CAAC;oBACD,IAAI,CAAC,CAAC;wBACF,QAAQ,CAAC;oBACb,CAAC;gBAEL,CAAC;gBAOD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBAQvB,IAAI,CAAC,OAAO,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC/C,CAAC;YAaD,sBAAI,6BAAU;qBAAd;oBACI,MAAM,CAAC,CAAC,IAAI,CAAC,eAAe,KAAK,KAAK,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;gBAC1E,CAAC;qBAED,UAAe,KAAc;oBACzB,IAAI,CAAC,eAAe,GAAG,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,mBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,eAAe,CAAC;gBAClH,CAAC;;;eAJA;YAaD,sBAAI,uBAAI;qBAAR;oBACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAc,CAAC,CAAC;gBACnD,CAAC;qBAED,UAAS,KAAa;oBAClB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,OAAc,CAAC,CAAC;gBAClE,CAAC;;;eAJA;YAWD,sBAAM,GAAN,UAAO,EAAU;gBACb,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBACtB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAChC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,EAAE,CAAC;gBAErC,IAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;gBACxC,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;gBAEhC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;oBAC/C,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACpE,CAAC;gBAED,IAAI,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACzB,IAAI,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACzB,IAAI,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAEzB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;oBACvC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;oBACjC,IAAI,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;oBAE3C,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;wBACd,aAAa,CAAC,OAAO,GAAG,KAAK,CAAC;wBAC9B,QAAQ,CAAC;oBACb,CAAC;oBAED,IAAI,QAAQ,GAAI,UAAkB,CAAC,KAAK,CAAC;oBACzC,EAAE,CAAC,CAAC,UAAU,YAAY,UAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;wBAC9C,IAAI,MAAM,GAAI,UAAoC,CAAC,MAAM,CAAC;wBAC1D,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;4BACT,IAAI,EAAE,GAAG,MAAiC,CAAC;4BAC3C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;gCAChE,IAAI,UAAU,GAAG,EAAE,CAAC,IAAI,CAAC;gCACzB,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;oCACrB,IAAI,CAAC,aAAa,CAAC,OAAO,GAAG,KAAK,CAAC;gCACvC,CAAC;gCACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC;gCAClC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;oCACzC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;gCAC5C,CAAC;gCACD,IAAI,CAAC,CAAC;oCACF,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;oCAC7D,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gCACnC,CAAC;gCACD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;gCAC9C,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC;4BACxC,CAAC;wBACL,CAAC;wBAED,EAAE,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC;4BAC1B,IAAI,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC;4BACxC,IAAI,QAAQ,GAAU,SAAS,CAAC;4BAChC,IAAI,IAAE,SAAa,CAAC;4BACpB,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;gCAEpB,IAAE,GAAG,QAAQ,CAAC,QAAQ,CAAC;gCACvB,QAAQ,CAAC,aAAa,EAAE,CAAC;gCACzB,QAAQ,CAAC,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC;gCAC1C,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;gCACzB,QAAQ,CAAC,QAAQ,GAAG,CAAC,CAAC;4BAC1B,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;oCACpB,SAAS,GAAG,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;oCACrC,aAAa,CAAC,SAAS,GAAG,SAAS,CAAC;gCACxC,CAAC;gCACD,IAAE,GAAG,SAAS,CAAC,cAAc,CAAC;4BAClC,CAAC;4BACD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAE,CAAC,CAAC;wBAC9B,CAAC;wBAAC,IAAI,CAAC,CAAC;4BAEJ,IAAI,EAAE,GAAG,aAAa,CAAC,cAAc,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;4BAC3D,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;4BAC1B,aAAa,CAAC,cAAc,GAAG,EAAE,CAAC;4BACjC,aAAqB,CAAC,4BAA4B,GAAG,8BAA8B,CAAC;wBACzF,CAAC;wBACD,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;wBAC5C,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;wBAC5C,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;wBAC5C,IAAI,CAAC,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;wBACtD,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBAClD,CAAC;oBACD,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,YAAY,UAAI,CAAC,cAAc,CAAC,CAAC,CAAC;wBACjD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,KAAK,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;4BACpE,IAAI,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC;4BAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gCACnB,IAAI,CAAC,WAAW,CAAC,OAAO,GAAG,KAAK,CAAC;4BACrC,CAAC;4BAED,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;4BAEhC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;gCACtC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;4BACzC,CAAC;4BACD,IAAI,CAAC,CAAC;gCACF,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;gCAC7C,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;4BACjC,CAAC;4BAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;4BACzC,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;wBACpC,CAAC;wBACA,UAAoC,CAAC,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;wBAC5F,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;4BAI1B,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;4BACvC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;4BAC5C,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;4BAC5C,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;wBAChD,CAAC;wBACD,IAAI,CAAC,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBAChD,CAAC;oBACD,IAAI,CAAC,CAAC;wBACF,aAAa,CAAC,OAAO,GAAG,KAAK,CAAC;wBAC9B,QAAQ,CAAC;oBACb,CAAC;oBACD,aAAa,CAAC,OAAO,GAAG,IAAI,CAAC;oBAE7B,aAAa,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBACvC,CAAC;YACL,CAAC;;YAEO,+BAAe,GAAvB,UAAwB,UAAiC,EAAE,MAAmB,EAAE,MAA0B;gBACtG,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;gBACvB,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;gBAChC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;oBACf,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,KAAK,GAAG,MAAM,CAAC,aAAa,CAAC;oBAC7E,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC;gBACpF,CAAC;gBAAC,IAAI,CAAC,CAAC;oBAEJ,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,aAAa,CAAC;oBAC1D,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC;gBACjE,CAAC;YACL,CAAC;YAEO,6BAAa,GAArB,UAAsB,UAA+B,EAAE,IAAe,EAAE,MAA0B;gBAC9F,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACrB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;gBAC9B,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;gBAMvC,IAAI,CAAC,KAAK,EAAE,CAAC;YAEjB,CAAC;YASD,mCAAmB,GAAnB;gBACI,EAAE,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;oBAC5C,IAAI,SAAS,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;oBACrD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;oBAC3B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBAC3B,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;gBACtB,CAAC;gBAED,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxD,CAAC;;YASD,4BAAY,GAAZ,UAAa,IAAe,EAAE,UAAiC,EAAE,OAAe;gBAC5E,IAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;gBAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,KAAK,UAAU,CAAC,CAAC,CAAC;oBACrC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC;oBACzB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;oBAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBAC3B,CAAC;gBACD,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;gBAC7B,IAAI,MAAM,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;gBACtC,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,GAAG,UAAI,CAAC,SAAS,CAAC,MAAM,CAAC;gBAC9D,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;gBACtB,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;gBACtB,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;gBACjC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;gBACjC,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;gBAElC,MAAM,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;gBAClC,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;gBAE5D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC;gBAClC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC;gBAC/B,MAAM,CAAC,MAAM,CAAC;YAClB,CAAC;;YAQD,0BAAU,GAAV,UAAW,IAAe,EAAE,UAA+B;gBACvD,IAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;gBAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,KAAK,UAAU,CAAC,CAAC,CAAC;oBACrC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC;oBACzB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;oBAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBAC3B,CAAC;gBACD,IAAI,KAAK,GAAG,IAAI,SAAS,CACrB,MAAM,CAAC,OAAO,EACd,IAAI,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,EAC7C,IAAI,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,EAC7C,IAAI,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,EACrC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;gBAEzC,KAAK,CAAC,aAAa,GAAG,GAAG,CAAC;gBAE1B,KAAK,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;gBAEjC,KAAK,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;gBACjC,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;gBAE9C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;gBAChC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;gBACrC,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;;YAYD,sCAAsB,GAAtB,UAAuB,SAAiB,EAAE,OAA4B,EAAE,IAA2B;gBAAzD,uBAA4B,GAA5B,cAA4B;gBAAE,oBAA2B,GAA3B,WAA2B;gBAC/F,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBAC1C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBACD,IAAI,UAAU,GAAQ,IAAI,CAAC,UAAU,CAAC;gBACtC,IAAI,MAAM,GAAuB,UAAU,CAAC,MAAM,CAAC;gBACnD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBACV,MAAM,GAAG,IAAI,UAAI,CAAC,aAAa,EAAE,CAAC;oBAClC,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;oBACzB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;gBACvB,CAAC;gBACD,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC;oBAC5D,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;oBAC7D,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC;gBACvC,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC;oBAC/D,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;gBAC7D,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;oBACzB,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC;gBACrC,CAAC;gBACD,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;YAjZM,sBAAgB,GAAY,IAAI,CAAC;YAoa5C,YAAC;QAAD,CAAC,AAraD,CAA2B,IAAI,CAAC,SAAS,GAqaxC;QAraY,WAAK,QAqajB,CAAA;QAED;YACI,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;YACpC,IAAI,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC;YAC7B,IAAI,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC;YAC7B,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YACjC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YACjC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YACjC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YACjC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;YAC5C,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;YAC5C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;YACtD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC/B,CAAC;IACL,CAAC,EAxdW,KAAK,GAAL,UAAK,KAAL,UAAK,QAwdhB;AAAD,CAAC,EAxdM,IAAI,KAAJ,IAAI,QAwdV","sourcesContent":["/******************************************************************************\n * Spine Runtimes Software License v2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n\texport class Animation {\n\t\tname: string;\n\t\ttimelines: Array<Timeline>;\n\t\tduration: number;\n\n\t\tconstructor (name: string, timelines: Array<Timeline>, duration: number) {\n\t\t\tif (name == null) throw new Error(\"name cannot be null.\");\n\t\t\tif (timelines == null) throw new Error(\"timelines cannot be null.\");\n\t\t\tthis.name = name;\n\t\t\tthis.timelines = timelines;\n\t\t\tthis.duration = duration;\n\t\t}\n\n\t\tapply (skeleton: Skeleton, lastTime: number, time: number, loop: boolean, events: Array<Event>, alpha: number, setupPose: boolean, mixingOut: boolean) {\n\t\t\tif (skeleton == null) throw new Error(\"skeleton cannot be null.\");\n\n\t\t\tif (loop && this.duration != 0) {\n\t\t\t\ttime %= this.duration;\n\t\t\t\tif (lastTime > 0) lastTime %= this.duration;\n\t\t\t}\n\n\t\t\tlet timelines = this.timelines;\n\t\t\tfor (let i = 0, n = timelines.length; i < n; i++)\n\t\t\t\ttimelines[i].apply(skeleton, lastTime, time, events, alpha, setupPose, mixingOut);\n\t\t}\n\n\t\tstatic binarySearch (values: ArrayLike<number>, target: number, step: number = 1) {\n\t\t\tlet low = 0;\n\t\t\tlet high = values.length / step - 2;\n\t\t\tif (high == 0) return step;\n\t\t\tlet current = high >>> 1;\n\t\t\twhile (true) {\n\t\t\t\tif (values[(current + 1) * step] <= target)\n\t\t\t\t\tlow = current + 1;\n\t\t\t\telse\n\t\t\t\t\thigh = current;\n\t\t\t\tif (low == high) return (low + 1) * step;\n\t\t\t\tcurrent = (low + high) >>> 1;\n\t\t\t}\n\t\t}\n\n\t\tstatic linearSearch (values: ArrayLike<number>, target: number, step: number) {\n\t\t\tfor (let i = 0, last = values.length - step; i <= last; i += step)\n\t\t\t\tif (values[i] > target) return i;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\texport interface Timeline {\n\t\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, setupPose: boolean, mixingOut: boolean): void;\n\t\tgetPropertyId (): number;\n\t}\n\n\texport enum TimelineType {\n\t\trotate, translate, scale, shear,\n\t\tattachment, color, deform,\n\t\tevent, drawOrder,\n\t\tikConstraint, transformConstraint,\n\t\tpathConstraintPosition, pathConstraintSpacing, pathConstraintMix\n\t}\n\n\texport abstract class CurveTimeline implements Timeline {\n\t\tstatic LINEAR = 0; static STEPPED = 1; static BEZIER = 2;\n\t\tstatic BEZIER_SIZE = 10 * 2 - 1;\n\n\t\tprivate curves: ArrayLike<number>; // type, x, y, ...\n\n\t\tabstract getPropertyId(): number;\n\n\t\tconstructor (frameCount: number) {\n\t\t\tif (frameCount <= 0) throw new Error(\"frameCount must be > 0: \" + frameCount);\n\t\t\tthis.curves = Utils.newFloatArray((frameCount - 1) * CurveTimeline.BEZIER_SIZE);\n\t\t}\n\n\t\tgetFrameCount () {\n\t\t\treturn this.curves.length / CurveTimeline.BEZIER_SIZE + 1;\n\t\t}\n\n\t\tsetLinear (frameIndex: number) {\n\t\t\tthis.curves[frameIndex * CurveTimeline.BEZIER_SIZE] = CurveTimeline.LINEAR;\n\t\t}\n\n\t\tsetStepped (frameIndex: number) {\n\t\t\tthis.curves[frameIndex * CurveTimeline.BEZIER_SIZE] = CurveTimeline.STEPPED;\n\t\t}\n\n\t\tgetCurveType (frameIndex: number): number {\n\t\t\tlet index = frameIndex * CurveTimeline.BEZIER_SIZE;\n\t\t\tif (index == this.curves.length) return CurveTimeline.LINEAR;\n\t\t\tlet type = this.curves[index];\n\t\t\tif (type == CurveTimeline.LINEAR) return CurveTimeline.LINEAR;\n\t\t\tif (type == CurveTimeline.STEPPED) return CurveTimeline.STEPPED;\n\t\t\treturn CurveTimeline.BEZIER;\n\t\t}\n\n\t\t/** Sets the control handle positions for an interpolation bezier curve used to transition from this keyframe to the next.\n\t\t * cx1 and cx2 are from 0 to 1, representing the percent of time between the two keyframes. cy1 and cy2 are the percent of\n\t\t * the difference between the keyframe's values. */\n\t\tsetCurve (frameIndex: number, cx1: number, cy1: number, cx2: number, cy2: number) {\n\t\t\tlet tmpx = (-cx1 * 2 + cx2) * 0.03, tmpy = (-cy1 * 2 + cy2) * 0.03;\n\t\t\tlet dddfx = ((cx1 - cx2) * 3 + 1) * 0.006, dddfy = ((cy1 - cy2) * 3 + 1) * 0.006;\n\t\t\tlet ddfx = tmpx * 2 + dddfx, ddfy = tmpy * 2 + dddfy;\n\t\t\tlet dfx = cx1 * 0.3 + tmpx + dddfx * 0.16666667, dfy = cy1 * 0.3 + tmpy + dddfy * 0.16666667;\n\n\t\t\tlet i = frameIndex * CurveTimeline.BEZIER_SIZE;\n\t\t\tlet curves = this.curves;\n\t\t\tcurves[i++] = CurveTimeline.BEZIER;\n\n\t\t\tlet x = dfx, y = dfy;\n\t\t\tfor (let n = i + CurveTimeline.BEZIER_SIZE - 1; i < n; i += 2) {\n\t\t\t\tcurves[i] = x;\n\t\t\t\tcurves[i + 1] = y;\n\t\t\t\tdfx += ddfx;\n\t\t\t\tdfy += ddfy;\n\t\t\t\tddfx += dddfx;\n\t\t\t\tddfy += dddfy;\n\t\t\t\tx += dfx;\n\t\t\t\ty += dfy;\n\t\t\t}\n\t\t}\n\n\t\tgetCurvePercent (frameIndex: number, percent: number) {\n\t\t\tpercent = MathUtils.clamp(percent, 0, 1);\n\t\t\tlet curves = this.curves;\n\t\t\tlet i = frameIndex * CurveTimeline.BEZIER_SIZE;\n\t\t\tlet type = curves[i];\n\t\t\tif (type == CurveTimeline.LINEAR) return percent;\n\t\t\tif (type == CurveTimeline.STEPPED) return 0;\n\t\t\ti++;\n\t\t\tlet x = 0;\n\t\t\tfor (let start = i, n = i + CurveTimeline.BEZIER_SIZE - 1; i < n; i += 2) {\n\t\t\t\tx = curves[i];\n\t\t\t\tif (x >= percent) {\n\t\t\t\t\tlet prevX: number, prevY: number;\n\t\t\t\t\tif (i == start) {\n\t\t\t\t\t\tprevX = 0;\n\t\t\t\t\t\tprevY = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprevX = curves[i - 2];\n\t\t\t\t\t\tprevY = curves[i - 1];\n\t\t\t\t\t}\n\t\t\t\t\treturn prevY + (curves[i + 1] - prevY) * (percent - prevX) / (x - prevX);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet y = curves[i - 1];\n\t\t\treturn y + (1 - y) * (percent - x) / (1 - x); // Last point is 1,1.\n\t\t}\n\n\t\tabstract apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, setupPose: boolean, mixingOut: boolean): void;\n\t}\n\n\texport class RotateTimeline extends CurveTimeline {\n\t\tstatic ENTRIES = 2;\n\t\tstatic PREV_TIME = -2; static PREV_ROTATION = -1;\n\t\tstatic ROTATION = 1;\n\n\t\tboneIndex: number;\n\t\tframes: ArrayLike<number>; // time, degrees, ...\n\n\t\tconstructor (frameCount: number) {\n\t\t\tsuper(frameCount);\n\t\t\tthis.frames = Utils.newFloatArray(frameCount << 1);\n\t\t}\n\n\t\tgetPropertyId () {\n\t\t\treturn (TimelineType.rotate << 24) + this.boneIndex;\n\t\t}\n\n\t\t/** Sets the time and angle of the specified keyframe. */\n\t\tsetFrame (frameIndex: number, time: number, degrees: number) {\n\t\t\tframeIndex <<= 1;\n\t\t\tthis.frames[frameIndex] = time;\n\t\t\tthis.frames[frameIndex + RotateTimeline.ROTATION] = degrees;\n\t\t}\n\n\t\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, setupPose: boolean, mixingOut: boolean) {\n\t\t\tlet frames = this.frames;\n\n\t\t\tlet bone = skeleton.bones[this.boneIndex];\n\t\t\tif (time < frames[0]) {\n\t\t\t\tif (setupPose) bone.rotation = bone.data.rotation;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (time >= frames[frames.length - RotateTimeline.ENTRIES]) { // Time is after last frame.\n\t\t\t\tif (setupPose)\n\t\t\t\t\tbone.rotation = bone.data.rotation + frames[frames.length + RotateTimeline.PREV_ROTATION] * alpha;\n\t\t\t\telse {\n\t\t\t\t\tlet r = bone.data.rotation + frames[frames.length + RotateTimeline.PREV_ROTATION] - bone.rotation;\n\t\t\t\t\tr -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360; // Wrap within -180 and 180.\n\t\t\t\t\tbone.rotation += r * alpha;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Interpolate between the previous frame and the current frame.\n\t\t\tlet frame = Animation.binarySearch(frames, time, RotateTimeline.ENTRIES);\n\t\t\tlet prevRotation = frames[frame + RotateTimeline.PREV_ROTATION];\n\t\t\tlet frameTime = frames[frame];\n\t\t\tlet percent = this.getCurvePercent((frame >> 1) - 1,\n\t\t\t\t1 - (time - frameTime) / (frames[frame + RotateTimeline.PREV_TIME] - frameTime));\n\n\t\t\tlet r = frames[frame + RotateTimeline.ROTATION] - prevRotation;\n\t\t\tr -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360;\n\t\t\tr = prevRotation + r * percent;\n\t\t\tif (setupPose) {\n\t\t\t\tr -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360;\n\t\t\t\tbone.rotation = bone.data.rotation + r * alpha;\n\t\t\t} else {\n\t\t\t\tr = bone.data.rotation + r - bone.rotation;\n\t\t\t\tr -= (16384 - ((16384.499999999996 - r / 360) |0)) * 360;\n\t\t\t\tbone.rotation += r * alpha;\n\t\t\t}\n\t\t}\n\t}\n\n\texport class TranslateTimeline extends CurveTimeline {\n\t\tstatic ENTRIES = 3;\n\t\tstatic PREV_TIME = -3; static PREV_X = -2; static PREV_Y = -1;\n\t\tstatic X = 1; static Y = 2;\n\n\t\tboneIndex: number;\n\t\tframes: ArrayLike<number>; // time, x, y, ...\n\n\t\tconstructor (frameCount: number) {\n\t\t\tsuper(frameCount);\n\t\t\tthis.frames = Utils.newFloatArray(frameCount * TranslateTimeline.ENTRIES);\n\t\t}\n\n\t\tgetPropertyId () {\n\t\t\treturn (TimelineType.translate << 24) + this.boneIndex;\n\t\t}\n\n\t\t/** Sets the time and value of the specified keyframe. */\n\t\tsetFrame (frameIndex: number, time: number, x: number, y: number) {\n\t\t\tframeIndex *= TranslateTimeline.ENTRIES;\n\t\t\tthis.frames[frameIndex] = time;\n\t\t\tthis.frames[frameIndex + TranslateTimeline.X] = x;\n\t\t\tthis.frames[frameIndex + TranslateTimeline.Y] = y;\n\t\t}\n\n\t\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, setupPose: boolean, mixingOut: boolean) {\n\t\t\tlet frames = this.frames;\n\n\t\t\tlet bone = skeleton.bones[this.boneIndex];\n\t\t\tif (time < frames[0]) {\n\t\t\t\tif (setupPose) {\n\t\t\t\t\tbone.x = bone.data.x;\n\t\t\t\t\tbone.y = bone.data.y;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet x = 0, y = 0;\n\t\t\tif (time >= frames[frames.length - TranslateTimeline.ENTRIES]) { // Time is after last frame.\n\t\t\t\tx = frames[frames.length + TranslateTimeline.PREV_X];\n\t\t\t\ty = frames[frames.length + TranslateTimeline.PREV_Y];\n\t\t\t} else {\n\t\t\t\t// Interpolate between the previous frame and the current frame.\n\t\t\t\tlet frame = Animation.binarySearch(frames, time, TranslateTimeline.ENTRIES);\n\t\t\t\tx = frames[frame + TranslateTimeline.PREV_X];\n\t\t\t\ty = frames[frame + TranslateTimeline.PREV_Y];\n\t\t\t\tlet frameTime = frames[frame];\n\t\t\t\tlet percent = this.getCurvePercent(frame / TranslateTimeline.ENTRIES - 1,\n\t\t\t\t\t1 - (time - frameTime) / (frames[frame + TranslateTimeline.PREV_TIME] - frameTime));\n\n\t\t\t\tx += (frames[frame + TranslateTimeline.X] - x) * percent;\n\t\t\t\ty += (frames[frame + TranslateTimeline.Y] - y) * percent;\n\t\t\t}\n\t\t\tif (setupPose) {\n\t\t\t\tbone.x = bone.data.x + x * alpha;\n\t\t\t\tbone.y = bone.data.y + y * alpha;\n\t\t\t} else {\n\t\t\t\tbone.x += (bone.data.x + x - bone.x) * alpha;\n\t\t\t\tbone.y += (bone.data.y + y - bone.y) * alpha;\n\t\t\t}\n\t\t}\n\t}\n\n\texport class ScaleTimeline extends TranslateTimeline {\n\t\tconstructor (frameCount: number) {\n\t\t\tsuper(frameCount);\n\t\t}\n\n\t\tgetPropertyId () {\n\t\t\treturn (TimelineType.scale << 24) + this.boneIndex;\n\t\t}\n\n\t\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, setupPose: boolean, mixingOut: boolean) {\n\t\t\tlet frames = this.frames;\n\n\t\t\tlet bone = skeleton.bones[this.boneIndex];\n\t\t\tif (time < frames[0]) {\n\t\t\t\tif (setupPose) {\n\t\t\t\t\tbone.scaleX = bone.data.scaleX;\n\t\t\t\t\tbone.scaleY = bone.data.scaleY;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet x = 0, y = 0;\n\t\t\tif (time >= frames[frames.length - ScaleTimeline.ENTRIES]) { // Time is after last frame.\n\t\t\t\tx = frames[frames.length + ScaleTimeline.PREV_X] * bone.data.scaleX;\n\t\t\t\ty = frames[frames.length + ScaleTimeline.PREV_Y] * bone.data.scaleY;\n\t\t\t} else {\n\t\t\t\t// Interpolate between the previous frame and the current frame.\n\t\t\t\tlet frame = Animation.binarySearch(frames, time, ScaleTimeline.ENTRIES);\n\t\t\t\tx = frames[frame + ScaleTimeline.PREV_X];\n\t\t\t\ty = frames[frame + ScaleTimeline.PREV_Y];\n\t\t\t\tlet frameTime = frames[frame];\n\t\t\t\tlet percent = this.getCurvePercent(frame / ScaleTimeline.ENTRIES - 1,\n\t\t\t\t\t1 - (time - frameTime) / (frames[frame + ScaleTimeline.PREV_TIME] - frameTime));\n\n\t\t\t\tx = (x + (frames[frame + ScaleTimeline.X] - x) * percent) * bone.data.scaleX;\n\t\t\t\ty = (y + (frames[frame + ScaleTimeline.Y] - y) * percent) * bone.data.scaleY;\n\t\t\t}\n\t\t\tif (alpha == 1) {\n\t\t\t\tbone.scaleX = x;\n\t\t\t\tbone.scaleY = y;\n\t\t\t} else {\n\t\t\t\tlet bx = 0, by = 0;\n\t\t\t\tif (setupPose) {\n\t\t\t\t\tbx = bone.data.scaleX;\n\t\t\t\t\tby = bone.data.scaleY;\n\t\t\t\t} else {\n\t\t\t\t\tbx = bone.scaleX;\n\t\t\t\t\tby = bone.scaleY;\n\t\t\t\t}\n\t\t\t\t// Mixing out uses sign of setup or current pose, else use sign of key.\n\t\t\t\tif (mixingOut) {\n\t\t\t\t\tx = Math.abs(x) * MathUtils.signum(bx);\n\t\t\t\t\ty = Math.abs(y) * MathUtils.signum(by);\n\t\t\t\t} else {\n\t\t\t\t\tbx = Math.abs(bx) * MathUtils.signum(x);\n\t\t\t\t\tby = Math.abs(by) * MathUtils.signum(y);\n\t\t\t\t}\n\t\t\t\tbone.scaleX = bx + (x - bx) * alpha;\n\t\t\t\tbone.scaleY = by + (y - by) * alpha;\n\t\t\t}\n\t\t}\n\t}\n\n\texport class ShearTimeline extends TranslateTimeline {\n\t\tconstructor (frameCount: number) {\n\t\t\tsuper(frameCount);\n\t\t}\n\n\t\tgetPropertyId () {\n\t\t\treturn (TimelineType.shear << 24) + this.boneIndex;\n\t\t}\n\n\t\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, setupPose: boolean, mixingOut: boolean) {\n\t\t\tlet frames = this.frames;\n\n\t\t\tlet bone = skeleton.bones[this.boneIndex];\n\t\t\tif (time < frames[0]) {\n\t\t\t\tif (setupPose) {\n\t\t\t\t\tbone.shearX = bone.data.shearX;\n\t\t\t\t\tbone.shearY = bone.data.shearY;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet x = 0, y = 0;\n\t\t\tif (time >= frames[frames.length - ShearTimeline.ENTRIES]) { // Time is after last frame.\n\t\t\t\tx = frames[frames.length + ShearTimeline.PREV_X];\n\t\t\t\ty = frames[frames.length + ShearTimeline.PREV_Y];\n\t\t\t} else {\n\t\t\t\t// Interpolate between the previous frame and the current frame.\n\t\t\t\tlet frame = Animation.binarySearch(frames, time, ShearTimeline.ENTRIES);\n\t\t\t\tx = frames[frame + ShearTimeline.PREV_X];\n\t\t\t\ty = frames[frame + ShearTimeline.PREV_Y];\n\t\t\t\tlet frameTime = frames[frame];\n\t\t\t\tlet percent = this.getCurvePercent(frame / ShearTimeline.ENTRIES - 1,\n\t\t\t\t\t1 - (time - frameTime) / (frames[frame + ShearTimeline.PREV_TIME] - frameTime));\n\n\t\t\t\tx = x + (frames[frame + ShearTimeline.X] - x) * percent;\n\t\t\t\ty = y + (frames[frame + ShearTimeline.Y] - y) * percent;\n\t\t\t}\n\t\t\tif (setupPose) {\n\t\t\t\tbone.shearX = bone.data.shearX + x * alpha;\n\t\t\t\tbone.shearY = bone.data.shearY + y * alpha;\n\t\t\t} else {\n\t\t\t\tbone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;\n\t\t\t\tbone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;\n\t\t\t}\n\t\t}\n\t}\n\n\texport class ColorTimeline extends CurveTimeline {\n\t\tstatic ENTRIES = 5;\n\t\tstatic PREV_TIME = -5; static PREV_R = -4; static PREV_G = -3; static PREV_B = -2; static PREV_A = -1;\n\t\tstatic R = 1; static G = 2; static B = 3; static A = 4;\n\n\t\tslotIndex: number;\n\t\tframes: ArrayLike<number>; // time, r, g, b, a, ...\n\n\t\tconstructor (frameCount: number) {\n\t\t\tsuper(frameCount);\n\t\t\tthis.frames = Utils.newFloatArray(frameCount * ColorTimeline.ENTRIES);\n\t\t}\n\n\t\tgetPropertyId () {\n\t\t\treturn (TimelineType.color << 24) + this.slotIndex;\n\t\t}\n\n\t\t/** Sets the time and value of the specified keyframe. */\n\t\tsetFrame (frameIndex: number, time: number, r: number, g: number, b: number, a: number) {\n\t\t\tframeIndex *= ColorTimeline.ENTRIES;\n\t\t\tthis.frames[frameIndex] = time;\n\t\t\tthis.frames[frameIndex + ColorTimeline.R] = r;\n\t\t\tthis.frames[frameIndex + ColorTimeline.G] = g;\n\t\t\tthis.frames[frameIndex + ColorTimeline.B] = b;\n\t\t\tthis.frames[frameIndex + ColorTimeline.A] = a;\n\t\t}\n\n\t\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, setupPose: boolean, mixingOut: boolean) {\n\t\t\tlet slot = skeleton.slots[this.slotIndex];\n\t\t\tlet frames = this.frames;\n\t\t\tif (time < frames[0]) {\n\t\t\t\tif (setupPose) slot.color.setFromColor(slot.data.color);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet r = 0, g = 0, b = 0, a = 0;\n\t\t\tif (time >= frames[frames.length - ColorTimeline.ENTRIES]) { // Time is after last frame.\n\t\t\t\tlet i = frames.length;\n\t\t\t\tr = frames[i + ColorTimeline.PREV_R];\n\t\t\t\tg = frames[i + ColorTimeline.PREV_G];\n\t\t\t\tb = frames[i + ColorTimeline.PREV_B];\n\t\t\t\ta = frames[i + ColorTimeline.PREV_A];\n\t\t\t} else {\n\t\t\t\t// Interpolate between the previous frame and the current frame.\n\t\t\t\tlet frame = Animation.binarySearch(frames, time, ColorTimeline.ENTRIES);\n\t\t\t\tr = frames[frame + ColorTimeline.PREV_R];\n\t\t\t\tg = frames[frame + ColorTimeline.PREV_G];\n\t\t\t\tb = frames[frame + ColorTimeline.PREV_B];\n\t\t\t\ta = frames[frame + ColorTimeline.PREV_A];\n\t\t\t\tlet frameTime = frames[frame];\n\t\t\t\tlet percent = this.getCurvePercent(frame / ColorTimeline.ENTRIES - 1,\n\t\t\t\t\t1 - (time - frameTime) / (frames[frame + ColorTimeline.PREV_TIME] - frameTime));\n\n\t\t\t\tr += (frames[frame + ColorTimeline.R] - r) * percent;\n\t\t\t\tg += (frames[frame + ColorTimeline.G] - g) * percent;\n\t\t\t\tb += (frames[frame + ColorTimeline.B] - b) * percent;\n\t\t\t\ta += (frames[frame + ColorTimeline.A] - a) * percent;\n\t\t\t}\n\t\t\tif (alpha == 1)\n\t\t\t\tslot.color.set(r, g, b, a);\n\t\t\telse {\n\t\t\t\tlet color = slot.color;\n\t\t\t\tif (setupPose) color.setFromColor(slot.data.color);\n\t\t\t\tcolor.add((r - color.r) * alpha, (g - color.g) * alpha, (b - color.b) * alpha, (a - color.a) * alpha);\n\t\t\t}\n\t\t}\n\t}\n\n\texport class AttachmentTimeline implements Timeline {\n\t\tslotIndex: number;\n\t\tframes: ArrayLike<number> // time, ...\n\t\tattachmentNames: Array<string>;\n\n\t\tconstructor (frameCount: number) {\n\t\t\tthis.frames = Utils.newFloatArray(frameCount);\n\t\t\tthis.attachmentNames = new Array<string>(frameCount);\n\t\t}\n\n\t\tgetPropertyId () {\n\t\t\treturn (TimelineType.attachment << 24) + this.slotIndex;\n\t\t}\n\n\t\tgetFrameCount () {\n\t\t\treturn this.frames.length;\n\t\t}\n\n\t\t/** Sets the time and value of the specified keyframe. */\n\t\tsetFrame (frameIndex: number, time: number, attachmentName: string) {\n\t\t\tthis.frames[frameIndex] = time;\n\t\t\tthis.attachmentNames[frameIndex] = attachmentName;\n\t\t}\n\n\t\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, setupPose: boolean, mixingOut: boolean) {\n\t\t\tlet slot = skeleton.slots[this.slotIndex];\n\t\t\tif (mixingOut && setupPose) {\n\t\t\t\tlet attachmentName = slot.data.attachmentName;\n\t\t\t\tslot.setAttachment(attachmentName == null ? null : skeleton.getAttachment(this.slotIndex, attachmentName));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet frames = this.frames;\n\t\t\tif (time < frames[0]) {\n\t\t\t\tif (setupPose) {\n\t\t\t\t\tlet attachmentName = slot.data.attachmentName;\n\t\t\t\t\tslot.setAttachment(attachmentName == null ? null : skeleton.getAttachment(this.slotIndex, attachmentName));\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet frameIndex = 0;\n\t\t\tif (time >= frames[frames.length - 1]) // Time is after last frame.\n\t\t\t\tframeIndex = frames.length - 1;\n\t\t\telse\n\t\t\t\tframeIndex = Animation.binarySearch(frames, time, 1) - 1;\n\n\t\t\tlet attachmentName = this.attachmentNames[frameIndex];\n\t\t\tskeleton.slots[this.slotIndex]\n\t\t\t\t.setAttachment(attachmentName == null ? null : skeleton.getAttachment(this.slotIndex, attachmentName));\n\t\t}\n\t}\n\n\texport class DeformTimeline extends CurveTimeline {\n\t\tslotIndex: number;\n\t\tattachment: VertexAttachment;\n\t\tframes: ArrayLike<number>; // time, ...\n\t\tframeVertices: Array<ArrayLike<number>>;\n\n\t\tconstructor (frameCount: number) {\n\t\t\tsuper(frameCount);\n\t\t\tthis.frames = Utils.newFloatArray(frameCount);\n\t\t\tthis.frameVertices = new Array<ArrayLike<number>>(frameCount);\n\t\t}\n\n\t\tgetPropertyId () {\n\t\t\treturn (TimelineType.deform << 24) + this.slotIndex;\n\t\t}\n\n\t\t/** Sets the time of the specified keyframe. */\n\t\tsetFrame (frameIndex: number, time: number, vertices: ArrayLike<number>) {\n\t\t\tthis.frames[frameIndex] = time;\n\t\t\tthis.frameVertices[frameIndex] = vertices;\n\t\t}\n\n\t\tapply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, setupPose: boolean, mixingOut: boolean) {\n\t\t\tlet slot: Slot = skeleton.slots[this.slotIndex];\n\t\t\tlet slotAttachment: Attachment = slot.getAttachment();\n\t\t\tif (!(slotAttachment instanceof VertexAttachment) || !(<VertexAttachment>slotAttachment).applyDeform(this.attachment)) return;\n\n\t\t\tlet frames = this.frames;\n\t\t\tlet verticesArray: Array<number> = slot.attachmentVertices;\n\t\t\tif (time < frames[0]) {\n\t\t\t\tif (setupPose) Utils.setArraySize(verticesArray, 0);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet frameVertices = this.frameVertices;\n\t\t\tlet vertexCount = frameVertices[0].length;\n\n\t\t\tif (verticesArray.length != vertexCount) alpha = 1; // Don't mix from uninitialized slot vertices.\n\t\t\tlet vertices: Array<number> = Utils.setArraySize(verticesArray, vertexCount);\n\n\t\t\tif (time >= frames[frames.length - 1]) { // Time is after last frame.\n\t\t\t\tlet lastVertices = frameVertices[frames.length - 1];\n\t\t\t\tif (alpha == 1) {\n\t\t\t\t\tUtils.arrayCopy(lastVertices, 0, vertices, 0, vertexCount);\n\t\t\t\t} else if (setupPose) {\n\t\t\t\t\tlet vertexAttachment = slotAttachment as VertexAttachment;\n\t\t\t\t\tif (vertexAttachment.bones == null) {\n\t\t\t\t\t\t// Unweighted vertex positions, with alpha.\n\t\t\t\t\t\tlet setupVertices = vertexAttachment.vertices;\n\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\n\t\t\t\t\t\t\tlet setup = setupVertices[i];\n\t\t\t\t\t\t\tvertices[i] = setup + (lastVertices[i] - setup) * alpha;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Weighted deform offsets, with alpha.\n\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++)\n\t\t\t\t\t\t\tvertices[i] = lastVertices[i] * alpha;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (let i = 0; i < vertexCount; i++)\n\t\t\t\t\t\tvertices[i] += (lastVertices[i] - vertices[i]) * alpha;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Interpolate between the previous frame and the current frame.\n\t\t\tlet frame = Animation.binarySearch(frames, time);\n\t\t\tlet prevVertices = frameVertices[frame - 1];\n\t\t\tlet nextVertices = frameVertices[frame];\n\t\t\tlet frameTime = frames[frame];\n\t\t\tlet percent = this.getCurvePercent(frame - 1, 1 - (time - frameTime) / (frames[frame - 1] - frameTime));\n\n\t\t\tif (alpha == 1) {\n\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\n\t\t\t\t\tlet prev = prevVertices[i];\n\t\t\t\t\tvertices[i] = prev + (nextVertices[i] - prev) * percent;\n\t\t\t\t}\n\t\t\t} else if (setupPose) {\n\t\t\t\tlet vertexAttachment = slotAttachment as VertexAttachment;\n\t\t\t\tif (vertexAttachment.bones == null) {\n\t\t\t\t\t// Unweighted vertex positions, with alpha.\n\t\t\t\t\tlet setupVertices = vertexAttachment.vertices;\n\t\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\n\t\t\t\t\t\tlet prev = prevVertices[i], setup = setupVertices[i];\n\t\t\t\t\t\tvertices[i] = setup + (prev + (nextVertices[i] - prev) * percent - setup) * alpha;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Weighted deform offsets, with alpha.\n\t\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\n\t\t\t\t\t\tlet prev = prevVertices[i];\n\t\t\t\t\t\tvertices[i] = (prev + (nextVertices[i] - prev) * percent) * alpha;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Vertex positions or deform offsets, with alpha.\n\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\n\t\t\t\t\tlet prev = prevVertices[i];\n\t\t\t\t\tvertices[i] += (prev + (nextVertices[i] - prev) * percent - vertices[i]) * alpha;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\texport class EventTimeline implements Timeline {\n\t\tframes: ArrayLike<number>; // time, ...\n\t\tevents: Array<Event>;\n\n\t\tconstructor (frameCount: number) {\n\t\t\tthis.frames = Utils.newFloatArray(frameCount);\n\t\t\tthis.events = new Array<Event>(frameCount);\n\t\t}\n\n\t\tgetPropertyId () {\n\t\t\treturn TimelineType.event << 24;\n\t\t}\n\n\t\tgetFrameCount () {\n\t\t\treturn this.frames.length;\n\t\t}\n\n\t\t/** Sets the time of the specified keyframe. */\n\t\tsetFrame (frameIndex: number, event: Event) {\n\t\t\tthis.frames[frameIndex] = event.time;\n\t\t\tthis.events[frameIndex] = event;\n\t\t}\n\n\t\t/** Fires events for frames > lastTime and <= time. */\n\t\tapply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, setupPose: boolean, mixingOut: boolean) {\n\t\t\tif (firedEvents == null) return;\n\t\t\tlet frames = this.frames;\n\t\t\tlet frameCount = this.frames.length;\n\n\t\t\tif (lastTime > time) { // Fire events after last time for looped animations.\n\t\t\t\tthis.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha, setupPose, mixingOut);\n\t\t\t\tlastTime = -1;\n\t\t\t} else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.\n\t\t\t\treturn;\n\t\t\tif (time < frames[0]) return; // Time is before first frame.\n\n\t\t\tlet frame = 0;\n\t\t\tif (lastTime < frames[0])\n\t\t\t\tframe = 0;\n\t\t\telse {\n\t\t\t\tframe = Animation.binarySearch(frames, lastTime);\n\t\t\t\tlet frameTime = frames[frame];\n\t\t\t\twhile (frame > 0) { // Fire multiple events with the same frame.\n\t\t\t\t\tif (frames[frame - 1] != frameTime) break;\n\t\t\t\t\tframe--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (; frame < frameCount && time >= frames[frame]; frame++)\n\t\t\t\tfiredEvents.push(this.events[frame]);\n\t\t}\n\t}\n\n\texport class DrawOrderTimeline implements Timeline {\n\t\tframes: ArrayLike<number>; // time, ...\n\t\tdrawOrders: Array<Array<number>>;\n\n\t\tconstructor (frameCount: number) {\n\t\t\tthis.frames = Utils.newFloatArray(frameCount);\n\t\t\tthis.drawOrders = new Array<Array<number>>(frameCount);\n\t\t}\n\n\t\tgetPropertyId () {\n\t\t\treturn TimelineType.drawOrder << 24;\n\t\t}\n\n\t\tgetFrameCount () {\n\t\t\treturn this.frames.length;\n\t\t}\n\n\t\t/** Sets the time of the specified keyframe.\n\t\t * @param drawOrder May be null to use bind pose draw order. */\n\t\tsetFrame (frameIndex: number, time: number, drawOrder: Array<number>) {\n\t\t\tthis.frames[frameIndex] = time;\n\t\t\tthis.drawOrders[frameIndex] = drawOrder;\n\t\t}\n\n\t\tapply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, setupPose: boolean, mixingOut: boolean) {\n\t\t\tlet drawOrder: Array<Slot> = skeleton.drawOrder;\n\t\t\tlet slots: Array<Slot> = skeleton.slots;\n\t\t\tif (mixingOut && setupPose) {\n\t\t\t\tUtils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet frames = this.frames;\n\t\t\tif (time < frames[0]) {\n\t\t\t\tif (setupPose) Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet frame = 0;\n\t\t\tif (time >= frames[frames.length - 1]) // Time is after last frame.\n\t\t\t\tframe = frames.length - 1;\n\t\t\telse\n\t\t\t\tframe = Animation.binarySearch(frames, time) - 1;\n\n\t\t\tlet drawOrderToSetupIndex = this.drawOrders[frame];\n\t\t\tif (drawOrderToSetupIndex == null)\n\t\t\t\tUtils.arrayCopy(slots, 0, drawOrder, 0, slots.length);\n\t\t\telse {\n\t\t\t\tfor (let i = 0, n = drawOrderToSetupIndex.length; i < n; i++)\n\t\t\t\t\tdrawOrder[i] = slots[drawOrderToSetupIndex[i]];\n\t\t\t}\n\t\t}\n\t}\n\n\texport class IkConstraintTimeline extends CurveTimeline {\n\t\tstatic ENTRIES = 3;\n\t\tstatic PREV_TIME = -3; static PREV_MIX = -2; static PREV_BEND_DIRECTION = -1;\n\t\tstatic MIX = 1; static BEND_DIRECTION = 2;\n\n\t\tikConstraintIndex: number;\n\t\tframes: ArrayLike<number>; // time, mix, bendDirection, ...\n\n\t\tconstructor (frameCount: number) {\n\t\t\tsuper(frameCount);\n\t\t\tthis.frames = Utils.newFloatArray(frameCount * IkConstraintTimeline.ENTRIES);\n\t\t}\n\n\t\tgetPropertyId () {\n\t\t\treturn (TimelineType.ikConstraint << 24) + this.ikConstraintIndex;\n\t\t}\n\n\t\t/** Sets the time, mix and bend direction of the specified keyframe. */\n\t\tsetFrame (frameIndex: number, time: number, mix: number, bendDirection: number) {\n\t\t\tframeIndex *= IkConstraintTimeline.ENTRIES;\n\t\t\tthis.frames[frameIndex] = time;\n\t\t\tthis.frames[frameIndex + IkConstraintTimeline.MIX] = mix;\n\t\t\tthis.frames[frameIndex + IkConstraintTimeline.BEND_DIRECTION] = bendDirection;\n\t\t}\n\n\t\tapply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, setupPose: boolean, mixingOut: boolean) {\n\t\t\tlet frames = this.frames;\n\t\t\tlet constraint: IkConstraint = skeleton.ikConstraints[this.ikConstraintIndex];\n\t\t\tif (time < frames[0]) {\n\t\t\t\tif (setupPose) {\n\t\t\t\t\tconstraint.mix = constraint.data.mix;\n\t\t\t\t\tconstraint.bendDirection = constraint.data.bendDirection;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (time >= frames[frames.length - IkConstraintTimeline.ENTRIES]) { // Time is after last frame.\n\t\t\t\tif (setupPose) {\n\t\t\t\t\tconstraint.mix = constraint.data.mix + (frames[frames.length + IkConstraintTimeline.PREV_MIX] - constraint.data.mix) * alpha;\n\t\t\t\t\tconstraint.bendDirection = mixingOut ? constraint.data.bendDirection\n\t\t\t\t\t\t: frames[frames.length + IkConstraintTimeline.PREV_BEND_DIRECTION];\n\t\t\t\t} else {\n\t\t\t\t\tconstraint.mix += (frames[frames.length + IkConstraintTimeline.PREV_MIX] - constraint.mix) * alpha;\n\t\t\t\t\tif (!mixingOut) constraint.bendDirection = frames[frames.length + IkConstraintTimeline.PREV_BEND_DIRECTION];\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Interpolate between the previous frame and the current frame.\n\t\t\tlet frame = Animation.binarySearch(frames, time, IkConstraintTimeline.ENTRIES);\n\t\t\tlet mix = frames[frame + IkConstraintTimeline.PREV_MIX];\n\t\t\tlet frameTime = frames[frame];\n\t\t\tlet percent = this.getCurvePercent(frame / IkConstraintTimeline.ENTRIES - 1,\n\t\t\t\t1 - (time - frameTime) / (frames[frame + IkConstraintTimeline.PREV_TIME] - frameTime));\n\n\t\t\tif (setupPose) {\n\t\t\t\tconstraint.mix = constraint.data.mix + (mix + (frames[frame + IkConstraintTimeline.MIX] - mix) * percent - constraint.data.mix) * alpha;\n\t\t\t\tconstraint.bendDirection = mixingOut ? constraint.data.bendDirection : frames[frame + IkConstraintTimeline.PREV_BEND_DIRECTION];\n\t\t\t} else {\n\t\t\t\tconstraint.mix += (mix + (frames[frame + IkConstraintTimeline.MIX] - mix) * percent - constraint.mix) * alpha;\n\t\t\t\tif (!mixingOut) constraint.bendDirection = frames[frame + IkConstraintTimeline.PREV_BEND_DIRECTION];\n\t\t\t}\n\t\t}\n\t}\n\n\texport class TransformConstraintTimeline extends CurveTimeline {\n\t\tstatic ENTRIES = 5;\n\t\tstatic PREV_TIME = -5; static PREV_ROTATE = -4; static PREV_TRANSLATE = -3; static PREV_SCALE = -2; static PREV_SHEAR = -1;\n\t\tstatic ROTATE = 1; static TRANSLATE = 2; static SCALE = 3; static SHEAR = 4;\n\n\t\ttransformConstraintIndex: number;\n\t\tframes: ArrayLike<number>; // time, rotate mix, translate mix, scale mix, shear mix, ...\n\n\t\tconstructor (frameCount: number) {\n\t\t\tsuper(frameCount);\n\t\t\tthis.frames = Utils.newFloatArray(frameCount * TransformConstraintTimeline.ENTRIES);\n\t\t}\n\n\t\tgetPropertyId () {\n\t\t\treturn (TimelineType.transformConstraint << 24) + this.transformConstraintIndex;\n\t\t}\n\n\t\t/** Sets the time and mixes of the specified keyframe. */\n\t\tsetFrame (frameIndex: number, time: number, rotateMix: number, translateMix: number, scaleMix: number, shearMix: number) {\n\t\t\tframeIndex *= TransformConstraintTimeline.ENTRIES;\n\t\t\tthis.frames[frameIndex] = time;\n\t\t\tthis.frames[frameIndex + TransformConstraintTimeline.ROTATE] = rotateMix;\n\t\t\tthis.frames[frameIndex + TransformConstraintTimeline.TRANSLATE] = translateMix;\n\t\t\tthis.frames[frameIndex + TransformConstraintTimeline.SCALE] = scaleMix;\n\t\t\tthis.frames[frameIndex + TransformConstraintTimeline.SHEAR] = shearMix;\n\t\t}\n\n\t\tapply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, setupPose: boolean, mixingOut: boolean) {\n\t\t\tlet frames = this.frames;\n\n\t\t\tlet constraint: TransformConstraint = skeleton.transformConstraints[this.transformConstraintIndex];\n\t\t\tif (time < frames[0]) {\n\t\t\t\tif (setupPose) {\n\t\t\t\t\tlet data = constraint.data;\n\t\t\t\t\tconstraint.rotateMix = data.rotateMix;\n\t\t\t\t\tconstraint.translateMix = data.rotateMix;\n\t\t\t\t\tconstraint.scaleMix = data.scaleMix;\n\t\t\t\t\tconstraint.shearMix = data.shearMix;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet rotate = 0, translate = 0, scale = 0, shear = 0;\n\t\t\tif (time >= frames[frames.length - TransformConstraintTimeline.ENTRIES]) { // Time is after last frame.\n\t\t\t\tlet i = frames.length;\n\t\t\t\trotate = frames[i + TransformConstraintTimeline.PREV_ROTATE];\n\t\t\t\ttranslate = frames[i + TransformConstraintTimeline.PREV_TRANSLATE];\n\t\t\t\tscale = frames[i + TransformConstraintTimeline.PREV_SCALE];\n\t\t\t\tshear = frames[i + TransformConstraintTimeline.PREV_SHEAR];\n\t\t\t} else {\n\t\t\t\t// Interpolate between the previous frame and the current frame.\n\t\t\t\tlet frame = Animation.binarySearch(frames, time, TransformConstraintTimeline.ENTRIES);\n\t\t\t\trotate = frames[frame + TransformConstraintTimeline.PREV_ROTATE];\n\t\t\t\ttranslate = frames[frame + TransformConstraintTimeline.PREV_TRANSLATE];\n\t\t\t\tscale = frames[frame + TransformConstraintTimeline.PREV_SCALE];\n\t\t\t\tshear = frames[frame + TransformConstraintTimeline.PREV_SHEAR];\n\t\t\t\tlet frameTime = frames[frame];\n\t\t\t\tlet percent = this.getCurvePercent(frame / TransformConstraintTimeline.ENTRIES - 1,\n\t\t\t\t\t1 - (time - frameTime) / (frames[frame + TransformConstraintTimeline.PREV_TIME] - frameTime));\n\n\t\t\t\trotate += (frames[frame + TransformConstraintTimeline.ROTATE] - rotate) * percent;\n\t\t\t\ttranslate += (frames[frame + TransformConstraintTimeline.TRANSLATE] - translate) * percent;\n\t\t\t\tscale += (frames[frame + TransformConstraintTimeline.SCALE] - scale) * percent;\n\t\t\t\tshear += (frames[frame + TransformConstraintTimeline.SHEAR] - shear) * percent;\n\t\t\t}\n\t\t\tif (setupPose) {\n\t\t\t\tlet data = constraint.data;\n\t\t\t\tconstraint.rotateMix = data.rotateMix + (rotate - data.rotateMix) * alpha;\n\t\t\t\tconstraint.translateMix = data.translateMix + (translate - data.translateMix) * alpha;\n\t\t\t\tconstraint.scaleMix = data.scaleMix + (scale - data.scaleMix) * alpha;\n\t\t\t\tconstraint.shearMix = data.shearMix + (shear - data.shearMix) * alpha;\n\t\t\t} else {\n\t\t\t\tconstraint.rotateMix += (rotate - constraint.rotateMix) * alpha;\n\t\t\t\tconstraint.translateMix += (translate - constraint.translateMix) * alpha;\n\t\t\t\tconstraint.scaleMix += (scale - constraint.scaleMix) * alpha;\n\t\t\t\tconstraint.shearMix += (shear - constraint.shearMix) * alpha;\n\t\t\t}\n\t\t}\n\t}\n\n\texport class PathConstraintPositionTimeline extends CurveTimeline {\n\t\tstatic ENTRIES = 2;\n\t\tstatic PREV_TIME = -2; static PREV_VALUE = -1;\n\t\tstatic VALUE = 1;\n\n\t\tpathConstraintIndex: number;\n\n\t\tframes: ArrayLike<number>; // time, position, ...\n\n\t\tconstructor (frameCount: number) {\n\t\t\tsuper(frameCount);\n\t\t\tthis.frames = Utils.newFloatArray(frameCount * PathConstraintPositionTimeline.ENTRIES);\n\t\t}\n\n\t\tgetPropertyId () {\n\t\t\treturn (TimelineType.pathConstraintPosition << 24) + this.pathConstraintIndex;\n\t\t}\n\n\t\t/** Sets the time and value of the specified keyframe. */\n\t\tsetFrame (frameIndex: number, time: number, value: number) {\n\t\t\tframeIndex *= PathConstraintPositionTimeline.ENTRIES;\n\t\t\tthis.frames[frameIndex] = time;\n\t\t\tthis.frames[frameIndex + PathConstraintPositionTimeline.VALUE] = value;\n\t\t}\n\n\t\tapply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, setupPose: boolean, mixingOut: boolean) {\n\t\t\tlet frames = this.frames;\n\t\t\tlet constraint: PathConstraint = skeleton.pathConstraints[this.pathConstraintIndex];\n\t\t\tif (time < frames[0]) {\n\t\t\t\tif (setupPose) constraint.position = constraint.data.position;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet position = 0;\n\t\t\tif (time >= frames[frames.length - PathConstraintPositionTimeline.ENTRIES]) // Time is after last frame.\n\t\t\t\tposition = frames[frames.length + PathConstraintPositionTimeline.PREV_VALUE];\n\t\t\telse {\n\t\t\t\t// Interpolate between the previous frame and the current frame.\n\t\t\t\tlet frame = Animation.binarySearch(frames, time, PathConstraintPositionTimeline.ENTRIES);\n\t\t\t\tposition = frames[frame + PathConstraintPositionTimeline.PREV_VALUE];\n\t\t\t\tlet frameTime = frames[frame];\n\t\t\t\tlet percent = this.getCurvePercent(frame / PathConstraintPositionTimeline.ENTRIES - 1,\n\t\t\t\t\t1 - (time - frameTime) / (frames[frame + PathConstraintPositionTimeline.PREV_TIME] - frameTime));\n\n\t\t\t\tposition += (frames[frame + PathConstraintPositionTimeline.VALUE] - position) * percent;\n\t\t\t}\n\t\t\tif (setupPose)\n\t\t\t\tconstraint.position = constraint.data.position + (position - constraint.data.position) * alpha;\n\t\t\telse\n\t\t\t\tconstraint.position += (position - constraint.position) * alpha;\n\t\t}\n\t}\n\n\texport class PathConstraintSpacingTimeline extends PathConstraintPositionTimeline {\n\t\tconstructor (frameCount: number) {\n\t\t\tsuper(frameCount);\n\t\t}\n\n\t\tgetPropertyId () {\n\t\t\treturn (TimelineType.pathConstraintSpacing << 24) + this.pathConstraintIndex;\n\t\t}\n\n\t\tapply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, setupPose: boolean, mixingOut: boolean) {\n\t\t\tlet frames = this.frames;\n\t\t\tlet constraint: PathConstraint = skeleton.pathConstraints[this.pathConstraintIndex];\n\t\t\tif (time < frames[0]) {\n\t\t\t\tif (setupPose) constraint.spacing = constraint.data.spacing;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet spacing = 0;\n\t\t\tif (time >= frames[frames.length - PathConstraintSpacingTimeline.ENTRIES]) // Time is after last frame.\n\t\t\t\tspacing = frames[frames.length + PathConstraintSpacingTimeline.PREV_VALUE];\n\t\t\telse {\n\t\t\t\t// Interpolate between the previous frame and the current frame.\n\t\t\t\tlet frame = Animation.binarySearch(frames, time, PathConstraintSpacingTimeline.ENTRIES);\n\t\t\t\tspacing = frames[frame + PathConstraintSpacingTimeline.PREV_VALUE];\n\t\t\t\tlet frameTime = frames[frame];\n\t\t\t\tlet percent = this.getCurvePercent(frame / PathConstraintSpacingTimeline.ENTRIES - 1,\n\t\t\t\t\t1 - (time - frameTime) / (frames[frame + PathConstraintSpacingTimeline.PREV_TIME] - frameTime));\n\n\t\t\t\tspacing += (frames[frame + PathConstraintSpacingTimeline.VALUE] - spacing) * percent;\n\t\t\t}\n\n\t\t\tif (setupPose)\n\t\t\t\tconstraint.spacing = constraint.data.spacing + (spacing - constraint.data.spacing) * alpha;\n\t\t\telse\n\t\t\t\tconstraint.spacing += (spacing - constraint.spacing) * alpha;\n\t\t}\n\t}\n\n\texport class PathConstraintMixTimeline extends CurveTimeline {\n\t\tstatic ENTRIES = 3;\n\t\tstatic PREV_TIME = -3; static PREV_ROTATE = -2; static PREV_TRANSLATE = -1;\n\t\tstatic ROTATE = 1; static TRANSLATE = 2;\n\n\t\tpathConstraintIndex: number;\n\n\t\tframes: ArrayLike<number>; // time, rotate mix, translate mix, ...\n\n\t\tconstructor (frameCount: number) {\n\t\t\tsuper(frameCount);\n\t\t\tthis.frames = Utils.newFloatArray(frameCount * PathConstraintMixTimeline.ENTRIES);\n\t\t}\n\n\t\tgetPropertyId () {\n\t\t\treturn (TimelineType.pathConstraintMix << 24) + this.pathConstraintIndex;\n\t\t}\n\n\t\t/** Sets the time and mixes of the specified keyframe. */\n\t\tsetFrame (frameIndex: number, time: number, rotateMix: number, translateMix: number) {\n\t\t\tframeIndex *= PathConstraintMixTimeline.ENTRIES;\n\t\t\tthis.frames[frameIndex] = time;\n\t\t\tthis.frames[frameIndex + PathConstraintMixTimeline.ROTATE] = rotateMix;\n\t\t\tthis.frames[frameIndex + PathConstraintMixTimeline.TRANSLATE] = translateMix;\n\t\t}\n\n\t\tapply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, setupPose: boolean, mixingOut: boolean) {\n\t\t\tlet frames = this.frames;\n\t\t\tlet constraint: PathConstraint = skeleton.pathConstraints[this.pathConstraintIndex];\n\n\t\t\tif (time < frames[0]) {\n\t\t\t\tif (setupPose) {\n\t\t\t\t\tconstraint.rotateMix = constraint.data.rotateMix;\n\t\t\t\t\tconstraint.translateMix = constraint.data.translateMix;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet rotate = 0, translate = 0;\n\t\t\tif (time >= frames[frames.length - PathConstraintMixTimeline.ENTRIES]) { // Time is after last frame.\n\t\t\t\trotate = frames[frames.length + PathConstraintMixTimeline.PREV_ROTATE];\n\t\t\t\ttranslate = frames[frames.length + PathConstraintMixTimeline.PREV_TRANSLATE];\n\t\t\t} else {\n\t\t\t\t// Interpolate between the previous frame and the current frame.\n\t\t\t\tlet frame = Animation.binarySearch(frames, time, PathConstraintMixTimeline.ENTRIES);\n\t\t\t\trotate = frames[frame + PathConstraintMixTimeline.PREV_ROTATE];\n\t\t\t\ttranslate = frames[frame + PathConstraintMixTimeline.PREV_TRANSLATE];\n\t\t\t\tlet frameTime = frames[frame];\n\t\t\t\tlet percent = this.getCurvePercent(frame / PathConstraintMixTimeline.ENTRIES - 1,\n\t\t\t\t\t1 - (time - frameTime) / (frames[frame + PathConstraintMixTimeline.PREV_TIME] - frameTime));\n\n\t\t\t\trotate += (frames[frame + PathConstraintMixTimeline.ROTATE] - rotate) * percent;\n\t\t\t\ttranslate += (frames[frame + PathConstraintMixTimeline.TRANSLATE] - translate) * percent;\n\t\t\t}\n\n\t\t\tif (setupPose) {\n\t\t\t\tconstraint.rotateMix = constraint.data.rotateMix + (rotate - constraint.data.rotateMix) * alpha;\n\t\t\t\tconstraint.translateMix = constraint.data.translateMix + (translate - constraint.data.translateMix) * alpha;\n\t\t\t} else {\n\t\t\t\tconstraint.rotateMix += (rotate - constraint.rotateMix) * alpha;\n\t\t\t\tconstraint.translateMix += (translate - constraint.translateMix) * alpha;\n\t\t\t}\n\t\t}\n\t}\n}\n","/******************************************************************************\n * Spine Runtimes Software License v2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n\texport class AnimationState {\n\t\tstatic emptyAnimation = new Animation(\"<empty>\", [], 0);\n\n\t\tdata: AnimationStateData;\n\t\ttracks = new Array<TrackEntry>();\n\t\tevents = new Array<Event>();\n\t\tlisteners = new Array<AnimationStateListener2>();\n\t\tqueue = new EventQueue(this);\n\t\tpropertyIDs = new IntSet();\n\t\tanimationsChanged = false;\n\t\ttimeScale = 1;\n\n\t\ttrackEntryPool = new Pool<TrackEntry>(() => new TrackEntry());\n\n\t\tconstructor (data: AnimationStateData) {\n\t\t\tthis.data = data;\n\t\t}\n\n\t\tupdate (delta: number) {\n\t\t\tdelta *= this.timeScale;\n\t\t\tlet tracks = this.tracks;\n\t\t\tfor (let i = 0, n = tracks.length; i < n; i++) {\n\t\t\t\tlet current = tracks[i];\n\t\t\t\tif (current == null) continue;\n\n\t\t\t\tcurrent.animationLast = current.nextAnimationLast;\n\t\t\t\tcurrent.trackLast = current.nextTrackLast;\n\n\t\t\t\tlet currentDelta = delta * current.timeScale;\n\n\t\t\t\tif (current.delay > 0) {\n\t\t\t\t\tcurrent.delay -= currentDelta;\n\t\t\t\t\tif (current.delay > 0) continue;\n\t\t\t\t\tcurrentDelta = -current.delay;\n\t\t\t\t\tcurrent.delay = 0;\n\t\t\t\t}\n\n\t\t\t\tlet next = current.next;\n\t\t\t\tif (next != null) {\n\t\t\t\t\t// When the next entry's delay is passed, change to the next entry, preserving leftover time.\n\t\t\t\t\tlet nextTime = current.trackLast - next.delay;\n\t\t\t\t\tif (nextTime >= 0) {\n\t\t\t\t\t\tnext.delay = 0;\n\t\t\t\t\t\tnext.trackTime = nextTime + delta * next.timeScale;\n\t\t\t\t\t\tcurrent.trackTime += currentDelta;\n\t\t\t\t\t\tthis.setCurrent(i, next);\n\t\t\t\t\t\twhile (next.mixingFrom != null) {\n\t\t\t\t\t\t\tnext.mixTime += currentDelta;\n\t\t\t\t\t\t\tnext = next.mixingFrom;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthis.updateMixingFrom(current, delta, true);\n\t\t\t\t} else {\n\t\t\t\t\tthis.updateMixingFrom(current, delta, true);\n\t\t\t\t\t// Clear the track when there is no next entry, the track end time is reached, and there is no mixingFrom.\n\t\t\t\t\tif (current.trackLast >= current.trackEnd && current.mixingFrom == null) {\n\t\t\t\t\t\ttracks[i] = null;\n\t\t\t\t\t\tthis.queue.end(current);\n\t\t\t\t\t\tthis.disposeNext(current);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcurrent.trackTime += currentDelta;\n\t\t\t}\n\n\t\t\tthis.queue.drain();\n\t\t}\n\n\t\tupdateMixingFrom (entry: TrackEntry, delta: number, canEnd: boolean) {\n\t\t\tlet from = entry.mixingFrom;\n\t\t\tif (from == null) return;\n\n\t\t\tif (canEnd && entry.mixTime >= entry.mixDuration && entry.mixTime > 0) {\n\t\t\t\tthis.queue.end(from);\n\t\t\t\tlet newFrom = from.mixingFrom;\n\t\t\t\tentry.mixingFrom = newFrom;\n\t\t\t\tif (newFrom == null) return;\n\t\t\t\tentry.mixTime = from.mixTime;\n\t\t\t\tentry.mixDuration = from.mixDuration;\n\t\t\t\tfrom = newFrom;\n\t\t\t}\n\n\t\t\tfrom.animationLast = from.nextAnimationLast;\n\t\t\tfrom.trackLast = from.nextTrackLast;\n\t\t\tlet mixingFromDelta = delta * from.timeScale;\n\t\t\tfrom.trackTime += mixingFromDelta;\n\t\t\tentry.mixTime += mixingFromDelta;\n\n\t\t\tthis.updateMixingFrom(from, delta, canEnd && from.alpha == 1);\n\t\t}\n\n\t\tapply (skeleton: Skeleton) {\n\t\t\tif (skeleton == null) throw new Error(\"skeleton cannot be null.\");\n\t\t\tif (this.animationsChanged) this._animationsChanged();\n\n\t\t\tlet events = this.events;\n\t\t\tlet tracks = this.tracks;\n\n\t\t\tfor (let i = 0, n = tracks.length; i < n; i++) {\n\t\t\t\tlet current = tracks[i];\n\t\t\t\tif (current == null || current.delay > 0) continue;\n\n\t\t\t\t// Apply mixing from entries first.\n\t\t\t\tlet mix = current.alpha;\n\t\t\t\tif (current.mixingFrom != null) mix *= this.applyMixingFrom(current, skeleton);\n\n\t\t\t\t// Apply current entry.\n\t\t\t\tlet animationLast = current.animationLast, animationTime = current.getAnimationTime();\n\t\t\t\tlet timelineCount = current.animation.timelines.length;\n\t\t\t\tlet timelines = current.animation.timelines;\n\t\t\t\tif (mix == 1) {\n\t\t\t\t\tfor (let ii = 0; ii < timelineCount; ii++)\n\t\t\t\t\t\ttimelines[ii].apply(skeleton, animationLast, animationTime, events, 1, true, false);\n\t\t\t\t} else {\n\t\t\t\t\tlet firstFrame = current.timelinesRotation.length == 0;\n\t\t\t\t\tif (firstFrame) Utils.setArraySize(current.timelinesRotation, timelineCount << 1, null);\n\t\t\t\t\tlet timelinesRotation = current.timelinesRotation;\n\n\t\t\t\t\tlet timelinesFirst = current.timelinesFirst;\n\t\t\t\t\tfor (let ii = 0; ii < timelineCount; ii++) {\n\t\t\t\t\t\tlet timeline = timelines[ii];\n\t\t\t\t\t\tif (timeline instanceof RotateTimeline) {\n\t\t\t\t\t\t\tthis.applyRotateTimeline(timeline, skeleton, animationTime, mix, timelinesFirst[ii], timelinesRotation, ii << 1,\n\t\t\t\t\t\t\t\tfirstFrame);\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\ttimeline.apply(skeleton, animationLast, animationTime, events, mix, timelinesFirst[ii], false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.queueEvents(current, animationTime);\n\t\t\t\tcurrent.nextAnimationLast = animationTime;\n\t\t\t\tcurrent.nextTrackLast = current.trackTime;\n\t\t\t}\n\n\t\t\tthis.queue.drain();\n\t\t}\n\n\t\tapplyMixingFrom (entry: TrackEntry, skeleton: Skeleton) {\n\t\t\tlet from = entry.mixingFrom;\n\t\t\tif (from.mixingFrom != null) this.applyMixingFrom(from, skeleton);\n\n\t\t\tlet mix = 0;\n\t\t\tif (entry.mixDuration == 0) // Single frame mix to undo mixingFrom changes.\n\t\t\t\tmix = 1;\n\t\t\telse {\n\t\t\t\tmix = entry.mixTime / entry.mixDuration;\n\t\t\t\tif (mix > 1) mix = 1;\n\t\t\t}\n\n\t\t\tlet events = mix < from.eventThreshold ? this.events : null;\n\t\t\tlet attachments = mix < from.attachmentThreshold, drawOrder = mix < from.drawOrderThreshold;\n\t\t\tlet animationLast = from.animationLast, animationTime = from.getAnimationTime();\n\t\t\tlet timelineCount = from.animation.timelines.length;\n\t\t\tlet timelines = from.animation.timelines;\n\t\t\tlet timelinesFirst = from.timelinesFirst;\n\t\t\tlet alpha = from.alpha * entry.mixAlpha * (1 - mix);\n\n\t\t\tlet firstFrame = from.timelinesRotation.length == 0;\n\t\t\tif (firstFrame) Utils.setArraySize(from.timelinesRotation, timelineCount << 1, null);\n\t\t\tlet timelinesRotation = from.timelinesRotation;\n\n\t\t\tfor (let i = 0; i < timelineCount; i++) {\n\t\t\t\tlet timeline = timelines[i];\n\t\t\t\tlet setupPose = timelinesFirst[i];\n\t\t\t\tif (timeline instanceof RotateTimeline)\n\t\t\t\t\tthis.applyRotateTimeline(timeline, skeleton, animationTime, alpha, setupPose, timelinesRotation, i << 1, firstFrame);\n\t\t\t\telse {\n\t\t\t\t\tif (!setupPose) {\n\t\t\t\t\t\tif (!attachments && timeline instanceof AttachmentTimeline) continue;\n\t\t\t\t\t\tif (!drawOrder && timeline instanceof DrawOrderTimeline) continue;\n\t\t\t\t\t}\n\t\t\t\t\ttimeline.apply(skeleton, animationLast, animationTime, events, alpha, setupPose, true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.queueEvents(from, animationTime);\n\t\t\tfrom.nextAnimationLast = animationTime;\n\t\t\tfrom.nextTrackLast = from.trackTime;\n\n\t\t\treturn mix;\n\t\t}\n\n\t\tapplyRotateTimeline (timeline: Timeline, skeleton: Skeleton, time: number, alpha: number, setupPose: boolean,\n\t\t\ttimelinesRotation: Array<number>, i: number, firstFrame: boolean) {\n\t\t\tif (alpha == 1) {\n\t\t\t\ttimeline.apply(skeleton, 0, time, null, 1, setupPose, false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet rotateTimeline = timeline as RotateTimeline;\n\t\t\tlet frames = rotateTimeline.frames;\n\t\t\tlet bone = skeleton.bones[rotateTimeline.boneIndex];\n\t\t\tif (time < frames[0]) {\n\t\t\t\tif (setupPose) bone.rotation = bone.data.rotation;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet r2 = 0;\n\t\t\tif (time >= frames[frames.length - RotateTimeline.ENTRIES]) // Time is after last frame.\n\t\t\t\tr2 = bone.data.rotation + frames[frames.length + RotateTimeline.PREV_ROTATION];\n\t\t\telse {\n\t\t\t\t// Interpolate between the previous frame and the current frame.\n\t\t\t\tlet frame = Animation.binarySearch(frames, time, RotateTimeline.ENTRIES);\n\t\t\t\tlet prevRotation = frames[frame + RotateTimeline.PREV_ROTATION];\n\t\t\t\tlet frameTime = frames[frame];\n\t\t\t\tlet percent = rotateTimeline.getCurvePercent((frame >> 1) - 1,\n\t\t\t\t\t1 - (time - frameTime) / (frames[frame + RotateTimeline.PREV_TIME] - frameTime));\n\n\t\t\t\tr2 = frames[frame + RotateTimeline.ROTATION] - prevRotation;\n\t\t\t\tr2 -= (16384 - ((16384.499999999996 - r2 / 360) | 0)) * 360;\n\t\t\t\tr2 = prevRotation + r2 * percent + bone.data.rotation;\n\t\t\t\tr2 -= (16384 - ((16384.499999999996 - r2 / 360) | 0)) * 360;\n\t\t\t}\n\n\t\t\t// Mix between rotations using the direction of the shortest route on the first frame while detecting crosses.\n\t\t\tlet r1 = setupPose ? bone.data.rotation : bone.rotation;\n\t\t\tlet total = 0, diff = r2 - r1;\n\t\t\tif (diff == 0) {\n\t\t\t\tif (firstFrame) {\n\t\t\t\t\ttimelinesRotation[i] = 0;\n\t\t\t\t\ttotal = 0;\n\t\t\t\t} else\n\t\t\t\t\ttotal = timelinesRotation[i];\n\t\t\t} else {\n\t\t\t\tdiff -= (16384 - ((16384.499999999996 - diff / 360) | 0)) * 360;\n\t\t\t\tlet lastTotal = 0, lastDiff = 0;\n\t\t\t\tif (firstFrame) {\n\t\t\t\t\tlastTotal = 0;\n\t\t\t\t\tlastDiff = diff;\n\t\t\t\t} else {\n\t\t\t\t\tlastTotal = timelinesRotation[i]; // Angle and direction of mix, including loops.\n\t\t\t\t\tlastDiff = timelinesRotation[i + 1]; // Difference between bones.\n\t\t\t\t}\n\t\t\t\tlet current = diff > 0, dir = lastTotal >= 0;\n\t\t\t\t// Detect cross at 0 (not 180).\n\t\t\t\tif (MathUtils.signum(lastDiff) != MathUtils.signum(diff) && Math.abs(lastDiff) <= 90) {\n\t\t\t\t\t// A cross after a 360 rotation is a loop.\n\t\t\t\t\tif (Math.abs(lastTotal) > 180) lastTotal += 360 * MathUtils.signum(lastTotal);\n\t\t\t\t\tdir = current;\n\t\t\t\t}\n\t\t\t\ttotal = diff + lastTotal - lastTotal % 360; // Store loops as part of lastTotal.\n\t\t\t\tif (dir != current) total += 360 * MathUtils.signum(lastTotal);\n\t\t\t\ttimelinesRotation[i] = total;\n\t\t\t}\n\t\t\ttimelinesRotation[i + 1] = diff;\n\t\t\tr1 += total * alpha;\n\t\t\tbone.rotation = r1 - (16384 - ((16384.499999999996 - r1 / 360) | 0)) * 360;\n\t\t}\n\n\t\tqueueEvents (entry: TrackEntry, animationTime: number) {\n\t\t\tlet animationStart = entry.animationStart, animationEnd = entry.animationEnd;\n\t\t\tlet duration = animationEnd - animationStart;\n\t\t\tlet trackLastWrapped = entry.trackLast % duration;\n\n\t\t\t// Queue events before complete.\n\t\t\tlet events = this.events;\n\t\t\tlet i = 0, n = events.length;\n\t\t\tfor (; i < n; i++) {\n\t\t\t\tlet event = events[i];\n\t\t\t\tif (event.time < trackLastWrapped) break;\n\t\t\t\tif (event.time > animationEnd) continue; // Discard events outside animation start/end.\n\t\t\t\tthis.queue.event(entry, event);\n\t\t\t}\n\n\t\t\t// Queue complete if completed a loop iteration or the animation.\n\t\t\tif (entry.loop ? (trackLastWrapped > entry.trackTime % duration)\n\t\t\t\t: (animationTime >= animationEnd && entry.animationLast < animationEnd)) {\n\t\t\t\tthis.queue.complete(entry);\n\t\t\t}\n\n\t\t\t// Queue events after complete.\n\t\t\tfor (; i < n; i++) {\n\t\t\t\tlet event = events[i];\n\t\t\t\tif (event.time < animationStart) continue; // Discard events outside animation start/end.\n\t\t\t\tthis.queue.event(entry, events[i]);\n\t\t\t}\n\t\t\tthis.events.length = 0;\n\t\t}\n\n\t\tclearTracks () {\n\t\t\tthis.queue.drainDisabled = true;\n\t\t\tfor (let i = 0, n = this.tracks.length; i < n; i++)\n\t\t\t\tthis.clearTrack(i);\n\t\t\tthis.tracks.length = 0;\n\t\t\tthis.queue.drainDisabled = false;\n\t\t\tthis.queue.drain();\n\t\t}\n\n\t\tclearTrack (trackIndex: number) {\n\t\t\tif (trackIndex >= this.tracks.length) return;\n\t\t\tlet current = this.tracks[trackIndex];\n\t\t\tif (current == null) return;\n\n\t\t\tthis.queue.end(current);\n\n\t\t\tthis.disposeNext(current);\n\n\t\t\tlet entry = current;\n\t\t\twhile (true) {\n\t\t\t\tlet from = entry.mixingFrom;\n\t\t\t\tif (from == null) break;\n\t\t\t\tthis.queue.end(from);\n\t\t\t\tentry.mixingFrom = null;\n\t\t\t\tentry = from;\n\t\t\t}\n\n\t\t\tthis.tracks[current.trackIndex] = null;\n\n\t\t\tthis.queue.drain();\n\t\t}\n\n\t\tsetCurrent (index: number, current: TrackEntry) {\n\t\t\tlet from = this.expandToIndex(index);\n\t\t\tthis.tracks[index] = current;\n\n\t\t\tif (from != null) {\n\t\t\t\tthis.queue.interrupt(from);\n\t\t\t\tcurrent.mixingFrom = from;\n\t\t\t\tcurrent.mixTime = 0;\n\n\t\t\t\t// If not completely mixed in, set mixAlpha so mixing out happens from current mix to zero.\n\t\t\t\tif (from.mixingFrom != null) current.mixAlpha *= Math.min(from.mixTime / from.mixDuration, 1);\n\t\t\t}\n\n\t\t\tthis.queue.start(current);\n\t\t}\n\n\t\tsetAnimation (trackIndex: number, animationName: string, loop: boolean) {\n\t\t\tlet animation = this.data.skeletonData.findAnimation(animationName);\n\t\t\tif (animation == null) throw new Error(\"Animation not found: \" + animationName);\n\t\t\treturn this.setAnimationWith(trackIndex, animation, loop);\n\t\t}\n\n\t\tsetAnimationWith (trackIndex: number, animation: Animation, loop: boolean) {\n\t\t\tif (animation == null) throw new Error(\"animation cannot be null.\");\n\t\t\tlet current = this.expandToIndex(trackIndex);\n\t\t\tif (current != null) {\n\t\t\t\tif (current.nextTrackLast == -1) {\n\t\t\t\t\t// Don't mix from an entry that was never applied.\n\t\t\t\t\tthis.tracks[trackIndex] = null;\n\t\t\t\t\tthis.queue.interrupt(current);\n\t\t\t\t\tthis.queue.end(current);\n\t\t\t\t\tthis.disposeNext(current);\n\t\t\t\t\tcurrent = null;\n\t\t\t\t} else\n\t\t\t\t\tthis.disposeNext(current);\n\t\t\t}\n\t\t\tlet entry = this.trackEntry(trackIndex, animation, loop, current);\n\t\t\tthis.setCurrent(trackIndex, entry);\n\t\t\tthis.queue.drain();\n\t\t\treturn entry;\n\t\t}\n\n\t\taddAnimation (trackIndex: number, animationName: string, loop: boolean, delay: number) {\n\t\t\tlet animation = this.data.skeletonData.findAnimation(animationName);\n\t\t\tif (animation == null) throw new Error(\"Animation not found: \" + animationName);\n\t\t\treturn this.addAnimationWith(trackIndex, animation, loop, delay);\n\t\t}\n\n\t\taddAnimationWith (trackIndex: number, animation: Animation, loop: boolean, delay: number) {\n\t\t\tif (animation == null) throw new Error(\"animation cannot be null.\");\n\n\t\t\tlet last = this.expandToIndex(trackIndex);\n\t\t\tif (last != null) {\n\t\t\t\twhile (last.next != null)\n\t\t\t\t\tlast = last.next;\n\t\t\t}\n\n\t\t\tlet entry = this.trackEntry(trackIndex, animation, loop, last);\n\n\t\t\tif (last == null) {\n\t\t\t\tthis.setCurrent(trackIndex, entry);\n\t\t\t\tthis.queue.drain();\n\t\t\t} else {\n\t\t\t\tlast.next = entry;\n\t\t\t\tif (delay <= 0) {\n\t\t\t\t\tlet duration = last.animationEnd - last.animationStart;\n\t\t\t\t\tif (duration != 0)\n\t\t\t\t\t\tdelay += duration * (1 + ((last.trackTime / duration) | 0)) - this.data.getMix(last.animation, animation);\n\t\t\t\t\telse\n\t\t\t\t\t\tdelay = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tentry.delay = delay;\n\t\t\treturn entry;\n\t\t}\n\n\t\tsetEmptyAnimation (trackIndex: number, mixDuration: number) {\n\t\t\tlet entry = this.setAnimationWith(trackIndex, AnimationState.emptyAnimation, false);\n\t\t\tentry.mixDuration = mixDuration;\n\t\t\tentry.trackEnd = mixDuration;\n\t\t\treturn entry;\n\t\t}\n\n\t\taddEmptyAnimation (trackIndex: number, mixDuration: number, delay: number) {\n\t\t\tif (delay <= 0) delay -= mixDuration;\n\t\t\tlet entry = this.addAnimationWith(trackIndex, AnimationState.emptyAnimation, false, delay);\n\t\t\tentry.mixDuration = mixDuration;\n\t\t\tentry.trackEnd = mixDuration;\n\t\t\treturn entry;\n\t\t}\n\n\t\tsetEmptyAnimations (mixDuration: number) {\n\t\t\tthis.queue.drainDisabled = true;\n\t\t\tfor (let i = 0, n = this.tracks.length; i < n; i++) {\n\t\t\t\tlet current = this.tracks[i];\n\t\t\t\tif (current != null) this.setEmptyAnimation(current.trackIndex, mixDuration);\n\t\t\t}\n\t\t\tthis.queue.drainDisabled = false;\n\t\t\tthis.queue.drain();\n\t\t}\n\n\t\texpandToIndex (index: number) {\n\t\t\tif (index < this.tracks.length) return this.tracks[index];\n\t\t\tUtils.ensureArrayCapacity(this.tracks, index - this.tracks.length + 1, null);\n\t\t\tthis.tracks.length = index + 1;\n\t\t\treturn null;\n\t\t}\n\n\t\ttrackEntry (trackIndex: number, animation: Animation, loop: boolean, last: TrackEntry) {\n\t\t\tlet entry = this.trackEntryPool.obtain();\n\t\t\tentry.trackIndex = trackIndex;\n\t\t\tentry.animation = animation;\n\t\t\tentry.loop = loop;\n\n\t\t\tentry.eventThreshold = 0;\n\t\t\tentry.attachmentThreshold = 0;\n\t\t\tentry.drawOrderThreshold = 0;\n\n\t\t\tentry.animationStart = 0;\n\t\t\tentry.animationEnd = animation.duration;\n\t\t\tentry.animationLast = -1;\n\t\t\tentry.nextAnimationLast = -1;\n\n\t\t\tentry.delay = 0;\n\t\t\tentry.trackTime = 0;\n\t\t\tentry.trackLast = -1;\n\t\t\tentry.nextTrackLast = -1;\n\t\t\tentry.trackEnd = loop ? Number.MAX_VALUE : entry.animationEnd;\n\t\t\tentry.timeScale = 1;\n\n\t\t\tentry.alpha = 1;\n\t\t\tentry.mixAlpha = 1;\n\t\t\tentry.mixTime = 0;\n\t\t\tentry.mixDuration = last == null ? 0 : this.data.getMix(last.animation, animation);\n\t\t\treturn entry;\n\t\t}\n\n\t\tdisposeNext (entry: TrackEntry) {\n\t\t\tlet next = entry.next;\n\t\t\twhile (next != null) {\n\t\t\t\tthis.queue.dispose(next);\n\t\t\t\tnext = next.next;\n\t\t\t}\n\t\t\tentry.next = null;\n\t\t}\n\n\t\t_animationsChanged () {\n\t\t\tthis.animationsChanged = false;\n\n\t\t\tlet propertyIDs = this.propertyIDs;\n\n\t\t\t// Compute timelinesFirst from lowest to highest track entries.\n\t\t\tlet i = 0, n = this.tracks.length;\n\t\t\tpropertyIDs.clear();\n\t\t\tfor (; i < n; i++) { // Find first non-null entry.\n\t\t\t\tlet entry = this.tracks[i];\n\t\t\t\tif (entry == null) continue;\n\t\t\t\tthis.setTimelinesFirst(entry);\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor (; i < n; i++) { // Rest of entries.\n\t\t\t\tlet entry = this.tracks[i];\n\t\t\t\tif (entry != null) this.checkTimelinesFirst(entry);\n\t\t\t}\n\t\t}\n\n\t\tsetTimelinesFirst (entry: TrackEntry) {\n\t\t\tif (entry.mixingFrom != null) {\n\t\t\t\tthis.setTimelinesFirst(entry.mixingFrom);\n\t\t\t\tthis.checkTimelinesUsage(entry, entry.timelinesFirst);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet propertyIDs = this.propertyIDs;\n\t\t\tlet timelines = entry.animation.timelines;\n\t\t\tlet n = timelines.length;\n\t\t\tlet usage = Utils.setArraySize(entry.timelinesFirst, n, false);\n\t\t\tfor (let i = 0; i < n; i++) {\n\t\t\t\tpropertyIDs.add(timelines[i].getPropertyId());\n\t\t\t\tusage[i] = true;\n\t\t\t}\n\t\t}\n\n\t\tcheckTimelinesFirst (entry: TrackEntry) {\n\t\t\tif (entry.mixingFrom != null) this.checkTimelinesFirst(entry.mixingFrom);\n\t\t\tthis.checkTimelinesUsage(entry, entry.timelinesFirst);\n\t\t}\n\n\t\tcheckTimelinesUsage (entry: TrackEntry, usageArray: Array<boolean>) {\n\t\t\tlet propertyIDs = this.propertyIDs;\n\t\t\tlet timelines = entry.animation.timelines;\n\t\t\tlet n = timelines.length;\n\t\t\tlet usage = Utils.setArraySize(usageArray, n);\n\t\t\tfor (let i = 0; i < n; i++)\n\t\t\t\tusage[i] = propertyIDs.add(timelines[i].getPropertyId());\n\t\t}\n\n\t\tgetCurrent (trackIndex: number) {\n\t\t\tif (trackIndex >= this.tracks.length) return null;\n\t\t\treturn this.tracks[trackIndex];\n\t\t}\n\n\t\taddListener (listener: AnimationStateListener2) {\n\t\t\tif (listener == null) throw new Error(\"listener cannot be null.\");\n\t\t\tthis.listeners.push(listener);\n\t\t}\n\n\t\t/** Removes the listener added with {@link #addListener(AnimationStateListener)}. */\n\t\tremoveListener (listener: AnimationStateListener2) {\n\t\t\tlet index = this.listeners.indexOf(listener);\n\t\t\tif (index >= 0) this.listeners.splice(index, 1);\n\t\t}\n\n\t\tclearListeners () {\n\t\t\tthis.listeners.length = 0;\n\t\t}\n\n\t\tclearListenerNotifications () {\n\t\t\tthis.queue.clear();\n\t\t}\n\n        //deprecated stuff\n        onComplete: (trackIndex: number, loopCount: number) => any;\n        onEvent: (trackIndex: number, event: Event) => any;\n        onStart: (trackIndex: number) => any;\n        onEnd: (trackIndex: number) => any;\n\n        private static deprecatedWarning1: boolean = false;\n\n        setAnimationByName(trackIndex: number, animationName: string, loop: boolean) {\n            if (!AnimationState.deprecatedWarning1) {\n                AnimationState.deprecatedWarning1 = true;\n                console.warn(\"Deprecation Warning: AnimationState.setAnimationByName is deprecated, please use setAnimation from now on.\");\n            }\n            this.setAnimation(trackIndex, animationName, loop);\n        }\n\n        private static deprecatedWarning2: boolean = false;\n\n        addAnimationByName(trackIndex: number, animationName: string, loop: boolean, delay: number) {\n            if (!AnimationState.deprecatedWarning2) {\n                AnimationState.deprecatedWarning2 = true;\n                console.warn(\"Deprecation Warning: AnimationState.addAnimationByName is deprecated, please use addAnimation from now on.\");\n            }\n            this.addAnimation(trackIndex, animationName, loop, delay);\n        }\n\n        private static deprecatedWarning3: boolean = false;\n\n        hasAnimationByName(animationName: string): boolean {\n            if (!AnimationState.deprecatedWarning3) {\n                AnimationState.deprecatedWarning3 = true;\n                console.warn(\"Deprecation Warning: AnimationState.hasAnimationByName is deprecated, please use hasAnimation from now on.\");\n            }\n            let animation = this.data.skeletonData.findAnimation(animationName);\n            return animation !== null;\n        }\n\t}\n\n\texport class TrackEntry {\n\t\tanimation: Animation;\n\t\tnext: TrackEntry; mixingFrom: TrackEntry;\n\t\tlistener: AnimationStateListener2;\n\t\ttrackIndex: number;\n\t\tloop: boolean;\n\t\teventThreshold: number; attachmentThreshold: number; drawOrderThreshold: number;\n\t\tanimationStart: number; animationEnd: number; animationLast: number; nextAnimationLast: number;\n\t\tdelay: number; trackTime: number; trackLast: number; nextTrackLast: number; trackEnd: number; timeScale: number;\n\t\talpha: number; mixTime: number; mixDuration: number; mixAlpha: number;\n\t\ttimelinesFirst = new Array<boolean>();\n\t\ttimelinesRotation = new Array<number>();\n\n\t\treset () {\n\t\t\tthis.next = null;\n\t\t\tthis.mixingFrom = null;\n\t\t\tthis.animation = null;\n\t\t\tthis.listener = null;\n\t\t\tthis.timelinesFirst.length = 0;\n\t\t\tthis.timelinesRotation.length = 0;\n\t\t}\n\n\t\tgetAnimationTime () {\n\t\t\tif (this.loop) {\n\t\t\t\tlet duration = this.animationEnd - this.animationStart;\n\t\t\t\tif (duration == 0) return this.animationStart;\n\t\t\t\treturn (this.trackTime % duration) + this.animationStart;\n\t\t\t}\n\t\t\treturn Math.min(this.trackTime + this.animationStart, this.animationEnd);\n\t\t}\n\n\t\tsetAnimationLast(animationLast: number) {\n\t\t\tthis.animationLast = animationLast;\n\t\t\tthis.nextAnimationLast = animationLast;\n\t\t}\n\n\t\tisComplete () {\n\t\t\treturn this.trackTime >= this.animationEnd - this.animationStart;\n\t\t}\n\n\t\tresetRotationDirections () {\n\t\t\tthis.timelinesRotation.length = 0;\n\t\t}\n\n        //deprecated stuff\n        onComplete: (trackIndex: number, loopCount: number) => any;\n        onEvent: (trackIndex: number, event: Event) => any;\n        onStart: (trackIndex: number) => any;\n        onEnd: (trackIndex: number) => any;\n\n        private static deprecatedWarning1: Boolean = false;\n        private static deprecatedWarning2: Boolean = false;\n\n        get time() {\n            if (!TrackEntry.deprecatedWarning1) {\n                TrackEntry.deprecatedWarning1 = true;\n                console.warn(\"Deprecation Warning: TrackEntry.time is deprecated, please use trackTime from now on.\");\n            }\n            return this.trackTime;\n        }\n\n        set time(value: number) {\n            if (!TrackEntry.deprecatedWarning1) {\n                TrackEntry.deprecatedWarning1 = true;\n                console.warn(\"Deprecation Warning: TrackEntry.time is deprecated, please use trackTime from now on.\");\n            }\n            this.trackTime = value;\n        }\n\n        get endTime() {\n            if (!TrackEntry.deprecatedWarning2) {\n                TrackEntry.deprecatedWarning2 = true;\n                console.warn(\"Deprecation Warning: TrackEntry.endTime is deprecated, please use trackEnd from now on.\");\n            }\n            return this.trackTime;\n        }\n\n        set endTime(value: number) {\n            if (!TrackEntry.deprecatedWarning2) {\n                TrackEntry.deprecatedWarning2 = true;\n                console.warn(\"Deprecation Warning: TrackEntry.endTime is deprecated, please use trackEnd from now on.\");\n            }\n            this.trackTime = value;\n        }\n\n        loopsCount() {\n            return Math.floor(this.trackTime / this.trackEnd);\n        }\n\t}\n\n\texport class EventQueue {\n\t\tobjects: Array<any> = [];\n\t\tdrainDisabled = false;\n\t\tanimState: AnimationState;\n\n\t\tconstructor(animState: AnimationState) {\n\t\t\tthis.animState = animState;\n\t\t}\n\n\t\tstart (entry: TrackEntry) {\n\t\t\tthis.objects.push(EventType.start);\n\t\t\tthis.objects.push(entry);\n\t\t\tthis.animState.animationsChanged = true;\n\t\t}\n\n\t\tinterrupt (entry: TrackEntry) {\n\t\t\tthis.objects.push(EventType.interrupt);\n\t\t\tthis.objects.push(entry);\n\t\t}\n\n\t\tend (entry: TrackEntry) {\n\t\t\tthis.objects.push(EventType.end);\n\t\t\tthis.objects.push(entry);\n\t\t\tthis.animState.animationsChanged = true;\n\t\t}\n\n\t\tdispose (entry: TrackEntry) {\n\t\t\tthis.objects.push(EventType.dispose);\n\t\t\tthis.objects.push(entry);\n\t\t}\n\n\t\tcomplete (entry: TrackEntry) {\n\t\t\tthis.objects.push(EventType.complete);\n\t\t\tthis.objects.push(entry);\n\t\t}\n\n\t\tevent (entry: TrackEntry, event: Event) {\n\t\t\tthis.objects.push(EventType.event);\n\t\t\tthis.objects.push(entry);\n\t\t\tthis.objects.push(event);\n\t\t}\n\n        private static deprecatedWarning1: Boolean = false;\n\n\t\tdeprecateStuff() {\n            if (!EventQueue.deprecatedWarning1) {\n                EventQueue.deprecatedWarning1 = true;\n                console.warn(\"Deprecation Warning: onComplete, onStart, onEnd, onEvent art deprecated, please use listeners from now on. 'state.addListener({ complete: function(track, event) { } })'\");\n            }\n            return true;\n        }\n\n\t\tdrain () {\n\t\t\tif (this.drainDisabled) return;\n\t\t\tthis.drainDisabled = true;\n\n\t\t\tlet objects = this.objects;\n\t\t\tlet listeners = this.animState.listeners;\n\n\t\t\tfor (let i = 0; i < objects.length; i += 2) {\n\t\t\t\tlet type = objects[i] as EventType;\n\t\t\t\tlet entry = objects[i + 1] as TrackEntry;\n\t\t\t\tswitch (type) {\n\t\t\t\tcase EventType.start:\n\t\t\t\t\tif (entry.listener != null && entry.listener.start) entry.listener.start(entry);\n\t\t\t\t\tfor (let ii = 0; ii < listeners.length; ii++)\n\t\t\t\t\t\tif (listeners[ii].start) listeners[ii].start(entry);\n                    //deprecation\n                    entry.onStart && this.deprecateStuff() && entry.onStart(entry.trackIndex);\n                    this.animState.onStart && this.deprecateStuff() && this.deprecateStuff && this.animState.onStart(entry.trackIndex);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EventType.interrupt:\n\t\t\t\t\tif (entry.listener != null && entry.listener.interrupt) entry.listener.interrupt(entry);\n\t\t\t\t\tfor (let ii = 0; ii < listeners.length; ii++)\n\t\t\t\t\t\tif (listeners[ii].interrupt) listeners[ii].interrupt(entry);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EventType.end:\n\t\t\t\t\tif (entry.listener != null && entry.listener.end) entry.listener.end(entry);\n\t\t\t\t\tfor (let ii = 0; ii < listeners.length; ii++)\n\t\t\t\t\t\tif (listeners[ii].end) listeners[ii].end(entry);\n                    //deprecation\n                    entry.onEnd && this.deprecateStuff() && entry.onEnd(entry.trackIndex);\n                    this.animState.onEnd && this.deprecateStuff() && this.animState.onEnd(entry.trackIndex);\n\t\t\t\t\t// Fall through.\n\t\t\t\tcase EventType.dispose:\n\t\t\t\t\tif (entry.listener != null && entry.listener.dispose) entry.listener.dispose(entry);\n\t\t\t\t\tfor (let ii = 0; ii < listeners.length; ii++)\n\t\t\t\t\t\tif (listeners[ii].dispose) listeners[ii].dispose(entry);\n\t\t\t\t\tthis.animState.trackEntryPool.free(entry);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EventType.complete:\n\t\t\t\t\tif (entry.listener != null && entry.listener.complete) entry.listener.complete(entry);\n\t\t\t\t\tfor (let ii = 0; ii < listeners.length; ii++)\n\t\t\t\t\t\tif (listeners[ii].complete) listeners[ii].complete(entry);\n                    //deprecation\n\n                    let count = MathUtils.toInt(entry.loopsCount()) ;\n                    entry.onComplete && this.deprecateStuff() && entry.onComplete(entry.trackIndex, count);\n                    this.animState.onComplete && this.deprecateStuff() && this.animState.onComplete(entry.trackIndex, count);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EventType.event:\n\t\t\t\t\tlet event = objects[i++ + 2] as Event;\n\t\t\t\t\tif (entry.listener != null && entry.listener.event) entry.listener.event(entry, event);\n\t\t\t\t\tfor (let ii = 0; ii < listeners.length; ii++)\n\t\t\t\t\t\tif (listeners[ii].event) listeners[ii].event(entry, event);\n                    //deprecation\n                    entry.onEvent && this.deprecateStuff() && entry.onEvent(entry.trackIndex, event);\n                    this.animState.onEvent && this.deprecateStuff() && this.animState.onEvent(entry.trackIndex, event);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.clear();\n\n\t\t\tthis.drainDisabled = false;\n\t\t}\n\n\t\tclear () {\n\t\t\tthis.objects.length = 0;\n\t\t}\n\n\n\t}\n\n\texport enum EventType {\n\t\tstart, interrupt, end, dispose, complete, event\n\t}\n\n\texport interface AnimationStateListener2 {\n\t\t/** Invoked when this entry has been set as the current entry. */\n\t\tstart (entry: TrackEntry): void;\n\n\t\t/** Invoked when another entry has replaced this entry as the current entry. This entry may continue being applied for\n\t\t * mixing. */\n\t\tinterrupt (entry: TrackEntry): void;\n\n\t\t/** Invoked when this entry is no longer the current entry and will never be applied again. */\n\t\tend (entry: TrackEntry): void;\n\n\t\t/** Invoked when this entry will be disposed. This may occur without the entry ever being set as the current entry.\n\t\t * References to the entry should not be kept after dispose is called, as it may be destroyed or reused. */\n\t\tdispose (entry: TrackEntry): void;\n\n\t\t/** Invoked every time this entry's animation completes a loop. */\n\t\tcomplete (entry: TrackEntry): void;\n\n\t\t/** Invoked when this entry's animation triggers an event. */\n\t\tevent (entry: TrackEntry, event: Event): void;\n\t}\n\n\texport abstract class AnimationStateAdapter2 implements AnimationStateListener2 {\n\t\tstart (entry: TrackEntry) {\n\t\t}\n\n\t\tinterrupt (entry: TrackEntry) {\n\t\t}\n\n\t\tend (entry: TrackEntry) {\n\t\t}\n\n\t\tdispose (entry: TrackEntry) {\n\t\t}\n\n\t\tcomplete (entry: TrackEntry) {\n\t\t}\n\n\t\tevent (entry: TrackEntry, event: Event) {\n\t\t}\n\t}\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class AnimationStateData {\n        skeletonData: SkeletonData;\n        animationToMixTime: Map<number> = {};\n        defaultMix = 0;\n\n        constructor(skeletonData: SkeletonData) {\n            if (skeletonData == null) throw new Error(\"skeletonData cannot be null.\");\n            this.skeletonData = skeletonData;\n        }\n\n        setMix(fromName: string, toName: string, duration: number) {\n            let from = this.skeletonData.findAnimation(fromName);\n            if (from == null) throw new Error(\"Animation not found: \" + fromName);\n            let to = this.skeletonData.findAnimation(toName);\n            if (to == null) throw new Error(\"Animation not found: \" + toName);\n            this.setMixWith(from, to, duration);\n        }\n\n        private static deprecatedWarning1: boolean = false;\n\n        setMixByName(fromName: string, toName: string, duration: number) {\n            if (!AnimationStateData.deprecatedWarning1) {\n                AnimationStateData.deprecatedWarning1 = true;\n                console.warn(\"Deprecation Warning: AnimationStateData.setMixByName is deprecated, please use setMix from now on.\");\n            }\n            this.setMix(fromName, toName, duration);\n        }\n\n        setMixWith(from: Animation, to: Animation, duration: number) {\n            if (from == null) throw new Error(\"from cannot be null.\");\n            if (to == null) throw new Error(\"to cannot be null.\");\n            let key = from.name + to.name;\n            this.animationToMixTime[key] = duration;\n        }\n\n        getMix(from: Animation, to: Animation) {\n            let key = from.name + to.name;\n            let value = this.animationToMixTime[key];\n            return value === undefined ? this.defaultMix : value;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class AtlasAttachmentLoader implements AttachmentLoader {\n        atlas: TextureAtlas;\n\n        constructor(atlas: TextureAtlas) {\n            this.atlas = atlas;\n        }\n\n        /** @return May be null to not load an attachment. */\n        newRegionAttachment(skin: Skin, name: string, path: string): RegionAttachment {\n            let region = this.atlas.findRegion(path);\n            if (region == null) throw new Error(\"Region not found in atlas: \" + path + \" (region attachment: \" + name + \")\");\n            let attachment = new RegionAttachment(name);\n            attachment.region = region;\n            return attachment;\n        }\n\n        /** @return May be null to not load an attachment. */\n        newMeshAttachment(skin: Skin, name: string, path: string): MeshAttachment {\n            let region = this.atlas.findRegion(path);\n            if (region == null) throw new Error(\"Region not found in atlas: \" + path + \" (mesh attachment: \" + name + \")\");\n            let attachment = new MeshAttachment(name);\n            attachment.region = region;\n            return attachment;\n        }\n\n        /** @return May be null to not load an attachment. */\n        newBoundingBoxAttachment(skin: Skin, name: string): BoundingBoxAttachment {\n            return new BoundingBoxAttachment(name);\n        }\n\n        /** @return May be null to not load an attachment */\n        newPathAttachment(skin: Skin, name: string): PathAttachment {\n            return new PathAttachment(name);\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export abstract class Attachment {\n        name: string;\n\n        constructor(name: string) {\n            if (name == null) throw new Error(\"name cannot be null.\");\n            this.name = name;\n        }\n    }\n\n    export abstract class VertexAttachment extends Attachment {\n        bones: Array<number>;\n        vertices: ArrayLike<number>;\n        worldVerticesLength = 0;\n\n        constructor(name: string) {\n            super(name);\n        }\n\n        computeWorldVertices(slot: Slot, worldVertices: ArrayLike<number>) {\n            this.computeWorldVerticesWith(slot, 0, this.worldVerticesLength, worldVertices, 0);\n        }\n\n        /** Transforms local vertices to world coordinates.\n         * @param start The index of the first local vertex value to transform. Each vertex has 2 values, x and y.\n         * @param count The number of world vertex values to output. Must be <= {@link #getWorldVerticesLength()} - start.\n         * @param worldVertices The output world vertices. Must have a length >= offset + count.\n         * @param offset The worldVertices index to begin writing values. */\n        computeWorldVerticesWith(slot: Slot, start: number, count: number, worldVertices: ArrayLike<number>, offset: number) {\n            count += offset;\n            let skeleton = slot.bone.skeleton;\n            let deformArray = slot.attachmentVertices;\n            let vertices = this.vertices;\n            let bones = this.bones;\n            if (bones == null) {\n                if (deformArray.length > 0) vertices = deformArray;\n                let bone = slot.bone;\n                let m = bone.matrix;\n                let x = m.tx;\n                let y = m.ty;\n                let a = m.a, b = m.c, c = m.b, d = m.d;\n                for (let v = start, w = offset; w < count; v += 2, w += 2) {\n                    let vx = vertices[v], vy = vertices[v + 1];\n                    worldVertices[w] = vx * a + vy * b + x;\n                    worldVertices[w + 1] = vx * c + vy * d + y;\n                }\n                return;\n            }\n            let v = 0, skip = 0;\n            for (let i = 0; i < start; i += 2) {\n                let n = bones[v];\n                v += n + 1;\n                skip += n;\n            }\n            let skeletonBones = skeleton.bones;\n            if (deformArray.length == 0) {\n                for (let w = offset, b = skip * 3; w < count; w += 2) {\n                    let wx = 0, wy = 0;\n                    let n = bones[v++];\n                    n += v;\n                    for (; v < n; v++, b += 3) {\n                        let bone = skeletonBones[bones[v]];\n                        let m = bone.matrix;\n                        let vx = vertices[b], vy = vertices[b + 1], weight = vertices[b + 2];\n                        wx += (vx * m.a + vy * m.c + m.tx) * weight;\n                        wy += (vx * m.b + vy * m.d + m.ty) * weight;\n                    }\n                    worldVertices[w] = wx;\n                    worldVertices[w + 1] = wy;\n                }\n            } else {\n                let deform = deformArray;\n                for (let w = offset, b = skip * 3, f = skip << 1; w < count; w += 2) {\n                    let wx = 0, wy = 0;\n                    let n = bones[v++];\n                    n += v;\n                    for (; v < n; v++, b += 3, f += 2) {\n                        let bone = skeletonBones[bones[v]];\n                        let m = bone.matrix;\n                        let vx = vertices[b] + deform[f], vy = vertices[b + 1] + deform[f + 1], weight = vertices[b + 2];\n                        wx += (vx * m.a + vy * m.c + m.tx) * weight;\n                        wy += (vx * m.b + vy * m.d + m.ty) * weight;\n                    }\n                    worldVertices[w] = wx;\n                    worldVertices[w + 1] = wy;\n                }\n            }\n        }\n\n        /** Returns true if a deform originally applied to the specified attachment should be applied to this attachment. */\n        applyDeform(sourceAttachment: VertexAttachment) {\n            return this == sourceAttachment;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export interface AttachmentLoader {\n        /** @return May be null to not load an attachment. */\n        newRegionAttachment (skin: Skin, name: string, path: string): RegionAttachment;\n\n        /** @return May be null to not load an attachment. */\n        newMeshAttachment (skin: Skin, name: string, path: string): MeshAttachment;\n\n        /** @return May be null to not load an attachment. */\n        newBoundingBoxAttachment (skin: Skin, name: string): BoundingBoxAttachment;\n\n        /** @return May be null to not load an attachment */\n        newPathAttachment(skin: Skin, name: string): PathAttachment;\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export enum AttachmentType {\n        Region, BoundingBox, Mesh, LinkedMesh, Path\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class BoundingBoxAttachment extends VertexAttachment {\n        color = new Color(1, 1, 1, 1);\n\n        constructor(name: string) {\n            super(name);\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class MeshAttachment extends VertexAttachment {\n        region: TextureRegion;\n        path: string;\n        regionUVs: ArrayLike<number>;\n        triangles: Array<number>;\n        color = new Color(1, 1, 1, 1);\n        hullLength: number;\n        private parentMesh: MeshAttachment;\n        inheritDeform = false;\n        tempColor = new Color(0, 0, 0, 0);\n\n        constructor(name: string) {\n            super(name);\n        }\n\n        updateWorldVertices(slot: Slot, premultipliedAlpha: boolean): ArrayLike<number> {\n            return [];\n            //nothing\n        }\n\n        updateUVs(region: TextureRegion, uvs: ArrayLike<number>): ArrayLike<number> {\n            let regionUVs = this.regionUVs;\n            let n = regionUVs.length;\n            if (!uvs || uvs.length != n) {\n                uvs = Utils.newFloatArray(n);\n            }\n\n            if (region == null) {\n                return;\n            }\n\n            let texture = region.texture;\n            let r = (texture as any)._uvs;\n            let w1 = region.width, h1 = region.height, w2 = region.originalWidth, h2 = region.originalHeight;\n            let x = region.offsetX, y = region.pixiOffsetY;\n\n            for (let i = 0; i < n; i += 2) {\n                let u = this.regionUVs[i], v = this.regionUVs[i + 1];\n                u = (u * w2 - x) / w1;\n                v = (v * h2 - y) / h1;\n                uvs[i] = (r.x0 * (1 - u) + r.x1 * u) * (1 - v) + (r.x3 * (1 - u) + r.x2 * u) * v;\n                uvs[i + 1] = (r.y0 * (1 - u) + r.y1 * u) * (1 - v) + (r.y3 * (1 - u) + r.y2 * u) * v;\n            }\n\n            return uvs;\n        }\n\n        applyDeform(sourceAttachment: VertexAttachment): boolean {\n            return this == sourceAttachment || (this.inheritDeform && this.parentMesh == sourceAttachment);\n        }\n\n        getParentMesh() {\n            return this.parentMesh;\n        }\n\n        /** @param parentMesh May be null. */\n        setParentMesh(parentMesh: MeshAttachment) {\n            this.parentMesh = parentMesh;\n            if (parentMesh != null) {\n                this.bones = parentMesh.bones;\n                this.vertices = parentMesh.vertices;\n                this.regionUVs = parentMesh.regionUVs;\n                this.triangles = parentMesh.triangles;\n                this.hullLength = parentMesh.hullLength;\n            }\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class PathAttachment extends VertexAttachment {\n        lengths: Array<number>;\n        closed = false;\n        constantSpeed = false;\n        color = new Color(1, 1, 1, 1);\n\n        constructor(name: string) {\n            super(name);\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class RegionAttachment extends Attachment {\n        x = 0;\n        y = 0;\n        scaleX = 1;\n        scaleY = 1;\n        rotation = 0;\n        width = 0;\n        height = 0;\n        color = new Color(1, 1, 1, 1);\n\n        path: string;\n        region: TextureRegion;\n\n        constructor(name: string) {\n            super(name);\n        }\n\n        updateWorldVertices(slot: Slot, premultipliedAlpha: boolean): ArrayLike<number> {\n            return [];\n            //nothing\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export enum BlendMode {\n        Normal,\n        Additive,\n        Multiply,\n        Screen\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class Bone implements Updatable {\n        static yDown: boolean = false;\n        //be careful! Spine b,c is c,b in pixi matrix\n        matrix = new PIXI.Matrix();\n\n        get worldX(): number {\n            return this.matrix.tx;\n        }\n\n        get worldY(): number {\n            return this.matrix.ty;\n        }\n\n        data: BoneData;\n        skeleton: Skeleton;\n        parent: Bone;\n        children = new Array<Bone>();\n        x = 0;\n        y = 0;\n        rotation = 0;\n        scaleX = 0;\n        scaleY = 0;\n        shearX = 0;\n        shearY = 0;\n        ax = 0;\n        ay = 0;\n        arotation = 0;\n        ascaleX = 0;\n        ascaleY = 0;\n        ashearX = 0;\n        ashearY = 0;\n        appliedValid = false;\n\n        sorted = false;\n\n        /** @param parent May be null. */\n        constructor(data: BoneData, skeleton: Skeleton, parent: Bone) {\n            if (data == null) throw new Error(\"data cannot be null.\");\n            if (skeleton == null) throw new Error(\"skeleton cannot be null.\");\n            this.data = data;\n            this.skeleton = skeleton;\n            this.parent = parent;\n            this.setToSetupPose();\n        }\n\n        /** Same as {@link #updateWorldTransform()}. This method exists for Bone to implement {@link Updatable}. */\n        update() {\n            this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);\n        }\n\n        /** Computes the world transform using the parent bone and this bone's local transform. */\n        updateWorldTransform() {\n            this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);\n        }\n\n        /** Computes the world transform using the parent bone and the specified local transform. */\n        updateWorldTransformWith(x: number, y: number, rotation: number, scaleX: number, scaleY: number, shearX: number, shearY: number) {\n            this.ax = x;\n            this.ay = y;\n            this.arotation = rotation;\n            this.ascaleX = scaleX;\n            this.ascaleY = scaleY;\n            this.ashearX = shearX;\n            this.ashearY = shearY;\n            this.appliedValid = true;\n\n            let parent = this.parent;\n            let m = this.matrix;\n            if (parent == null) { // Root bone.\n                let rotationY = rotation + 90 + shearY;\n                let la = MathUtils.cosDeg(rotation + shearX) * scaleX;\n                let lb = MathUtils.cosDeg(rotationY) * scaleY;\n                let lc = MathUtils.sinDeg(rotation + shearX) * scaleX;\n                let ld = MathUtils.sinDeg(rotationY) * scaleY;\n                let skeleton = this.skeleton;\n                if (skeleton.flipX) {\n                    x = -x;\n                    la = -la;\n                    lb = -lb;\n                }\n                if (skeleton.flipY !== Bone.yDown) {\n                    y = -y;\n                    lc = -lc;\n                    ld = -ld;\n                }\n                m.a = la;\n                m.c = lb;\n                m.b = lc;\n                m.d = ld;\n                m.tx = x + skeleton.x;\n                m.ty = y + skeleton.y;\n                return;\n            }\n\n            let pa = parent.matrix.a, pb = parent.matrix.c, pc = parent.matrix.b, pd = parent.matrix.d;\n            m.tx = pa * x + pb * y + parent.matrix.tx;\n            m.ty = pc * x + pd * y + parent.matrix.ty;\n            switch (this.data.transformMode) {\n                case TransformMode.Normal: {\n                    let rotationY = rotation + 90 + shearY;\n                    let la = MathUtils.cosDeg(rotation + shearX) * scaleX;\n                    let lb = MathUtils.cosDeg(rotationY) * scaleY;\n                    let lc = MathUtils.sinDeg(rotation + shearX) * scaleX;\n                    let ld = MathUtils.sinDeg(rotationY) * scaleY;\n                    m.a = pa * la + pb * lc;\n                    m.c = pa * lb + pb * ld;\n                    m.b = pc * la + pd * lc;\n                    m.d = pc * lb + pd * ld;\n                    return;\n                }\n                case TransformMode.OnlyTranslation: {\n                    let rotationY = rotation + 90 + shearY;\n                    m.a = MathUtils.cosDeg(rotation + shearX) * scaleX;\n                    m.c = MathUtils.cosDeg(rotationY) * scaleY;\n                    m.b = MathUtils.sinDeg(rotation + shearX) * scaleX;\n                    m.d = MathUtils.sinDeg(rotationY) * scaleY;\n                    break;\n                }\n                case TransformMode.NoRotationOrReflection: {\n                    let s = pa * pa + pc * pc;\n                    let prx = 0;\n                    if (s > 0.0001) {\n                        s = Math.abs(pa * pd - pb * pc) / s;\n                        pb = pc * s;\n                        pd = pa * s;\n                        prx = Math.atan2(pc, pa) * MathUtils.radDeg;\n                    } else {\n                        pa = 0;\n                        pc = 0;\n                        prx = 90 - Math.atan2(pd, pb) * MathUtils.radDeg;\n                    }\n                    let rx = rotation + shearX - prx;\n                    let ry = rotation + shearY - prx + 90;\n                    let la = MathUtils.cosDeg(rx) * scaleX;\n                    let lb = MathUtils.cosDeg(ry) * scaleY;\n                    let lc = MathUtils.sinDeg(rx) * scaleX;\n                    let ld = MathUtils.sinDeg(ry) * scaleY;\n                    m.a = pa * la - pb * lc;\n                    m.c = pa * lb - pb * ld;\n                    m.b = pc * la + pd * lc;\n                    m.d = pc * lb + pd * ld;\n                    break;\n                }\n                case TransformMode.NoScale:\n                case TransformMode.NoScaleOrReflection: {\n                    let cos = MathUtils.cosDeg(rotation);\n                    let sin = MathUtils.sinDeg(rotation);\n                    let za = pa * cos + pb * sin;\n                    let zc = pc * cos + pd * sin;\n                    let s = Math.sqrt(za * za + zc * zc);\n                    if (s > 0.00001) s = 1 / s;\n                    za *= s;\n                    zc *= s;\n                    s = Math.sqrt(za * za + zc * zc);\n                    let r = Math.PI / 2 + Math.atan2(zc, za);\n                    let zb = Math.cos(r) * s;\n                    let zd = Math.sin(r) * s;\n                    let la = MathUtils.cosDeg(shearX) * scaleX;\n                    let lb = MathUtils.cosDeg(90 + shearY) * scaleY;\n                    let lc = MathUtils.sinDeg(shearX) * scaleX;\n                    let ld = MathUtils.sinDeg(90 + shearY) * scaleY;\n                    m.a = za * la + zb * lc;\n                    m.c = za * lb + zb * ld;\n                    m.b = zc * la + zd * lc;\n                    m.d = zc * lb + zd * ld;\n                    if (this.data.transformMode != TransformMode.NoScaleOrReflection ? pa * pd - pb * pc < 0 : ((this.skeleton.flipX != this.skeleton.flipY) != Bone.yDown)) {\n                        m.c = -m.c;\n                        m.d = -m.d;\n                    }\n                    return;\n                }\n            }\n            if (this.skeleton.flipX) {\n                m.a = -m.a;\n                m.c = -m.c;\n            }\n            if (this.skeleton.flipY != Bone.yDown) {\n                m.b = -m.b;\n                m.d = -m.d;\n            }\n        }\n\n        setToSetupPose() {\n            let data = this.data;\n            this.x = data.x;\n            this.y = data.y;\n            this.rotation = data.rotation;\n            this.scaleX = data.scaleX;\n            this.scaleY = data.scaleY;\n            this.shearX = data.shearX;\n            this.shearY = data.shearY;\n        }\n\n        getWorldRotationX() {\n            return Math.atan2(this.matrix.b, this.matrix.a) * MathUtils.radDeg;\n        }\n\n        getWorldRotationY() {\n            return Math.atan2(this.matrix.d, this.matrix.c) * MathUtils.radDeg;\n        }\n\n        getWorldScaleX() {\n            let m = this.matrix;\n            return Math.sqrt(m.a * m.a + m.c * m.c);\n        }\n\n        getWorldScaleY() {\n            let m = this.matrix;\n            return Math.sqrt(m.b * m.b + m.d * m.d);\n        }\n\n        worldToLocalRotationX() {\n            let parent = this.parent;\n            if (parent == null) return this.arotation;\n            let pm = parent.matrix, m = this.matrix;\n            return Math.atan2(pm.a * m.b - pm.b * m.a, pm.d * m.a - pm.c * m.b) * MathUtils.radDeg;\n        }\n\n        worldToLocalRotationY() {\n            let parent = this.parent;\n            if (parent == null) return this.arotation;\n            let pm = parent.matrix, m = this.matrix;\n            return Math.atan2(pm.a * m.d - pm.b * m.c, pm.d * m.c - pm.c * m.d) * MathUtils.radDeg;\n        }\n\n        rotateWorld(degrees: number) {\n            let m = this.matrix;\n            let a = this.matrix.a, b = m.c, c = m.b, d = m.d;\n            let cos = MathUtils.cosDeg(degrees), sin = MathUtils.sinDeg(degrees);\n            m.a = cos * a - sin * c;\n            m.c = cos * b - sin * d;\n            m.b = sin * a + cos * c;\n            m.d = sin * b + cos * d;\n            this.appliedValid = false;\n        }\n\n        /** Computes the individual applied transform values from the world transform. This can be useful to perform processing using\n         * the applied transform after the world transform has been modified directly (eg, by a constraint).\n         * <p>\n         * Some information is ambiguous in the world transform, such as -1,-1 scale versus 180 rotation. */\n        updateAppliedTransform() {\n            this.appliedValid = true;\n            let parent = this.parent;\n            let m = this.matrix;\n            if (parent == null) {\n                this.ax = m.tx;\n                this.ay = m.ty;\n                this.arotation = Math.atan2(m.b, m.a) * MathUtils.radDeg;\n                this.ascaleX = Math.sqrt(m.a * m.a + m.b * m.b);\n                this.ascaleY = Math.sqrt(m.c * m.c + m.d * m.d);\n                this.ashearX = 0;\n                this.ashearY = Math.atan2(m.a * m.c + m.b * m.d, m.a * m.d - m.b * m.c) * MathUtils.radDeg;\n                return;\n            }\n            let pm = parent.matrix;\n            let pid = 1 / (pm.a * pm.d - pm.b * pm.c);\n            let dx = m.tx - pm.tx, dy = m.ty - pm.ty;\n            this.ax = (dx * pm.d * pid - dy * pm.c * pid);\n            this.ay = (dy * pm.a * pid - dx * pm.b * pid);\n            let ia = pid * pm.d;\n            let id = pid * pm.a;\n            let ib = pid * pm.c;\n            let ic = pid * pm.b;\n            let ra = ia * m.a - ib * m.b;\n            let rb = ia * m.c - ib * m.d;\n            let rc = id * m.b - ic * m.a;\n            let rd = id * m.d - ic * m.c;\n            this.ashearX = 0;\n            this.ascaleX = Math.sqrt(ra * ra + rc * rc);\n            if (this.ascaleX > 0.0001) {\n                let det = ra * rd - rb * rc;\n                this.ascaleY = det / this.ascaleX;\n                this.ashearY = Math.atan2(ra * rb + rc * rd, det) * MathUtils.radDeg;\n                this.arotation = Math.atan2(rc, ra) * MathUtils.radDeg;\n            } else {\n                this.ascaleX = 0;\n                this.ascaleY = Math.sqrt(rb * rb + rd * rd);\n                this.ashearY = 0;\n                this.arotation = 90 - Math.atan2(rd, rb) * MathUtils.radDeg;\n            }\n        }\n\n        worldToLocal(world: Vector2) {\n            let m = this.matrix;\n            let a = m.a, b = m.c, c = m.b, d = m.d;\n            let invDet = 1 / (a * d - b * c);\n            let x = world.x - m.tx, y = world.y - m.ty;\n            world.x = (x * d * invDet - y * b * invDet);\n            world.y = (y * a * invDet - x * c * invDet);\n            return world;\n        }\n\n        localToWorld(local: Vector2) {\n            let m = this.matrix;\n            let x = local.x, y = local.y;\n            local.x = x * m.a + y * m.c + m.tx;\n            local.y = x * m.b + y * m.d + m.ty;\n            return local;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class BoneData {\n        index: number;\n        name: string;\n        parent: BoneData;\n        length: number;\n        x = 0;\n        y = 0;\n        rotation = 0;\n        scaleX = 1;\n        scaleY = 1;\n        shearX = 0;\n        shearY = 0;\n        transformMode = TransformMode.Normal;\n\n        constructor(index: number, name: string, parent: BoneData) {\n            if (index < 0) throw new Error(\"index must be >= 0.\");\n            if (name == null) throw new Error(\"name cannot be null.\");\n            this.index = index;\n            this.name = name;\n            this.parent = parent;\n        }\n    }\n\n    export enum TransformMode {\n        Normal, OnlyTranslation, NoRotationOrReflection, NoScale, NoScaleOrReflection\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License v2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export interface Constraint extends Updatable {\n        getOrder(): number;\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class Event {\n        data: EventData;\n        intValue: number;\n        floatValue: number;\n        stringValue: string;\n        time: number;\n\n        constructor(time: number, data: EventData) {\n            if (data == null) throw new Error(\"data cannot be null.\");\n            this.time = time;\n            this.data = data;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class EventData {\n        name: string;\n        intValue: number;\n        floatValue: number;\n        stringValue: string;\n\n        constructor (name: string) {\n            this.name = name;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class IkConstraint implements Constraint {\n        data: IkConstraintData;\n        bones: Array<Bone>;\n        target: Bone;\n        mix = 1;\n        bendDirection = 0;\n\n        level = 0;\n\n        constructor(data: IkConstraintData, skeleton: Skeleton) {\n            if (data == null) throw new Error(\"data cannot be null.\");\n            if (skeleton == null) throw new Error(\"skeleton cannot be null.\");\n            this.data = data;\n            this.mix = data.mix;\n            this.bendDirection = data.bendDirection;\n\n            this.bones = new Array<Bone>();\n            for (let i = 0; i < data.bones.length; i++)\n                this.bones.push(skeleton.findBone(data.bones[i].name));\n            this.target = skeleton.findBone(data.target.name);\n        }\n\n        getOrder() {\n            return this.data.order;\n        }\n\n        apply() {\n            this.update();\n        }\n\n        update() {\n            let target = this.target;\n            let bones = this.bones;\n            switch (bones.length) {\n                case 1:\n                    this.apply1(bones[0], target.worldX, target.worldY, this.mix);\n                    break;\n                case 2:\n                    this.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.mix);\n                    break;\n            }\n        }\n\n        /** Adjusts the bone rotation so the tip is as close to the target position as possible. The target is specified in the world\n         * coordinate system. */\n        apply1(bone: Bone, targetX: number, targetY: number, alpha: number) {\n            if (!bone.appliedValid) bone.updateAppliedTransform();\n            let pp = bone.parent.matrix;\n            let id = 1 / (pp.a * pp.d - pp.b * pp.c);\n            let x = targetX - pp.tx, y = targetY - pp.ty;\n            let tx = (x * pp.d - y * pp.c) * id - bone.ax, ty = (y * pp.a - x * pp.b) * id - bone.ay;\n            let rotationIK = Math.atan2(ty, tx) * MathUtils.radDeg - bone.ashearX - bone.arotation;\n            if (bone.ascaleX < 0) rotationIK += 180;\n            if (rotationIK > 180)\n                rotationIK -= 360;\n            else if (rotationIK < -180) rotationIK += 360;\n            bone.updateWorldTransformWith(bone.ax, bone.ay, bone.arotation + rotationIK * alpha, bone.ascaleX, bone.ascaleY, bone.ashearX,\n                bone.ashearY);\n        }\n\n        /** Adjusts the parent and child bone rotations so the tip of the child is as close to the target position as possible. The\n         * target is specified in the world coordinate system.\n         * @param child A direct descendant of the parent bone. */\n        apply2(parent: Bone, child: Bone, targetX: number, targetY: number, bendDir: number, alpha: number) {\n            if (alpha == 0) {\n                child.updateWorldTransform();\n                return;\n            }\n            if (!parent.appliedValid) parent.updateAppliedTransform();\n            if (!child.appliedValid) child.updateAppliedTransform();\n            let px = parent.ax, py = parent.ay, psx = parent.ascaleX, psy = parent.ascaleY, csx = child.ascaleX;\n\n            let os1 = 0, os2 = 0, s2 = 0;\n            if (psx < 0) {\n                psx = -psx;\n                os1 = 180;\n                s2 = -1;\n            } else {\n                os1 = 0;\n                s2 = 1;\n            }\n            if (psy < 0) {\n                psy = -psy;\n                s2 = -s2;\n            }\n            if (csx < 0) {\n                csx = -csx;\n                os2 = 180;\n            } else\n                os2 = 0;\n            let pm = parent.matrix;\n            let cx = child.ax, cy = 0, cwx = 0, cwy = 0, a = pm.a, b = pm.c, c = pm.b, d = pm.d;\n            let u = Math.abs(psx - psy) <= 0.0001;\n            if (!u) {\n                cy = 0;\n                cwx = a * cx + pm.tx;\n                cwy = c * cx + pm.ty;\n            } else {\n                cy = child.ay;\n                cwx = a * cx + b * cy + pm.tx;\n                cwy = c * cx + d * cy + pm.ty;\n            }\n            let pp = parent.parent;\n            let ppm = parent.parent.matrix;\n            a = ppm.a;\n            b = ppm.c;\n            c = ppm.b;\n            d = ppm.d;\n            let id = 1 / (a * d - b * c), x = targetX - ppm.tx, y = targetY - ppm.ty;\n            let tx = (x * d - y * b) * id - px, ty = (y * a - x * c) * id - py;\n            x = cwx - ppm.tx;\n            y = cwy - ppm.ty;\n            let dx = (x * d - y * b) * id - px, dy = (y * a - x * c) * id - py;\n            let l1 = Math.sqrt(dx * dx + dy * dy), l2 = child.data.length * csx, a1 = 0, a2 = 0;\n            outer:\n                if (u) {\n                    l2 *= psx;\n                    let cos = (tx * tx + ty * ty - l1 * l1 - l2 * l2) / (2 * l1 * l2);\n                    if (cos < -1)\n                        cos = -1;\n                    else if (cos > 1) cos = 1;\n                    a2 = Math.acos(cos) * bendDir;\n                    a = l1 + l2 * cos;\n                    b = l2 * Math.sin(a2);\n                    a1 = Math.atan2(ty * a - tx * b, tx * a + ty * b);\n                } else {\n                    a = psx * l2;\n                    b = psy * l2;\n                    let aa = a * a, bb = b * b, dd = tx * tx + ty * ty, ta = Math.atan2(ty, tx);\n                    c = bb * l1 * l1 + aa * dd - aa * bb;\n                    let c1 = -2 * bb * l1, c2 = bb - aa;\n                    d = c1 * c1 - 4 * c2 * c;\n                    if (d >= 0) {\n                        let q = Math.sqrt(d);\n                        if (c1 < 0) q = -q;\n                        q = -(c1 + q) / 2;\n                        let r0 = q / c2, r1 = c / q;\n                        let r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;\n                        if (r * r <= dd) {\n                            y = Math.sqrt(dd - r * r) * bendDir;\n                            a1 = ta - Math.atan2(y, r);\n                            a2 = Math.atan2(y / psy, (r - l1) / psx);\n                            break outer;\n                        }\n                    }\n                    let minAngle = 0, minDist = Number.MAX_VALUE, minX = 0, minY = 0;\n                    let maxAngle = 0, maxDist = 0, maxX = 0, maxY = 0;\n                    x = l1 + a;\n                    d = x * x;\n                    if (d > maxDist) {\n                        maxAngle = 0;\n                        maxDist = d;\n                        maxX = x;\n                    }\n                    x = l1 - a;\n                    d = x * x;\n                    if (d < minDist) {\n                        minAngle = MathUtils.PI;\n                        minDist = d;\n                        minX = x;\n                    }\n                    let angle = Math.acos(-a * l1 / (aa - bb));\n                    x = a * Math.cos(angle) + l1;\n                    y = b * Math.sin(angle);\n                    d = x * x + y * y;\n                    if (d < minDist) {\n                        minAngle = angle;\n                        minDist = d;\n                        minX = x;\n                        minY = y;\n                    }\n                    if (d > maxDist) {\n                        maxAngle = angle;\n                        maxDist = d;\n                        maxX = x;\n                        maxY = y;\n                    }\n                    if (dd <= (minDist + maxDist) / 2) {\n                        a1 = ta - Math.atan2(minY * bendDir, minX);\n                        a2 = minAngle * bendDir;\n                    } else {\n                        a1 = ta - Math.atan2(maxY * bendDir, maxX);\n                        a2 = maxAngle * bendDir;\n                    }\n                }\n            let os = Math.atan2(cy, cx) * s2;\n            let rotation = parent.arotation;\n            a1 = (a1 - os) * MathUtils.radDeg + os1 - rotation;\n            if (a1 > 180)\n                a1 -= 360;\n            else if (a1 < -180) a1 += 360;\n            parent.updateWorldTransformWith(px, py, rotation + a1 * alpha, parent.ascaleX, parent.ascaleY, 0, 0);\n            rotation = child.arotation;\n            a2 = ((a2 + os) * MathUtils.radDeg - child.ashearX) * s2 + os2 - rotation;\n            if (a2 > 180)\n                a2 -= 360;\n            else if (a2 < -180) a2 += 360;\n            child.updateWorldTransformWith(cx, cy, rotation + a2 * alpha, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class IkConstraintData {\n        name: string;\n        order = 0;\n        bones = new Array<BoneData>();\n        target: BoneData;\n        bendDirection = 1;\n        mix = 1;\n\n        constructor(name: string) {\n            this.name = name;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class PathConstraint implements Constraint {\n        static NONE = -1;\n        static BEFORE = -2;\n        static AFTER = -3;\n\n        data: PathConstraintData;\n        bones: Array<Bone>;\n        target: Slot;\n        position = 0;\n        spacing = 0;\n        rotateMix = 0;\n        translateMix = 0;\n\n        spaces = new Array<number>();\n        positions = new Array<number>();\n        world = new Array<number>();\n        curves = new Array<number>();\n        lengths = new Array<number>();\n        segments = new Array<number>();\n\n        constructor(data: PathConstraintData, skeleton: Skeleton) {\n            if (data == null) throw new Error(\"data cannot be null.\");\n            if (skeleton == null) throw new Error(\"skeleton cannot be null.\");\n            this.data = data;\n            this.bones = new Array<Bone>();\n            for (let i = 0, n = data.bones.length; i < n; i++)\n                this.bones.push(skeleton.findBone(data.bones[i].name));\n            this.target = skeleton.findSlot(data.target.name);\n            this.position = data.position;\n            this.spacing = data.spacing;\n            this.rotateMix = data.rotateMix;\n            this.translateMix = data.translateMix;\n        }\n\n        apply() {\n            this.update();\n        }\n\n        update() {\n            let attachment = this.target.getAttachment();\n            if (!(attachment instanceof PathAttachment)) return;\n\n            let rotateMix = this.rotateMix, translateMix = this.translateMix;\n            let translate = translateMix > 0, rotate = rotateMix > 0;\n            if (!translate && !rotate) return;\n\n            let data = this.data;\n            let spacingMode = data.spacingMode;\n            let lengthSpacing = spacingMode == SpacingMode.Length;\n            let rotateMode = data.rotateMode;\n            let tangents = rotateMode == RotateMode.Tangent, scale = rotateMode == RotateMode.ChainScale;\n            let boneCount = this.bones.length, spacesCount = tangents ? boneCount : boneCount + 1;\n            let bones = this.bones;\n            let spaces = Utils.setArraySize(this.spaces, spacesCount), lengths: Array<number> = null;\n            let spacing = this.spacing;\n            if (scale || lengthSpacing) {\n                if (scale) lengths = Utils.setArraySize(this.lengths, boneCount);\n                for (let i = 0, n = spacesCount - 1; i < n;) {\n                    let bone = bones[i];\n                    let m = bone.matrix;\n                    let length = bone.data.length, x = length * m.a, y = length * m.b;\n                    length = Math.sqrt(x * x + y * y);\n                    if (scale) lengths[i] = length;\n                    spaces[++i] = lengthSpacing ? Math.max(0, length + spacing) : spacing;\n                }\n            } else {\n                for (let i = 1; i < spacesCount; i++)\n                    spaces[i] = spacing;\n            }\n\n            let positions = this.computeWorldPositions(<PathAttachment>attachment, spacesCount, tangents,\n                data.positionMode == PositionMode.Percent, spacingMode == SpacingMode.Percent);\n            let boneX = positions[0], boneY = positions[1], offsetRotation = data.offsetRotation;\n            let tip = false;\n            if (offsetRotation == 0)\n                tip = rotateMode == RotateMode.Chain;\n            else {\n                tip = false;\n                let pm = this.target.bone.matrix;\n                offsetRotation *= pm.a * pm.d - pm.b * pm.c > 0 ? MathUtils.degRad : -MathUtils.degRad;\n            }\n            for (let i = 0, p = 3; i < boneCount; i++, p += 3) {\n                let bone = bones[i];\n                let m = bone.matrix;\n                m.tx += (boneX - m.tx) * translateMix;\n                m.ty += (boneY - m.ty) * translateMix;\n                let x = positions[p], y = positions[p + 1], dx = x - boneX, dy = y - boneY;\n                if (scale) {\n                    let length = lengths[i];\n                    if (length != 0) {\n                        let s = (Math.sqrt(dx * dx + dy * dy) / length - 1) * rotateMix + 1;\n                        m.a *= s;\n                        m.b *= s;\n                    }\n                }\n                boneX = x;\n                boneY = y;\n                if (rotate) {\n                    let a = m.a, b = m.c, c = m.b, d = m.d, r = 0, cos = 0, sin = 0;\n                    if (tangents)\n                        r = positions[p - 1];\n                    else if (spaces[i + 1] == 0)\n                        r = positions[p + 2];\n                    else\n                        r = Math.atan2(dy, dx);\n                    r -= Math.atan2(c, a);\n                    if (tip) {\n                        cos = Math.cos(r);\n                        sin = Math.sin(r);\n                        let length = bone.data.length;\n                        boneX += (length * (cos * a - sin * c) - dx) * rotateMix;\n                        boneY += (length * (sin * a + cos * c) - dy) * rotateMix;\n                    } else {\n                        r += offsetRotation;\n                    }\n                    if (r > MathUtils.PI)\n                        r -= MathUtils.PI2;\n                    else if (r < -MathUtils.PI)\n                        r += MathUtils.PI2;\n                    r *= rotateMix;\n                    cos = Math.cos(r);\n                    sin = Math.sin(r);\n                    m.a = cos * a - sin * c;\n                    m.c = cos * b - sin * d;\n                    m.b = sin * a + cos * c;\n                    m.d = sin * b + cos * d;\n                }\n                bone.appliedValid = false;\n            }\n        }\n\n        computeWorldPositions(path: PathAttachment, spacesCount: number, tangents: boolean, percentPosition: boolean,\n                              percentSpacing: boolean) {\n            let target = this.target;\n            let position = this.position;\n            let spaces = this.spaces, out = Utils.setArraySize(this.positions, spacesCount * 3 + 2), world: Array<number> = null;\n            let closed = path.closed;\n            let verticesLength = path.worldVerticesLength, curveCount = verticesLength / 6, prevCurve = PathConstraint.NONE;\n\n            if (!path.constantSpeed) {\n                let lengths = path.lengths;\n                curveCount -= closed ? 1 : 2;\n                let pathLength = lengths[curveCount];\n                if (percentPosition) position *= pathLength;\n                if (percentSpacing) {\n                    for (let i = 0; i < spacesCount; i++)\n                        spaces[i] *= pathLength;\n                }\n                world = Utils.setArraySize(this.world, 8);\n                for (let i = 0, o = 0, curve = 0; i < spacesCount; i++, o += 3) {\n                    let space = spaces[i];\n                    position += space;\n                    let p = position;\n\n                    if (closed) {\n                        p %= pathLength;\n                        if (p < 0) p += pathLength;\n                        curve = 0;\n                    } else if (p < 0) {\n                        if (prevCurve != PathConstraint.BEFORE) {\n                            prevCurve = PathConstraint.BEFORE;\n                            path.computeWorldVerticesWith(target, 2, 4, world, 0);\n                        }\n                        this.addBeforePosition(p, world, 0, out, o);\n                        continue;\n                    } else if (p > pathLength) {\n                        if (prevCurve != PathConstraint.AFTER) {\n                            prevCurve = PathConstraint.AFTER;\n                            path.computeWorldVerticesWith(target, verticesLength - 6, 4, world, 0);\n                        }\n                        this.addAfterPosition(p - pathLength, world, 0, out, o);\n                        continue;\n                    }\n\n                    // Determine curve containing position.\n                    for (; ; curve++) {\n                        let length = lengths[curve];\n                        if (p > length) continue;\n                        if (curve == 0)\n                            p /= length;\n                        else {\n                            let prev = lengths[curve - 1];\n                            p = (p - prev) / (length - prev);\n                        }\n                        break;\n                    }\n                    if (curve != prevCurve) {\n                        prevCurve = curve;\n                        if (closed && curve == curveCount) {\n                            path.computeWorldVerticesWith(target, verticesLength - 4, 4, world, 0);\n                            path.computeWorldVerticesWith(target, 0, 4, world, 4);\n                        } else\n                            path.computeWorldVerticesWith(target, curve * 6 + 2, 8, world, 0);\n                    }\n                    this.addCurvePosition(p, world[0], world[1], world[2], world[3], world[4], world[5], world[6], world[7], out, o,\n                        tangents || (i > 0 && space == 0));\n                }\n                return out;\n            }\n\n            // World vertices.\n            if (closed) {\n                verticesLength += 2;\n                world = Utils.setArraySize(this.world, verticesLength);\n                path.computeWorldVerticesWith(target, 2, verticesLength - 4, world, 0);\n                path.computeWorldVerticesWith(target, 0, 2, world, verticesLength - 4);\n                world[verticesLength - 2] = world[0];\n                world[verticesLength - 1] = world[1];\n            } else {\n                curveCount--;\n                verticesLength -= 4;\n                world = Utils.setArraySize(this.world, verticesLength);\n                path.computeWorldVerticesWith(target, 2, verticesLength, world, 0);\n            }\n\n            // Curve lengths.\n            let curves = Utils.setArraySize(this.curves, curveCount);\n            let pathLength = 0;\n            let x1 = world[0], y1 = world[1], cx1 = 0, cy1 = 0, cx2 = 0, cy2 = 0, x2 = 0, y2 = 0;\n            let tmpx = 0, tmpy = 0, dddfx = 0, dddfy = 0, ddfx = 0, ddfy = 0, dfx = 0, dfy = 0;\n            for (let i = 0, w = 2; i < curveCount; i++, w += 6) {\n                cx1 = world[w];\n                cy1 = world[w + 1];\n                cx2 = world[w + 2];\n                cy2 = world[w + 3];\n                x2 = world[w + 4];\n                y2 = world[w + 5];\n                tmpx = (x1 - cx1 * 2 + cx2) * 0.1875;\n                tmpy = (y1 - cy1 * 2 + cy2) * 0.1875;\n                dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;\n                dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;\n                ddfx = tmpx * 2 + dddfx;\n                ddfy = tmpy * 2 + dddfy;\n                dfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;\n                dfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;\n                pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                dfx += ddfx;\n                dfy += ddfy;\n                ddfx += dddfx;\n                ddfy += dddfy;\n                pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                dfx += ddfx;\n                dfy += ddfy;\n                pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                dfx += ddfx + dddfx;\n                dfy += ddfy + dddfy;\n                pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                curves[i] = pathLength;\n                x1 = x2;\n                y1 = y2;\n            }\n            if (percentPosition) position *= pathLength;\n            if (percentSpacing) {\n                for (let i = 0; i < spacesCount; i++)\n                    spaces[i] *= pathLength;\n            }\n\n            let segments = this.segments;\n            let curveLength = 0;\n            for (let i = 0, o = 0, curve = 0, segment = 0; i < spacesCount; i++, o += 3) {\n                let space = spaces[i];\n                position += space;\n                let p = position;\n\n                if (closed) {\n                    p %= pathLength;\n                    if (p < 0) p += pathLength;\n                    curve = 0;\n                } else if (p < 0) {\n                    this.addBeforePosition(p, world, 0, out, o);\n                    continue;\n                } else if (p > pathLength) {\n                    this.addAfterPosition(p - pathLength, world, verticesLength - 4, out, o);\n                    continue;\n                }\n\n                // Determine curve containing position.\n                for (; ; curve++) {\n                    let length = curves[curve];\n                    if (p > length) continue;\n                    if (curve == 0)\n                        p /= length;\n                    else {\n                        let prev = curves[curve - 1];\n                        p = (p - prev) / (length - prev);\n                    }\n                    break;\n                }\n\n                // Curve segment lengths.\n                if (curve != prevCurve) {\n                    prevCurve = curve;\n                    let ii = curve * 6;\n                    x1 = world[ii];\n                    y1 = world[ii + 1];\n                    cx1 = world[ii + 2];\n                    cy1 = world[ii + 3];\n                    cx2 = world[ii + 4];\n                    cy2 = world[ii + 5];\n                    x2 = world[ii + 6];\n                    y2 = world[ii + 7];\n                    tmpx = (x1 - cx1 * 2 + cx2) * 0.03;\n                    tmpy = (y1 - cy1 * 2 + cy2) * 0.03;\n                    dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;\n                    dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;\n                    ddfx = tmpx * 2 + dddfx;\n                    ddfy = tmpy * 2 + dddfy;\n                    dfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;\n                    dfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;\n                    curveLength = Math.sqrt(dfx * dfx + dfy * dfy);\n                    segments[0] = curveLength;\n                    for (ii = 1; ii < 8; ii++) {\n                        dfx += ddfx;\n                        dfy += ddfy;\n                        ddfx += dddfx;\n                        ddfy += dddfy;\n                        curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                        segments[ii] = curveLength;\n                    }\n                    dfx += ddfx;\n                    dfy += ddfy;\n                    curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                    segments[8] = curveLength;\n                    dfx += ddfx + dddfx;\n                    dfy += ddfy + dddfy;\n                    curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                    segments[9] = curveLength;\n                    segment = 0;\n                }\n\n                // Weight by segment length.\n                p *= curveLength;\n                for (; ; segment++) {\n                    let length = segments[segment];\n                    if (p > length) continue;\n                    if (segment == 0)\n                        p /= length;\n                    else {\n                        let prev = segments[segment - 1];\n                        p = segment + (p - prev) / (length - prev);\n                    }\n                    break;\n                }\n                this.addCurvePosition(p * 0.1, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents || (i > 0 && space == 0));\n            }\n            return out;\n        }\n\n        addBeforePosition(p: number, temp: Array<number>, i: number, out: Array<number>, o: number) {\n            let x1 = temp[i], y1 = temp[i + 1], dx = temp[i + 2] - x1, dy = temp[i + 3] - y1, r = Math.atan2(dy, dx);\n            out[o] = x1 + p * Math.cos(r);\n            out[o + 1] = y1 + p * Math.sin(r);\n            out[o + 2] = r;\n        }\n\n        addAfterPosition(p: number, temp: Array<number>, i: number, out: Array<number>, o: number) {\n            let x1 = temp[i + 2], y1 = temp[i + 3], dx = x1 - temp[i], dy = y1 - temp[i + 1], r = Math.atan2(dy, dx);\n            out[o] = x1 + p * Math.cos(r);\n            out[o + 1] = y1 + p * Math.sin(r);\n            out[o + 2] = r;\n        }\n\n        addCurvePosition(p: number, x1: number, y1: number, cx1: number, cy1: number, cx2: number, cy2: number, x2: number, y2: number,\n                         out: Array<number>, o: number, tangents: boolean) {\n            if (p == 0 || isNaN(p)) p = 0.0001;\n            let tt = p * p, ttt = tt * p, u = 1 - p, uu = u * u, uuu = uu * u;\n            let ut = u * p, ut3 = ut * 3, uut3 = u * ut3, utt3 = ut3 * p;\n            let x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt, y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;\n            out[o] = x;\n            out[o + 1] = y;\n            if (tangents) out[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt), x - (x1 * uu + cx1 * ut * 2 + cx2 * tt));\n        }\n\n        getOrder() {\n            return this.data.order;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class PathConstraintData {\n        name: string;\n        order = 0;\n        bones = new Array<BoneData>();\n        target: SlotData;\n        positionMode: PositionMode;\n        spacingMode: SpacingMode;\n        rotateMode: RotateMode;\n        offsetRotation: number;\n        position: number;\n        spacing: number;\n        rotateMix: number;\n        translateMix: number;\n\n        constructor(name: string) {\n            this.name = name;\n        }\n    }\n\n    export enum PositionMode {\n        Fixed, Percent\n    }\n\n    export enum SpacingMode {\n        Length, Fixed, Percent\n    }\n\n    export enum RotateMode {\n        Tangent, Chain, ChainScale\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class Skeleton {\n        data: SkeletonData;\n        bones: Array<Bone>;\n        slots: Array<Slot>;\n        drawOrder: Array<Slot>;\n        ikConstraints: Array<IkConstraint>;\n        transformConstraints: Array<TransformConstraint>;\n        pathConstraints: Array<PathConstraint>;\n        _updateCache = new Array<Updatable>();\n        updateCacheReset = new Array<Updatable>();\n        skin: Skin;\n        color: Color;\n        time = 0;\n        flipX = false;\n        flipY = false;\n        x = 0;\n        y = 0;\n\n        constructor(data: SkeletonData) {\n            if (data == null) throw new Error(\"data cannot be null.\");\n            this.data = data;\n\n            this.bones = new Array<Bone>();\n            for (let i = 0; i < data.bones.length; i++) {\n                let boneData = data.bones[i];\n                let bone: Bone;\n                if (boneData.parent == null)\n                    bone = new Bone(boneData, this, null);\n                else {\n                    let parent = this.bones[boneData.parent.index];\n                    bone = new Bone(boneData, this, parent);\n                    parent.children.push(bone);\n                }\n                this.bones.push(bone);\n            }\n\n            this.slots = new Array<Slot>();\n            this.drawOrder = new Array<Slot>();\n            for (let i = 0; i < data.slots.length; i++) {\n                let slotData = data.slots[i];\n                let bone = this.bones[slotData.boneData.index];\n                let slot = new Slot(slotData, bone);\n                this.slots.push(slot);\n                this.drawOrder.push(slot);\n            }\n\n            this.ikConstraints = new Array<IkConstraint>();\n            for (let i = 0; i < data.ikConstraints.length; i++) {\n                let ikConstraintData = data.ikConstraints[i];\n                this.ikConstraints.push(new IkConstraint(ikConstraintData, this));\n            }\n\n            this.transformConstraints = new Array<TransformConstraint>();\n            for (let i = 0; i < data.transformConstraints.length; i++) {\n                let transformConstraintData = data.transformConstraints[i];\n                this.transformConstraints.push(new TransformConstraint(transformConstraintData, this));\n            }\n\n            this.pathConstraints = new Array<PathConstraint>();\n            for (let i = 0; i < data.pathConstraints.length; i++) {\n                let pathConstraintData = data.pathConstraints[i];\n                this.pathConstraints.push(new PathConstraint(pathConstraintData, this));\n            }\n\n            this.color = new Color(1, 1, 1, 1);\n            this.updateCache();\n        }\n\n        updateCache() {\n            let updateCache = this._updateCache;\n            updateCache.length = 0;\n\n            let bones = this.bones;\n            for (let i = 0, n = bones.length; i < n; i++)\n                bones[i].sorted = false;\n\n            let ikConstraints = this.ikConstraints;\n            let transformConstraints = this.transformConstraints;\n            let pathConstraints = this.pathConstraints;\n            let ikCount = ikConstraints.length, transformCount = transformConstraints.length, pathCount = pathConstraints.length;\n            let constraintCount = ikCount + transformCount + pathCount;\n\n            outer:\n                for (let i = 0; i < constraintCount; i++) {\n                    for (let ii = 0; ii < ikCount; ii++) {\n                        let constraint = ikConstraints[ii];\n                        if (constraint.data.order == i) {\n                            this.sortIkConstraint(constraint);\n                            continue outer;\n                        }\n                    }\n                    for (let ii = 0; ii < transformCount; ii++) {\n                        let constraint = transformConstraints[ii];\n                        if (constraint.data.order == i) {\n                            this.sortTransformConstraint(constraint);\n                            continue outer;\n                        }\n                    }\n                    for (let ii = 0; ii < pathCount; ii++) {\n                        let constraint = pathConstraints[ii];\n                        if (constraint.data.order == i) {\n                            this.sortPathConstraint(constraint);\n                            continue outer;\n                        }\n                    }\n                }\n\n            for (let i = 0, n = bones.length; i < n; i++)\n                this.sortBone(bones[i]);\n        }\n\n        sortIkConstraint(constraint: IkConstraint) {\n            let target = constraint.target;\n            this.sortBone(target);\n\n            let constrained = constraint.bones;\n            let parent = constrained[0];\n            this.sortBone(parent);\n\n            if (constrained.length > 1) {\n                let child = constrained[constrained.length - 1];\n                if (!(this._updateCache.indexOf(child) > -1)) this.updateCacheReset.push(child);\n            }\n\n            this._updateCache.push(constraint);\n\n            this.sortReset(parent.children);\n            constrained[constrained.length - 1].sorted = true;\n        }\n\n        sortPathConstraint(constraint: PathConstraint) {\n            let slot = constraint.target;\n            let slotIndex = slot.data.index;\n            let slotBone = slot.bone;\n            if (this.skin != null) this.sortPathConstraintAttachment(this.skin, slotIndex, slotBone);\n            if (this.data.defaultSkin != null && this.data.defaultSkin != this.skin)\n                this.sortPathConstraintAttachment(this.data.defaultSkin, slotIndex, slotBone);\n            for (let ii = 0, nn = this.data.skins.length; ii < nn; ii++)\n                this.sortPathConstraintAttachment(this.data.skins[ii], slotIndex, slotBone);\n\n            let attachment = slot.getAttachment();\n            if (attachment instanceof PathAttachment) this.sortPathConstraintAttachmentWith(attachment, slotBone);\n\n            let constrained = constraint.bones;\n            let boneCount = constrained.length;\n            for (let ii = 0; ii < boneCount; ii++)\n                this.sortBone(constrained[ii]);\n\n            this._updateCache.push(constraint);\n\n            for (let ii = 0; ii < boneCount; ii++)\n                this.sortReset(constrained[ii].children);\n            for (let ii = 0; ii < boneCount; ii++)\n                constrained[ii].sorted = true;\n        }\n\n        sortTransformConstraint(constraint: TransformConstraint) {\n            this.sortBone(constraint.target);\n\n            let constrained = constraint.bones;\n            let boneCount = constrained.length;\n            for (let ii = 0; ii < boneCount; ii++)\n                this.sortBone(constrained[ii]);\n\n            this._updateCache.push(constraint);\n\n            for (let ii = 0; ii < boneCount; ii++)\n                this.sortReset(constrained[ii].children);\n            for (let ii = 0; ii < boneCount; ii++)\n                constrained[ii].sorted = true;\n        }\n\n        sortPathConstraintAttachment(skin: Skin, slotIndex: number, slotBone: Bone) {\n            let attachments = skin.attachments[slotIndex];\n            if (!attachments) return;\n            for (let key in attachments) {\n                this.sortPathConstraintAttachmentWith(attachments[key], slotBone);\n            }\n        }\n\n        sortPathConstraintAttachmentWith(attachment: Attachment, slotBone: Bone) {\n            if (!(attachment instanceof PathAttachment)) return;\n            let pathBones = (<PathAttachment>attachment).bones;\n            if (pathBones == null)\n                this.sortBone(slotBone);\n            else {\n                let bones = this.bones;\n                let i = 0;\n                while (i < pathBones.length) {\n                    let boneCount = pathBones[i++];\n                    for (let n = i + boneCount; i < n; i++) {\n                        let boneIndex = pathBones[i];\n                        this.sortBone(bones[boneIndex]);\n                    }\n                }\n            }\n        }\n\n        sortBone(bone: Bone) {\n            if (bone.sorted) return;\n            let parent = bone.parent;\n            if (parent != null) this.sortBone(parent);\n            bone.sorted = true;\n            this._updateCache.push(bone);\n        }\n\n        sortReset(bones: Array<Bone>) {\n            for (let i = 0, n = bones.length; i < n; i++) {\n                let bone = bones[i];\n                if (bone.sorted) this.sortReset(bone.children);\n                bone.sorted = false;\n            }\n        }\n\n        /** Updates the world transform for each bone and applies constraints. */\n        updateWorldTransform() {\n            let updateCacheReset = this.updateCacheReset;\n            for (let i = 0, n = updateCacheReset.length; i < n; i++) {\n                let bone = updateCacheReset[i] as Bone;\n                bone.ax = bone.x;\n                bone.ay = bone.y;\n                bone.arotation = bone.rotation;\n                bone.ascaleX = bone.scaleX;\n                bone.ascaleY = bone.scaleY;\n                bone.ashearX = bone.shearX;\n                bone.ashearY = bone.shearY;\n                bone.appliedValid = true;\n            }\n            let updateCache = this._updateCache;\n            for (let i = 0, n = updateCache.length; i < n; i++)\n                updateCache[i].update();\n        }\n\n        /** Sets the bones, constraints, and slots to their setup pose values. */\n        setToSetupPose() {\n            this.setBonesToSetupPose();\n            this.setSlotsToSetupPose();\n        }\n\n        /** Sets the bones and constraints to their setup pose values. */\n        setBonesToSetupPose() {\n            let bones = this.bones;\n            for (let i = 0, n = bones.length; i < n; i++)\n                bones[i].setToSetupPose();\n\n            let ikConstraints = this.ikConstraints;\n            for (let i = 0, n = ikConstraints.length; i < n; i++) {\n                let constraint = ikConstraints[i];\n                constraint.bendDirection = constraint.data.bendDirection;\n                constraint.mix = constraint.data.mix;\n            }\n\n            let transformConstraints = this.transformConstraints;\n            for (let i = 0, n = transformConstraints.length; i < n; i++) {\n                let constraint = transformConstraints[i];\n                let data = constraint.data;\n                constraint.rotateMix = data.rotateMix;\n                constraint.translateMix = data.translateMix;\n                constraint.scaleMix = data.scaleMix;\n                constraint.shearMix = data.shearMix;\n            }\n\n            let pathConstraints = this.pathConstraints;\n            for (let i = 0, n = pathConstraints.length; i < n; i++) {\n                let constraint = pathConstraints[i];\n                let data = constraint.data;\n                constraint.position = data.position;\n                constraint.spacing = data.spacing;\n                constraint.rotateMix = data.rotateMix;\n                constraint.translateMix = data.translateMix;\n            }\n        }\n\n        setSlotsToSetupPose() {\n            let slots = this.slots;\n            Utils.arrayCopy(slots, 0, this.drawOrder, 0, slots.length);\n            for (let i = 0, n = slots.length; i < n; i++)\n                slots[i].setToSetupPose();\n        }\n\n        /** @return May return null. */\n        getRootBone() {\n            if (this.bones.length == 0) return null;\n            return this.bones[0];\n        }\n\n        /** @return May be null. */\n        findBone(boneName: string) {\n            if (boneName == null) throw new Error(\"boneName cannot be null.\");\n            let bones = this.bones;\n            for (let i = 0, n = bones.length; i < n; i++) {\n                let bone = bones[i];\n                if (bone.data.name == boneName) return bone;\n            }\n            return null;\n        }\n\n        /** @return -1 if the bone was not found. */\n        findBoneIndex(boneName: string) {\n            if (boneName == null) throw new Error(\"boneName cannot be null.\");\n            let bones = this.bones;\n            for (let i = 0, n = bones.length; i < n; i++)\n                if (bones[i].data.name == boneName) return i;\n            return -1;\n        }\n\n        /** @return May be null. */\n        findSlot(slotName: string) {\n            if (slotName == null) throw new Error(\"slotName cannot be null.\");\n            let slots = this.slots;\n            for (let i = 0, n = slots.length; i < n; i++) {\n                let slot = slots[i];\n                if (slot.data.name == slotName) return slot;\n            }\n            return null;\n        }\n\n        /** @return -1 if the bone was not found. */\n        findSlotIndex(slotName: string) {\n            if (slotName == null) throw new Error(\"slotName cannot be null.\");\n            let slots = this.slots;\n            for (let i = 0, n = slots.length; i < n; i++)\n                if (slots[i].data.name == slotName) return i;\n            return -1;\n        }\n\n        /** Sets a skin by name.\n         * @see #setSkin(Skin) */\n        setSkinByName(skinName: string) {\n            let skin = this.data.findSkin(skinName);\n            if (skin == null) throw new Error(\"Skin not found: \" + skinName);\n            this.setSkin(skin);\n        }\n\n        /** Sets the skin used to look up attachments before looking in the {@link SkeletonData#getDefaultSkin() default skin}.\n         * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was no\n         * old skin, each slot's setup mode attachment is attached from the new skin.\n         * @param newSkin May be null. */\n        setSkin(newSkin: Skin) {\n            if (newSkin != null) {\n                if (this.skin != null)\n                    newSkin.attachAll(this, this.skin);\n                else {\n                    let slots = this.slots;\n                    for (let i = 0, n = slots.length; i < n; i++) {\n                        let slot = slots[i];\n                        let name = slot.data.attachmentName;\n                        if (name != null) {\n                            let attachment: Attachment = newSkin.getAttachment(i, name);\n                            if (attachment != null) slot.setAttachment(attachment);\n                        }\n                    }\n                }\n            }\n            this.skin = newSkin;\n        }\n\n        /** @return May be null. */\n        getAttachmentByName(slotName: string, attachmentName: string): Attachment {\n            return this.getAttachment(this.data.findSlotIndex(slotName), attachmentName);\n        }\n\n        /** @return May be null. */\n        getAttachment(slotIndex: number, attachmentName: string): Attachment {\n            if (attachmentName == null) throw new Error(\"attachmentName cannot be null.\");\n            if (this.skin != null) {\n                let attachment: Attachment = this.skin.getAttachment(slotIndex, attachmentName);\n                if (attachment != null) return attachment;\n            }\n            if (this.data.defaultSkin != null) return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);\n            return null;\n        }\n\n        /** @param attachmentName May be null. */\n        setAttachment(slotName: string, attachmentName: string) {\n            if (slotName == null) throw new Error(\"slotName cannot be null.\");\n            let slots = this.slots;\n            for (let i = 0, n = slots.length; i < n; i++) {\n                let slot = slots[i];\n                if (slot.data.name == slotName) {\n                    let attachment: Attachment = null;\n                    if (attachmentName != null) {\n                        attachment = this.getAttachment(i, attachmentName);\n                        if (attachment == null)\n                            throw new Error(\"Attachment not found: \" + attachmentName + \", for slot: \" + slotName);\n                    }\n                    slot.setAttachment(attachment);\n                    return;\n                }\n            }\n            throw new Error(\"Slot not found: \" + slotName);\n        }\n\n        /** @return May be null. */\n        findIkConstraint(constraintName: string) {\n            if (constraintName == null) throw new Error(\"constraintName cannot be null.\");\n            let ikConstraints = this.ikConstraints;\n            for (let i = 0, n = ikConstraints.length; i < n; i++) {\n                let ikConstraint = ikConstraints[i];\n                if (ikConstraint.data.name == constraintName) return ikConstraint;\n            }\n            return null;\n        }\n\n        /** @return May be null. */\n        findTransformConstraint(constraintName: string) {\n            if (constraintName == null) throw new Error(\"constraintName cannot be null.\");\n            let transformConstraints = this.transformConstraints;\n            for (let i = 0, n = transformConstraints.length; i < n; i++) {\n                let constraint = transformConstraints[i];\n                if (constraint.data.name == constraintName) return constraint;\n            }\n            return null;\n        }\n\n        /** @return May be null. */\n        findPathConstraint(constraintName: string) {\n            if (constraintName == null) throw new Error(\"constraintName cannot be null.\");\n            let pathConstraints = this.pathConstraints;\n            for (let i = 0, n = pathConstraints.length; i < n; i++) {\n                let constraint = pathConstraints[i];\n                if (constraint.data.name == constraintName) return constraint;\n            }\n            return null;\n        }\n\n        /** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose.\n         * @param offset The distance from the skeleton origin to the bottom left corner of the AABB.\n         * @param size The width and height of the AABB. */\n        getBounds(offset: Vector2, size: Vector2) {\n            if (offset == null) throw new Error(\"offset cannot be null.\");\n            if (size == null) throw new Error(\"size cannot be null.\");\n            let drawOrder = this.drawOrder;\n            let minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY;\n            for (let i = 0, n = drawOrder.length; i < n; i++) {\n                let slot = drawOrder[i];\n                let vertices: ArrayLike<number> = null;\n                let attachment = slot.getAttachment();\n                if (attachment instanceof RegionAttachment)\n                    vertices = (<RegionAttachment>attachment).updateWorldVertices(slot, false);\n                else if (attachment instanceof MeshAttachment)\n                    vertices = (<MeshAttachment>attachment).updateWorldVertices(slot, true);\n                if (vertices != null) {\n                    for (let ii = 0, nn = vertices.length; ii < nn; ii += 8) {\n                        let x = vertices[ii], y = vertices[ii + 1];\n                        minX = Math.min(minX, x);\n                        minY = Math.min(minY, y);\n                        maxX = Math.max(maxX, x);\n                        maxY = Math.max(maxY, y);\n                    }\n                }\n            }\n            offset.set(minX, minY);\n            size.set(maxX - minX, maxY - minY);\n        }\n\n        update(delta: number) {\n            this.time += delta;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class SkeletonBounds {\n        minX = 0;\n        minY = 0;\n        maxX = 0;\n        maxY = 0;\n        boundingBoxes = new Array<BoundingBoxAttachment>();\n        polygons = new Array<ArrayLike<number>>();\n        private polygonPool = new Pool<ArrayLike<number>>(() => {\n            return Utils.newFloatArray(16);\n        });\n\n        update(skeleton: Skeleton, updateAabb: boolean) {\n            if (skeleton == null) throw new Error(\"skeleton cannot be null.\");\n            let boundingBoxes = this.boundingBoxes;\n            let polygons = this.polygons;\n            let polygonPool = this.polygonPool;\n            let slots = skeleton.slots;\n            let slotCount = slots.length;\n\n            boundingBoxes.length = 0;\n            polygonPool.freeAll(polygons);\n            polygons.length = 0;\n\n            for (let i = 0; i < slotCount; i++) {\n                let slot = slots[i];\n                let attachment = slot.getAttachment();\n                if (attachment instanceof BoundingBoxAttachment) {\n                    let boundingBox = attachment as BoundingBoxAttachment;\n                    boundingBoxes.push(boundingBox);\n\n                    let polygon = polygonPool.obtain();\n                    if (polygon.length != boundingBox.worldVerticesLength) {\n                        polygon = Utils.newFloatArray(boundingBox.worldVerticesLength);\n                    }\n                    polygons.push(polygon);\n                    boundingBox.computeWorldVertices(slot, polygon);\n                }\n            }\n\n            if (updateAabb) this.aabbCompute();\n        }\n\n        aabbCompute() {\n            let minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY;\n            let polygons = this.polygons;\n            for (let i = 0, n = polygons.length; i < n; i++) {\n                let polygon = polygons[i];\n                let vertices = polygon;\n                for (let ii = 0, nn = polygon.length; ii < nn; ii += 2) {\n                    let x = vertices[ii];\n                    let y = vertices[ii + 1];\n                    minX = Math.min(minX, x);\n                    minY = Math.min(minY, y);\n                    maxX = Math.max(maxX, x);\n                    maxY = Math.max(maxY, y);\n                }\n            }\n            this.minX = minX;\n            this.minY = minY;\n            this.maxX = maxX;\n            this.maxY = maxY;\n        }\n\n        /** Returns true if the axis aligned bounding box contains the point. */\n        aabbContainsPoint(x: number, y: number) {\n            return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;\n        }\n\n        /** Returns true if the axis aligned bounding box intersects the line segment. */\n        aabbIntersectsSegment(x1: number, y1: number, x2: number, y2: number) {\n            let minX = this.minX;\n            let minY = this.minY;\n            let maxX = this.maxX;\n            let maxY = this.maxY;\n            if ((x1 <= minX && x2 <= minX) || (y1 <= minY && y2 <= minY) || (x1 >= maxX && x2 >= maxX) || (y1 >= maxY && y2 >= maxY))\n                return false;\n            let m = (y2 - y1) / (x2 - x1);\n            let y = m * (minX - x1) + y1;\n            if (y > minY && y < maxY) return true;\n            y = m * (maxX - x1) + y1;\n            if (y > minY && y < maxY) return true;\n            let x = (minY - y1) / m + x1;\n            if (x > minX && x < maxX) return true;\n            x = (maxY - y1) / m + x1;\n            if (x > minX && x < maxX) return true;\n            return false;\n        }\n\n        /** Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds. */\n        aabbIntersectsSkeleton(bounds: SkeletonBounds) {\n            return this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY && this.maxY > bounds.minY;\n        }\n\n        /** Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more\n         * efficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true. */\n        containsPoint(x: number, y: number): BoundingBoxAttachment {\n            let polygons = this.polygons;\n            for (let i = 0, n = polygons.length; i < n; i++)\n                if (this.containsPointPolygon(polygons[i], x, y)) return this.boundingBoxes[i];\n            return null;\n        }\n\n        /** Returns true if the polygon contains the point. */\n        containsPointPolygon(polygon: ArrayLike<number>, x: number, y: number) {\n            let vertices = polygon;\n            let nn = polygon.length;\n\n            let prevIndex = nn - 2;\n            let inside = false;\n            for (let ii = 0; ii < nn; ii += 2) {\n                let vertexY = vertices[ii + 1];\n                let prevY = vertices[prevIndex + 1];\n                if ((vertexY < y && prevY >= y) || (prevY < y && vertexY >= y)) {\n                    let vertexX = vertices[ii];\n                    if (vertexX + (y - vertexY) / (prevY - vertexY) * (vertices[prevIndex] - vertexX) < x) inside = !inside;\n                }\n                prevIndex = ii;\n            }\n            return inside;\n        }\n\n        /** Returns the first bounding box attachment that contains any part of the line segment, or null. When doing many checks, it\n         * is usually more efficient to only call this method if {@link #aabbIntersectsSegment(float, float, float, float)} returns\n         * true. */\n        intersectsSegment(x1: number, y1: number, x2: number, y2: number) {\n            let polygons = this.polygons;\n            for (let i = 0, n = polygons.length; i < n; i++)\n                if (this.intersectsSegmentPolygon(polygons[i], x1, y1, x2, y2)) return this.boundingBoxes[i];\n            return null;\n        }\n\n        /** Returns true if the polygon contains any part of the line segment. */\n        intersectsSegmentPolygon(polygon: ArrayLike<number>, x1: number, y1: number, x2: number, y2: number) {\n            let vertices = polygon;\n            let nn = polygon.length;\n\n            let width12 = x1 - x2, height12 = y1 - y2;\n            let det1 = x1 * y2 - y1 * x2;\n            let x3 = vertices[nn - 2], y3 = vertices[nn - 1];\n            for (let ii = 0; ii < nn; ii += 2) {\n                let x4 = vertices[ii], y4 = vertices[ii + 1];\n                let det2 = x3 * y4 - y3 * x4;\n                let width34 = x3 - x4, height34 = y3 - y4;\n                let det3 = width12 * height34 - height12 * width34;\n                let x = (det1 * width34 - width12 * det2) / det3;\n                if (((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) && ((x >= x1 && x <= x2) || (x >= x2 && x <= x1))) {\n                    let y = (det1 * height34 - height12 * det2) / det3;\n                    if (((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) && ((y >= y1 && y <= y2) || (y >= y2 && y <= y1))) return true;\n                }\n                x3 = x4;\n                y3 = y4;\n            }\n            return false;\n        }\n\n        /** Returns the polygon for the specified bounding box, or null. */\n        getPolygon(boundingBox: BoundingBoxAttachment) {\n            if (boundingBox == null) throw new Error(\"boundingBox cannot be null.\");\n            let index = this.boundingBoxes.indexOf(boundingBox);\n            return index == -1 ? null : this.polygons[index];\n        }\n\n        getWidth() {\n            return this.maxX - this.minX;\n        }\n\n        getHeight() {\n            return this.maxY - this.minY;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class SkeletonData {\n        name: string;\n        bones = new Array<BoneData>(); // Ordered parents first.\n        slots = new Array<SlotData>(); // Setup pose draw order.\n        skins = new Array<Skin>();\n        defaultSkin: Skin;\n        events = new Array<EventData>();\n        animations = new Array<Animation>();\n        ikConstraints = new Array<IkConstraintData>();\n        transformConstraints = new Array<TransformConstraintData>();\n        pathConstraints = new Array<PathConstraintData>();\n        width: number;\n        height: number;\n        version: string;\n        hash: string;\n\n        // Nonessential\n        fps = 0;\n        imagesPath: string;\n\n        findBone(boneName: string) {\n            if (boneName == null) throw new Error(\"boneName cannot be null.\");\n            let bones = this.bones;\n            for (let i = 0, n = bones.length; i < n; i++) {\n                let bone = bones[i];\n                if (bone.name == boneName) return bone;\n            }\n            return null;\n        }\n\n        findBoneIndex(boneName: string) {\n            if (boneName == null) throw new Error(\"boneName cannot be null.\");\n            let bones = this.bones;\n            for (let i = 0, n = bones.length; i < n; i++)\n                if (bones[i].name == boneName) return i;\n            return -1;\n        }\n\n        findSlot(slotName: string) {\n            if (slotName == null) throw new Error(\"slotName cannot be null.\");\n            let slots = this.slots;\n            for (let i = 0, n = slots.length; i < n; i++) {\n                let slot = slots[i];\n                if (slot.name == slotName) return slot;\n            }\n            return null;\n        }\n\n        findSlotIndex(slotName: string) {\n            if (slotName == null) throw new Error(\"slotName cannot be null.\");\n            let slots = this.slots;\n            for (let i = 0, n = slots.length; i < n; i++)\n                if (slots[i].name == slotName) return i;\n            return -1;\n        }\n\n        findSkin(skinName: string) {\n            if (skinName == null) throw new Error(\"skinName cannot be null.\");\n            let skins = this.skins;\n            for (let i = 0, n = skins.length; i < n; i++) {\n                let skin = skins[i];\n                if (skin.name == skinName) return skin;\n            }\n            return null;\n        }\n\n        findEvent(eventDataName: string) {\n            if (eventDataName == null) throw new Error(\"eventDataName cannot be null.\");\n            let events = this.events;\n            for (let i = 0, n = events.length; i < n; i++) {\n                let event = events[i];\n                if (event.name == eventDataName) return event;\n            }\n            return null;\n        }\n\n        findAnimation(animationName: string) {\n            if (animationName == null) throw new Error(\"animationName cannot be null.\");\n            let animations = this.animations;\n            for (let i = 0, n = animations.length; i < n; i++) {\n                let animation = animations[i];\n                if (animation.name == animationName) return animation;\n            }\n            return null;\n        }\n\n        findIkConstraint(constraintName: string) {\n            if (constraintName == null) throw new Error(\"constraintName cannot be null.\");\n            let ikConstraints = this.ikConstraints;\n            for (let i = 0, n = ikConstraints.length; i < n; i++) {\n                let constraint = ikConstraints[i];\n                if (constraint.name == constraintName) return constraint;\n            }\n            return null;\n        }\n\n        findTransformConstraint(constraintName: string) {\n            if (constraintName == null) throw new Error(\"constraintName cannot be null.\");\n            let transformConstraints = this.transformConstraints;\n            for (let i = 0, n = transformConstraints.length; i < n; i++) {\n                let constraint = transformConstraints[i];\n                if (constraint.name == constraintName) return constraint;\n            }\n            return null;\n        }\n\n        findPathConstraint(constraintName: string) {\n            if (constraintName == null) throw new Error(\"constraintName cannot be null.\");\n            let pathConstraints = this.pathConstraints;\n            for (let i = 0, n = pathConstraints.length; i < n; i++) {\n                let constraint = pathConstraints[i];\n                if (constraint.name == constraintName) return constraint;\n            }\n            return null;\n        }\n\n        findPathConstraintIndex(pathConstraintName: string) {\n            if (pathConstraintName == null) throw new Error(\"pathConstraintName cannot be null.\");\n            let pathConstraints = this.pathConstraints;\n            for (let i = 0, n = pathConstraints.length; i < n; i++)\n                if (pathConstraints[i].name == pathConstraintName) return i;\n            return -1;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class SkeletonJson {\n        attachmentLoader: AttachmentLoader;\n        scale = 1;\n        private linkedMeshes = new Array<LinkedMesh>();\n\n        constructor(attachmentLoader: AttachmentLoader) {\n            this.attachmentLoader = attachmentLoader;\n        }\n\n        readSkeletonData(json: string | any): SkeletonData {\n            let scale = this.scale;\n            let skeletonData = new SkeletonData();\n            let root = typeof(json) === \"string\" ? JSON.parse(json) : json;\n\n            // Skeleton\n            let skeletonMap = root.skeleton;\n            if (skeletonMap != null) {\n                skeletonData.hash = skeletonMap.hash;\n                skeletonData.version = skeletonMap.spine;\n                skeletonData.width = skeletonMap.width;\n                skeletonData.height = skeletonMap.height;\n                skeletonData.fps = skeletonMap.fps;\n                skeletonData.imagesPath = skeletonMap.images;\n            }\n\n            // Bones\n            if (root.bones) {\n                for (let i = 0; i < root.bones.length; i++) {\n                    let boneMap = root.bones[i];\n\n                    let parent: BoneData = null;\n                    let parentName: string = this.getValue(boneMap, \"parent\", null);\n                    if (parentName != null) {\n                        parent = skeletonData.findBone(parentName);\n                        if (parent == null) throw new Error(\"Parent bone not found: \" + parentName);\n                    }\n                    let data = new BoneData(skeletonData.bones.length, boneMap.name, parent);\n                    data.length = this.getValue(boneMap, \"length\", 0) * scale;\n                    data.x = this.getValue(boneMap, \"x\", 0) * scale;\n                    data.y = this.getValue(boneMap, \"y\", 0) * scale;\n                    data.rotation = this.getValue(boneMap, \"rotation\", 0);\n                    data.scaleX = this.getValue(boneMap, \"scaleX\", 1);\n                    data.scaleY = this.getValue(boneMap, \"scaleY\", 1);\n                    data.shearX = this.getValue(boneMap, \"shearX\", 0);\n                    data.shearY = this.getValue(boneMap, \"shearY\", 0);\n\n                    //this is legacy\n                    if (boneMap.hasOwnProperty(\"inheritScale\") || boneMap.hasOwnProperty(\"inheritRotation\")) {\n                        //before 3.5\n                        data.transformMode = SkeletonJson.transformModeLegacy(\n                            this.getValue(boneMap, \"inheritRotation\", true),\n                            this.getValue(boneMap, \"inheritScale\", true));\n                    } else {\n                        //after 3.5\n                        data.transformMode = SkeletonJson.transformModeFromString(this.getValue(boneMap, \"transform\", \"normal\"));\n                    }\n\n                    skeletonData.bones.push(data);\n                }\n            }\n\n            // Slots.\n            if (root.slots) {\n                for (let i = 0; i < root.slots.length; i++) {\n                    let slotMap = root.slots[i];\n                    let slotName: string = slotMap.name;\n                    let boneName: string = slotMap.bone;\n                    let boneData = skeletonData.findBone(boneName);\n                    if (boneData == null) throw new Error(\"Slot bone not found: \" + boneName);\n                    let data = new SlotData(skeletonData.slots.length, slotName, boneData);\n\n                    let color: string = this.getValue(slotMap, \"color\", null);\n                    if (color != null) data.color.setFromString(color);\n\n                    data.attachmentName = this.getValue(slotMap, \"attachment\", null);\n                    data.blendMode = SkeletonJson.blendModeFromString(this.getValue(slotMap, \"blend\", \"normal\"));\n                    skeletonData.slots.push(data);\n                }\n            }\n\n            // IK constraints\n            if (root.ik) {\n                for (let i = 0; i < root.ik.length; i++) {\n                    let constraintMap = root.ik[i];\n                    let data = new IkConstraintData(constraintMap.name);\n                    data.order = this.getValue(constraintMap, \"order\", 0);\n\n                    for (let j = 0; j < constraintMap.bones.length; j++) {\n                        let boneName = constraintMap.bones[j];\n                        let bone = skeletonData.findBone(boneName);\n                        if (bone == null) throw new Error(\"IK bone not found: \" + boneName);\n                        data.bones.push(bone);\n                    }\n\n                    let targetName: string = constraintMap.target;\n                    data.target = skeletonData.findBone(targetName);\n                    if (data.target == null) throw new Error(\"IK target bone not found: \" + targetName);\n\n                    data.bendDirection = this.getValue(constraintMap, \"bendPositive\", true) ? 1 : -1;\n                    data.mix = this.getValue(constraintMap, \"mix\", 1);\n\n                    skeletonData.ikConstraints.push(data);\n                }\n            }\n\n            // Transform constraints.\n            if (root.transform) {\n                for (let i = 0; i < root.transform.length; i++) {\n                    let constraintMap = root.transform[i];\n                    let data = new TransformConstraintData(constraintMap.name);\n                    data.order = this.getValue(constraintMap, \"order\", 0);\n\n                    for (let j = 0; j < constraintMap.bones.length; j++) {\n                        let boneName = constraintMap.bones[j];\n                        let bone = skeletonData.findBone(boneName);\n                        if (bone == null) throw new Error(\"Transform constraint bone not found: \" + boneName);\n                        data.bones.push(bone);\n                    }\n\n                    let targetName: string = constraintMap.target;\n                    data.target = skeletonData.findBone(targetName);\n                    if (data.target == null) throw new Error(\"Transform constraint target bone not found: \" + targetName);\n\n                    data.offsetRotation = this.getValue(constraintMap, \"rotation\", 0);\n                    data.offsetX = this.getValue(constraintMap, \"x\", 0) * scale;\n                    data.offsetY = this.getValue(constraintMap, \"y\", 0) * scale;\n                    data.offsetScaleX = this.getValue(constraintMap, \"scaleX\", 0);\n                    data.offsetScaleY = this.getValue(constraintMap, \"scaleY\", 0);\n                    data.offsetShearY = this.getValue(constraintMap, \"shearY\", 0);\n\n                    data.rotateMix = this.getValue(constraintMap, \"rotateMix\", 1);\n                    data.translateMix = this.getValue(constraintMap, \"translateMix\", 1);\n                    data.scaleMix = this.getValue(constraintMap, \"scaleMix\", 1);\n                    data.shearMix = this.getValue(constraintMap, \"shearMix\", 1);\n\n                    skeletonData.transformConstraints.push(data);\n                }\n            }\n\n            // Path constraints.\n            if (root.path) {\n                for (let i = 0; i < root.path.length; i++) {\n                    let constraintMap = root.path[i];\n                    let data = new PathConstraintData(constraintMap.name);\n                    data.order = this.getValue(constraintMap, \"order\", 0);\n\n                    for (let j = 0; j < constraintMap.bones.length; j++) {\n                        let boneName = constraintMap.bones[j];\n                        let bone = skeletonData.findBone(boneName);\n                        if (bone == null) throw new Error(\"Transform constraint bone not found: \" + boneName);\n                        data.bones.push(bone);\n                    }\n\n                    let targetName: string = constraintMap.target;\n                    data.target = skeletonData.findSlot(targetName);\n                    if (data.target == null) throw new Error(\"Path target slot not found: \" + targetName);\n\n                    data.positionMode = SkeletonJson.positionModeFromString(this.getValue(constraintMap, \"positionMode\", \"percent\"));\n                    data.spacingMode = SkeletonJson.spacingModeFromString(this.getValue(constraintMap, \"spacingMode\", \"length\"));\n                    data.rotateMode = SkeletonJson.rotateModeFromString(this.getValue(constraintMap, \"rotateMode\", \"tangent\"));\n                    data.offsetRotation = this.getValue(constraintMap, \"rotation\", 0);\n                    data.position = this.getValue(constraintMap, \"position\", 0);\n                    if (data.positionMode == PositionMode.Fixed) data.position *= scale;\n                    data.spacing = this.getValue(constraintMap, \"spacing\", 0);\n                    if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed) data.spacing *= scale;\n                    data.rotateMix = this.getValue(constraintMap, \"rotateMix\", 1);\n                    data.translateMix = this.getValue(constraintMap, \"translateMix\", 1);\n\n                    skeletonData.pathConstraints.push(data);\n                }\n            }\n\n            // Skins.\n            if (root.skins) {\n                for (let skinName in root.skins) {\n                    let skinMap = root.skins[skinName]\n                    let skin = new Skin(skinName);\n                    for (let slotName in skinMap) {\n                        let slotIndex = skeletonData.findSlotIndex(slotName);\n                        if (slotIndex == -1) throw new Error(\"Slot not found: \" + slotName);\n                        let slotMap = skinMap[slotName];\n                        for (let entryName in slotMap) {\n                            let attachment = this.readAttachment(slotMap[entryName], skin, slotIndex, entryName);\n                            if (attachment != null) skin.addAttachment(slotIndex, entryName, attachment);\n                        }\n                    }\n                    skeletonData.skins.push(skin);\n                    if (skin.name == \"default\") skeletonData.defaultSkin = skin;\n                }\n            }\n\n            // Linked meshes.\n            for (let i = 0, n = this.linkedMeshes.length; i < n; i++) {\n                let linkedMesh = this.linkedMeshes[i];\n                let skin = linkedMesh.skin == null ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);\n                if (skin == null) throw new Error(\"Skin not found: \" + linkedMesh.skin);\n                let parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\n                if (parent == null) throw new Error(\"Parent mesh not found: \" + linkedMesh.parent);\n                linkedMesh.mesh.setParentMesh(<MeshAttachment> parent);\n                // linkedMesh.mesh.updateUVs();\n            }\n            this.linkedMeshes.length = 0;\n\n            // Events.\n            if (root.events) {\n                for (let eventName in root.events) {\n                    let eventMap = root.events[eventName];\n                    let data = new EventData(eventName);\n                    data.intValue = this.getValue(eventMap, \"int\", 0);\n                    data.floatValue = this.getValue(eventMap, \"float\", 0);\n                    data.stringValue = this.getValue(eventMap, \"string\", \"\");\n                    skeletonData.events.push(data);\n                }\n            }\n\n            // Animations.\n            if (root.animations) {\n                for (let animationName in root.animations) {\n                    let animationMap = root.animations[animationName];\n                    this.readAnimation(animationMap, animationName, skeletonData);\n                }\n            }\n\n            return skeletonData;\n        }\n\n        readAttachment(map: any, skin: Skin, slotIndex: number, name: string): Attachment {\n            let scale = this.scale;\n            name = this.getValue(map, \"name\", name);\n\n            let type = this.getValue(map, \"type\", \"region\");\n\n            switch (type) {\n                case \"region\": {\n                    let path = this.getValue(map, \"path\", name);\n                    let region = this.attachmentLoader.newRegionAttachment(skin, name, path);\n                    if (region == null) return null;\n                    region.path = path;\n                    region.x = this.getValue(map, \"x\", 0) * scale;\n                    region.y = this.getValue(map, \"y\", 0) * scale;\n                    region.scaleX = this.getValue(map, \"scaleX\", 1);\n                    region.scaleY = this.getValue(map, \"scaleY\", 1);\n                    region.rotation = this.getValue(map, \"rotation\", 0);\n                    region.width = map.width * scale;\n                    region.height = map.height * scale;\n\n                    let color: string = this.getValue(map, \"color\", null);\n                    if (color != null) region.color.setFromString(color);\n\n                    return region;\n                }\n                case \"boundingbox\": {\n                    let box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\n                    if (box == null) return null;\n                    this.readVertices(map, box, map.vertexCount << 1);\n                    let color: string = this.getValue(map, \"color\", null);\n                    if (color != null) box.color.setFromString(color);\n                    return box;\n                }\n                //weightedmesh is deprecated but who cares\n                case \"weightedmesh\":\n                case \"skinnedmesh\":\n                case \"mesh\":\n                case \"linkedmesh\": {\n                    let path = this.getValue(map, \"path\", name);\n                    let mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\n                    if (mesh == null) return null;\n                    mesh.path = path;\n\n                    let color = this.getValue(map, \"color\", null);\n                    if (color != null) mesh.color.setFromString(color);\n\n                    let parent: string = this.getValue(map, \"parent\", null);\n                    if (parent != null) {\n                        mesh.inheritDeform = this.getValue(map, \"deform\", true);\n                        this.linkedMeshes.push(new LinkedMesh(mesh, <string> this.getValue(map, \"skin\", null), slotIndex, parent));\n                        return mesh;\n                    }\n\n                    let uvs: Array<number> = map.uvs;\n                    this.readVertices(map, mesh, uvs.length);\n                    mesh.triangles = map.triangles;\n                    mesh.regionUVs = uvs;\n                    // mesh.updateUVs();\n\n                    mesh.hullLength = this.getValue(map, \"hull\", 0) * 2;\n                    return mesh;\n                }\n                case \"path\": {\n                    let path = this.attachmentLoader.newPathAttachment(skin, name);\n                    if (path == null) return null;\n                    path.closed = this.getValue(map, \"closed\", false);\n                    path.constantSpeed = this.getValue(map, \"constantSpeed\", true);\n\n                    let vertexCount = map.vertexCount;\n                    this.readVertices(map, path, vertexCount << 1);\n\n                    let lengths: Array<number> = Utils.newArray(vertexCount / 3, 0);\n                    for (let i = 0; i < map.lengths.length; i++)\n                        lengths[i++] = map.lengths[i] * scale;\n                    path.lengths = lengths;\n\n                    let color: string = this.getValue(map, \"color\", null);\n                    if (color != null) path.color.setFromString(color);\n                    return path;\n                }\n            }\n            return null;\n        }\n\n        readVertices(map: any, attachment: VertexAttachment, verticesLength: number) {\n            let scale = this.scale;\n            attachment.worldVerticesLength = verticesLength;\n            let vertices: Array<number> = map.vertices;\n            if (verticesLength == vertices.length) {\n                if (scale != 1) {\n                    for (let i = 0, n = vertices.length; i < n; i++)\n                        vertices[i] *= scale;\n                }\n                attachment.vertices = Utils.toFloatArray(vertices);\n                return;\n            }\n            let weights = new Array<number>();\n            let bones = new Array<number>();\n            for (let i = 0, n = vertices.length; i < n;) {\n                let boneCount = vertices[i++];\n                bones.push(boneCount);\n                for (let nn = i + boneCount * 4; i < nn; i += 4) {\n                    bones.push(vertices[i]);\n                    weights.push(vertices[i + 1] * scale);\n                    weights.push(vertices[i + 2] * scale);\n                    weights.push(vertices[i + 3]);\n                }\n            }\n            attachment.bones = bones;\n            attachment.vertices = Utils.toFloatArray(weights);\n        }\n\n        readAnimation(map: any, name: string, skeletonData: SkeletonData) {\n            let scale = this.scale;\n            let timelines = new Array<Timeline>();\n            let duration = 0;\n\n            // Slot timelines.\n            if (map.slots) {\n                for (let slotName in map.slots) {\n                    let slotMap = map.slots[slotName];\n                    let slotIndex = skeletonData.findSlotIndex(slotName);\n                    if (slotIndex == -1) throw new Error(\"Slot not found: \" + slotName);\n                    for (let timelineName in slotMap) {\n                        let timelineMap = slotMap[timelineName];\n                        if (timelineName == \"color\") {\n                            let timeline = new ColorTimeline(timelineMap.length);\n                            timeline.slotIndex = slotIndex;\n\n                            let frameIndex = 0;\n                            for (let i = 0; i < timelineMap.length; i++) {\n                                let valueMap = timelineMap[i];\n                                let color = new Color();\n                                color.setFromString(valueMap.color);\n                                timeline.setFrame(frameIndex, valueMap.time, color.r, color.g, color.b, color.a);\n                                this.readCurve(valueMap, timeline, frameIndex);\n                                frameIndex++;\n                            }\n                            timelines.push(timeline);\n                            duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * ColorTimeline.ENTRIES]);\n\n                        } else if (timelineName = \"attachment\") {\n                            let timeline = new AttachmentTimeline(timelineMap.length);\n                            timeline.slotIndex = slotIndex;\n\n                            let frameIndex = 0;\n                            for (let i = 0; i < timelineMap.length; i++) {\n                                let valueMap = timelineMap[i];\n                                timeline.setFrame(frameIndex++, valueMap.time, valueMap.name);\n                            }\n                            timelines.push(timeline);\n                            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n                        } else\n                            throw new Error(\"Invalid timeline type for a slot: \" + timelineName + \" (\" + slotName + \")\");\n                    }\n                }\n            }\n\n            // Bone timelines.\n            if (map.bones) {\n                for (let boneName in map.bones) {\n                    let boneMap = map.bones[boneName];\n                    let boneIndex = skeletonData.findBoneIndex(boneName);\n                    if (boneIndex == -1) throw new Error(\"Bone not found: \" + boneName);\n                    for (let timelineName in boneMap) {\n                        let timelineMap = boneMap[timelineName];\n                        if (timelineName === \"rotate\") {\n                            let timeline = new RotateTimeline(timelineMap.length);\n                            timeline.boneIndex = boneIndex;\n\n                            let frameIndex = 0;\n                            for (let i = 0; i < timelineMap.length; i++) {\n                                let valueMap = timelineMap[i];\n                                timeline.setFrame(frameIndex, valueMap.time, valueMap.angle);\n                                this.readCurve(valueMap, timeline, frameIndex);\n                                frameIndex++;\n                            }\n                            timelines.push(timeline);\n                            duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * RotateTimeline.ENTRIES]);\n\n                        } else if (timelineName === \"translate\" || timelineName === \"scale\" || timelineName === \"shear\") {\n                            let timeline: TranslateTimeline = null;\n                            let timelineScale = 1;\n                            if (timelineName === \"scale\")\n                                timeline = new ScaleTimeline(timelineMap.length);\n                            else if (timelineName === \"shear\")\n                                timeline = new ShearTimeline(timelineMap.length);\n                            else {\n                                timeline = new TranslateTimeline(timelineMap.length);\n                                timelineScale = scale;\n                            }\n                            timeline.boneIndex = boneIndex;\n\n                            let frameIndex = 0;\n                            for (let i = 0; i < timelineMap.length; i++) {\n                                let valueMap = timelineMap[i];\n                                let x = this.getValue(valueMap, \"x\", 0), y = this.getValue(valueMap, \"y\", 0);\n                                timeline.setFrame(frameIndex, valueMap.time, x * timelineScale, y * timelineScale);\n                                this.readCurve(valueMap, timeline, frameIndex);\n                                frameIndex++;\n                            }\n                            timelines.push(timeline);\n                            duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * TranslateTimeline.ENTRIES]);\n\n                        } else\n                            throw new Error(\"Invalid timeline type for a bone: \" + timelineName + \" (\" + boneName + \")\");\n                    }\n                }\n            }\n\n            // IK constraint timelines.\n            if (map.ik) {\n                for (let constraintName in map.ik) {\n                    let constraintMap = map.ik[constraintName];\n                    let constraint = skeletonData.findIkConstraint(constraintName);\n                    let timeline = new IkConstraintTimeline(constraintMap.length);\n                    timeline.ikConstraintIndex = skeletonData.ikConstraints.indexOf(constraint);\n                    let frameIndex = 0;\n                    for (let i = 0; i < constraintMap.length; i++) {\n                        let valueMap = constraintMap[i];\n                        timeline.setFrame(frameIndex, valueMap.time, this.getValue(valueMap, \"mix\", 1),\n                            this.getValue(valueMap, \"bendPositive\", true) ? 1 : -1);\n                        this.readCurve(valueMap, timeline, frameIndex);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * IkConstraintTimeline.ENTRIES]);\n                }\n            }\n\n            // Transform constraint timelines.\n            if (map.transform) {\n                for (let constraintName in map.transform) {\n                    let constraintMap = map.transform[constraintName];\n                    let constraint = skeletonData.findTransformConstraint(constraintName);\n                    let timeline = new TransformConstraintTimeline(constraintMap.length);\n                    timeline.transformConstraintIndex = skeletonData.transformConstraints.indexOf(constraint);\n                    let frameIndex = 0;\n                    for (let i = 0; i < constraintMap.length; i++) {\n                        let valueMap = constraintMap[i];\n                        timeline.setFrame(frameIndex, valueMap.time, this.getValue(valueMap, \"rotateMix\", 1),\n                            this.getValue(valueMap, \"translateMix\", 1), this.getValue(valueMap, \"scaleMix\", 1), this.getValue(valueMap, \"shearMix\", 1));\n                        this.readCurve(valueMap, timeline, frameIndex);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration,\n                        timeline.frames[(timeline.getFrameCount() - 1) * TransformConstraintTimeline.ENTRIES]);\n                }\n            }\n\n            // Path constraint timelines.\n            if (map.paths) {\n                for (let constraintName in map.paths) {\n                    let constraintMap = map.paths[constraintName];\n                    let index = skeletonData.findPathConstraintIndex(constraintName);\n                    if (index == -1) throw new Error(\"Path constraint not found: \" + constraintName);\n                    let data = skeletonData.pathConstraints[index];\n                    for (let timelineName in constraintMap) {\n                        let timelineMap = constraintMap[timelineName];\n                        if (timelineName === \"position\" || timelineName === \"spacing\") {\n                            let timeline: PathConstraintPositionTimeline = null;\n                            let timelineScale = 1;\n                            if (timelineName === \"spacing\") {\n                                timeline = new PathConstraintSpacingTimeline(timelineMap.length);\n                                if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed) timelineScale = scale;\n                            } else {\n                                timeline = new PathConstraintPositionTimeline(timelineMap.length);\n                                if (data.positionMode == PositionMode.Fixed) timelineScale = scale;\n                            }\n                            timeline.pathConstraintIndex = index;\n                            let frameIndex = 0;\n                            for (let i = 0; i < timelineMap.length; i++) {\n                                let valueMap = timelineMap[i];\n                                timeline.setFrame(frameIndex, valueMap.time, this.getValue(valueMap, timelineName, 0) * timelineScale);\n                                this.readCurve(valueMap, timeline, frameIndex);\n                                frameIndex++;\n                            }\n                            timelines.push(timeline);\n                            duration = Math.max(duration,\n                                timeline.frames[(timeline.getFrameCount() - 1) * PathConstraintPositionTimeline.ENTRIES]);\n                        } else if (timelineName === \"mix\") {\n                            let timeline = new PathConstraintMixTimeline(timelineMap.length);\n                            timeline.pathConstraintIndex = index;\n                            let frameIndex = 0;\n                            for (let i = 0; i < timelineMap.length; i++) {\n                                let valueMap = timelineMap[i];\n                                timeline.setFrame(frameIndex, valueMap.time, this.getValue(valueMap, \"rotateMix\", 1),\n                                    this.getValue(valueMap, \"translateMix\", 1));\n                                this.readCurve(valueMap, timeline, frameIndex);\n                                frameIndex++;\n                            }\n                            timelines.push(timeline);\n                            duration = Math.max(duration,\n                                timeline.frames[(timeline.getFrameCount() - 1) * PathConstraintMixTimeline.ENTRIES]);\n                        }\n                    }\n                }\n            }\n\n            // Deform timelines.\n            if (map.deform) {\n                for (let deformName in map.deform) {\n                    let deformMap = map.deform[deformName];\n                    let skin = skeletonData.findSkin(deformName);\n                    if (skin == null) throw new Error(\"Skin not found: \" + deformName);\n                    for (let slotName in deformMap) {\n                        let slotMap = deformMap[slotName];\n                        let slotIndex = skeletonData.findSlotIndex(slotName);\n                        if (slotIndex == -1) throw new Error(\"Slot not found: \" + slotMap.name);\n                        for (let timelineName in slotMap) {\n                            let timelineMap = slotMap[timelineName];\n                            let attachment = <VertexAttachment>skin.getAttachment(slotIndex, timelineName);\n                            if (attachment == null) throw new Error(\"Deform attachment not found: \" + timelineMap.name);\n                            let weighted = attachment.bones != null;\n                            let vertices = attachment.vertices;\n                            let deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;\n\n                            let timeline = new DeformTimeline(timelineMap.length);\n                            timeline.slotIndex = slotIndex;\n                            timeline.attachment = attachment;\n\n                            let frameIndex = 0;\n                            for (let j = 0; j < timelineMap.length; j++) {\n                                let valueMap = timelineMap[j];\n                                let deform: ArrayLike<number>;\n                                let verticesValue: Array<Number> = this.getValue(valueMap, \"vertices\", null);\n                                if (verticesValue == null)\n                                    deform = weighted ? Utils.newFloatArray(deformLength) : vertices;\n                                else {\n                                    deform = Utils.newFloatArray(deformLength);\n                                    let start = <number>this.getValue(valueMap, \"offset\", 0);\n                                    Utils.arrayCopy(verticesValue, 0, deform, start, verticesValue.length);\n                                    if (scale != 1) {\n                                        for (let i = start, n = i + verticesValue.length; i < n; i++)\n                                            deform[i] *= scale;\n                                    }\n                                    if (!weighted) {\n                                        for (let i = 0; i < deformLength; i++)\n                                            deform[i] += vertices[i];\n                                    }\n                                }\n\n                                timeline.setFrame(frameIndex, valueMap.time, deform);\n                                this.readCurve(valueMap, timeline, frameIndex);\n                                frameIndex++;\n                            }\n                            timelines.push(timeline);\n                            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n                        }\n                    }\n                }\n            }\n\n            // Draw order timeline.\n            let drawOrderNode = map.drawOrder;\n            if (drawOrderNode == null) drawOrderNode = map.draworder;\n            if (drawOrderNode != null) {\n                let timeline = new DrawOrderTimeline(drawOrderNode.length);\n                let slotCount = skeletonData.slots.length;\n                let frameIndex = 0;\n                for (let j = 0; j < drawOrderNode.length; j++) {\n                    let drawOrderMap = drawOrderNode[j];\n                    let drawOrder: Array<number> = null;\n                    let offsets = this.getValue(drawOrderMap, \"offsets\", null);\n                    if (offsets != null) {\n                        drawOrder = Utils.newArray<number>(slotCount, -1);\n                        let unchanged = Utils.newArray<number>(slotCount - offsets.length, 0);\n                        let originalIndex = 0, unchangedIndex = 0;\n                        for (let i = 0; i < offsets.length; i++) {\n                            let offsetMap = offsets[i];\n                            let slotIndex = skeletonData.findSlotIndex(offsetMap.slot);\n                            if (slotIndex == -1) throw new Error(\"Slot not found: \" + offsetMap.slot);\n                            // Collect unchanged items.\n                            while (originalIndex != slotIndex)\n                                unchanged[unchangedIndex++] = originalIndex++;\n                            // Set changed items.\n                            drawOrder[originalIndex + offsetMap.offset] = originalIndex++;\n                        }\n                        // Collect remaining unchanged items.\n                        while (originalIndex < slotCount)\n                            unchanged[unchangedIndex++] = originalIndex++;\n                        // Fill in unchanged items.\n                        for (let i = slotCount - 1; i >= 0; i--)\n                            if (drawOrder[i] == -1) drawOrder[i] = unchanged[--unchangedIndex];\n                    }\n                    timeline.setFrame(frameIndex++, drawOrderMap.time, drawOrder);\n                }\n                timelines.push(timeline);\n                duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n            }\n\n            // Event timeline.\n            if (map.events) {\n                let timeline = new EventTimeline(map.events.length);\n                let frameIndex = 0;\n                for (let i = 0; i < map.events.length; i++) {\n                    let eventMap = map.events[i];\n                    let eventData = skeletonData.findEvent(eventMap.name);\n                    if (eventData == null) throw new Error(\"Event not found: \" + eventMap.name);\n                    let event = new Event(eventMap.time, eventData);\n                    event.intValue = this.getValue(eventMap, \"int\", eventData.intValue);\n                    event.floatValue = this.getValue(eventMap, \"float\", eventData.floatValue);\n                    event.stringValue = this.getValue(eventMap, \"string\", eventData.stringValue);\n                    timeline.setFrame(frameIndex++, event);\n                }\n                timelines.push(timeline);\n                duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n            }\n\n            if (isNaN(duration)) {\n                throw new Error(\"Error while parsing animation, duration is NaN\");\n            }\n\n            skeletonData.animations.push(new Animation(name, timelines, duration));\n        }\n\n        readCurve(map: any, timeline: CurveTimeline, frameIndex: number) {\n            if (!map.curve) return;\n            if (map.curve === \"stepped\")\n                timeline.setStepped(frameIndex);\n            else if (Object.prototype.toString.call(map.curve) === '[object Array]') {\n                let curve: Array<number> = map.curve;\n                timeline.setCurve(frameIndex, curve[0], curve[1], curve[2], curve[3]);\n            }\n        }\n\n        getValue(map: any, prop: string, defaultValue: any) {\n            return map[prop] !== undefined ? map[prop] : defaultValue;\n        }\n\n        static blendModeFromString(str: string): number {\n            if (str === 'multiply') return PIXI.BLEND_MODES.MULTIPLY;\n            if (str === 'additive') return PIXI.BLEND_MODES.ADD;\n            if (str === 'screen') return PIXI.BLEND_MODES.SCREEN;\n            if (str === 'normal') return PIXI.BLEND_MODES.NORMAL;\n            throw new Error(`Unknown blend mode: ${str}`);\n        }\n\n        static positionModeFromString(str: string) {\n            str = str.toLowerCase();\n            if (str == \"fixed\") return PositionMode.Fixed;\n            if (str == \"percent\") return PositionMode.Percent;\n            throw new Error(`Unknown position mode: ${str}`);\n        }\n\n        static spacingModeFromString(str: string) {\n            str = str.toLowerCase();\n            if (str == \"length\") return SpacingMode.Length;\n            if (str == \"fixed\") return SpacingMode.Fixed;\n            if (str == \"percent\") return SpacingMode.Percent;\n            throw new Error(`Unknown position mode: ${str}`);\n        }\n\n        static rotateModeFromString(str: string) {\n            str = str.toLowerCase();\n            if (str == \"tangent\") return RotateMode.Tangent;\n            if (str == \"chain\") return RotateMode.Chain;\n            if (str == \"chainscale\") return RotateMode.ChainScale;\n            throw new Error(`Unknown rotate mode: ${str}`);\n        }\n\n        static transformModeFromString(str: string) {\n            str = str.toLowerCase();\n            if (str == \"normal\") return TransformMode.Normal;\n            if (str == \"onlytranslation\") return TransformMode.OnlyTranslation;\n            if (str == \"norotationorreflection\") return TransformMode.NoRotationOrReflection;\n            if (str == \"noscale\") return TransformMode.NoScale;\n            if (str == \"noscaleorreflection\") return TransformMode.NoScaleOrReflection;\n            throw new Error(`Unknown transform mode: ${str}`);\n        }\n\n        static transformModeLegacy(inheritRotation: boolean, inheritScale: boolean) {\n            console.log(\"Deprecation Warning: re-export your model with spine 3.5, or downgrade to pixi-spine 1.1 branch. There were many breaking changes, place breakpoint here if you want to know which model is broken\");\n            if (inheritRotation && inheritScale) {\n                return TransformMode.Normal;\n            } else if (inheritRotation) {\n                return TransformMode.NoScaleOrReflection;\n            } else if (inheritScale) {\n                return TransformMode.NoRotationOrReflection;\n            } else {\n                return TransformMode.OnlyTranslation;\n            }\n        }\n    }\n\n    class LinkedMesh {\n        parent: string;\n        skin: string;\n        slotIndex: number;\n        mesh: MeshAttachment;\n\n        constructor(mesh: MeshAttachment, skin: string, slotIndex: number, parent: string) {\n            this.mesh = mesh;\n            this.skin = skin;\n            this.slotIndex = slotIndex;\n            this.parent = parent;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class Skin {\n        name: string;\n        attachments = new Array<Map<Attachment>>();\n\n        constructor(name: string) {\n            if (name == null) throw new Error(\"name cannot be null.\");\n            this.name = name;\n        }\n\n        addAttachment(slotIndex: number, name: string, attachment: Attachment) {\n            if (attachment == null) throw new Error(\"attachment cannot be null.\");\n            let attachments = this.attachments;\n            if (slotIndex >= attachments.length) attachments.length = slotIndex + 1;\n            if (!attachments[slotIndex]) attachments[slotIndex] = {};\n            attachments[slotIndex][name] = attachment;\n        }\n\n        /** @return May be null. */\n        getAttachment(slotIndex: number, name: string): Attachment {\n            let dictionary = this.attachments[slotIndex];\n            return dictionary ? dictionary[name] : null;\n        }\n\n        /** Attach each attachment in this skin if the corresponding attachment in the old skin is currently attached. */\n        attachAll(skeleton: Skeleton, oldSkin: Skin) {\n            let slotIndex = 0;\n            for (let i = 0; i < skeleton.slots.length; i++) {\n                let slot = skeleton.slots[i];\n                let slotAttachment = slot.getAttachment();\n                if (slotAttachment && slotIndex < oldSkin.attachments.length) {\n                    let dictionary = oldSkin.attachments[slotIndex];\n                    for (let key in dictionary) {\n                        let skinAttachment: Attachment = dictionary[key];\n                        if (slotAttachment == skinAttachment) {\n                            let attachment = this.getAttachment(slotIndex, name);\n                            if (attachment != null) slot.setAttachment(attachment);\n                            break;\n                        }\n                    }\n                }\n                slotIndex++;\n            }\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class Slot {\n        //this is for PIXI\n        currentMesh: any;\n        currentSprite: any;\n        meshes: any;\n        currentMeshName: String;\n        sprites: any;\n        currentSpriteName: String;\n        blendMode: number;\n        //assign hack region a bit later\n        tempRegion: TextureRegion;\n        tempAttachment: Attachment;\n\n        //canon\n        data: SlotData;\n        bone: Bone;\n        color: Color;\n        attachment: Attachment;\n        private attachmentTime: number;\n        attachmentVertices = new Array<number>();\n\n        constructor(data: SlotData, bone: Bone) {\n            if (data == null) throw new Error(\"data cannot be null.\");\n            if (bone == null) throw new Error(\"bone cannot be null.\");\n            this.data = data;\n            this.bone = bone;\n            this.color = new Color();\n            this.blendMode = data.blendMode;\n            this.setToSetupPose();\n        }\n\n        /** @return May be null. */\n        getAttachment(): Attachment {\n            return this.attachment;\n        }\n\n        /** Sets the attachment and if it changed, resets {@link #getAttachmentTime()} and clears {@link #getAttachmentVertices()}.\n         * @param attachment May be null. */\n        setAttachment(attachment: Attachment) {\n            if (this.attachment == attachment) return;\n            this.attachment = attachment;\n            this.attachmentTime = this.bone.skeleton.time;\n            this.attachmentVertices.length = 0;\n        }\n\n        setAttachmentTime(time: number) {\n            this.attachmentTime = this.bone.skeleton.time - time;\n        }\n\n        /** Returns the time since the attachment was set. */\n        getAttachmentTime(): number {\n            return this.bone.skeleton.time - this.attachmentTime;\n        }\n\n        setToSetupPose() {\n            this.color.setFromColor(this.data.color);\n            if (this.data.attachmentName == null)\n                this.attachment = null;\n            else {\n                this.attachment = null;\n                this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName));\n            }\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class SlotData {\n        index: number;\n        name: string;\n        boneData: BoneData;\n        color = new Color(1, 1, 1, 1);\n        attachmentName: string;\n        blendMode: number;\n\n        constructor(index: number, name: string, boneData: BoneData) {\n            if (index < 0) throw new Error(\"index must be >= 0.\");\n            if (name == null) throw new Error(\"name cannot be null.\");\n            if (boneData == null) throw new Error(\"boneData cannot be null.\");\n            this.index = index;\n            this.name = name;\n            this.boneData = boneData;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export abstract class Texture {\n        protected _image: HTMLImageElement;\n\n        constructor (image: HTMLImageElement) {\n            this._image = image;\n        }\n\n        getImage (): HTMLImageElement {\n            return this._image;\n        }\n\n        abstract setFilters (minFilter: TextureFilter, magFilter: TextureFilter): void;\n        abstract setWraps (uWrap: TextureWrap, vWrap: TextureWrap): void;\n        abstract dispose (): void;\n\n\n        public static filterFromString (text: string): TextureFilter {\n            switch (text.toLowerCase()) {\n                case \"nearest\": return TextureFilter.Nearest;\n                case \"linear\": return TextureFilter.Linear;\n                case \"mipmap\": return TextureFilter.MipMap;\n                case \"mipmapnearestnearest\": return TextureFilter.MipMapNearestNearest;\n                case \"mipmaplinearnearest\": return TextureFilter.MipMapLinearNearest;\n                case \"mipmapnearestlinear\": return TextureFilter.MipMapNearestLinear;\n                case \"mipmaplinearlinear\": return TextureFilter.MipMapLinearLinear;\n                default: throw new Error(`Unknown texture filter ${text}`);\n            }\n        }\n\n        public static wrapFromString (text: string): TextureWrap {\n            switch (text.toLowerCase()) {\n                case \"mirroredtepeat\": return TextureWrap.MirroredRepeat;\n                case \"clamptoedge\": return TextureWrap.ClampToEdge;\n                case \"repeat\": return TextureWrap.Repeat;\n                default: throw new Error(`Unknown texture wrap ${text}`);\n            }\n        }\n    }\n\n    export enum TextureFilter {\n        Nearest = 9728, // WebGLRenderingContext.NEAREST\n        Linear = 9729, // WebGLRenderingContext.LINEAR\n        MipMap = 9987, // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR\n        MipMapNearestNearest = 9984, // WebGLRenderingContext.NEAREST_MIPMAP_NEAREST\n        MipMapLinearNearest = 9985, // WebGLRenderingContext.LINEAR_MIPMAP_NEAREST\n        MipMapNearestLinear = 9986, // WebGLRenderingContext.NEAREST_MIPMAP_LINEAR\n        MipMapLinearLinear = 9987 // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR\n    }\n\n    export enum TextureWrap {\n        MirroredRepeat = 33648, // WebGLRenderingContext.MIRRORED_REPEAT\n        ClampToEdge = 33071, // WebGLRenderingContext.CLAMP_TO_EDGE\n        Repeat = 10497 // WebGLRenderingContext.REPEAT\n    }\n\n    export class TextureRegion {\n        texture: PIXI.Texture;\n\n        //thats for overrides\n        size: PIXI.Rectangle = null;\n\n        get width(): number {\n            const tex = this.texture;\n            if (PIXI.VERSION[0] == '3') {\n                return (tex as any).crop.width;\n            }\n            if (tex.trim) {\n                return tex.trim.width;\n            }\n            return tex.orig.width;\n        }\n\n        get height(): number {\n            const tex = this.texture;\n            if (PIXI.VERSION[0] == '3') {\n                return (tex as any).crop.height;\n            }\n            if (tex.trim) {\n                return tex.trim.height;\n            }\n            return tex.orig.height;\n        }\n\n        get u(): number {\n            return (this.texture as any)._uvs.x0;\n        }\n\n        get v(): number {\n            return (this.texture as any)._uvs.y0;\n        }\n\n        get u2(): number {\n            return (this.texture as any)._uvs.x2;\n        }\n\n        get v2(): number {\n            return (this.texture as any)._uvs.y2;\n        }\n\n        get offsetX(): number {\n            const tex = this.texture;\n            return tex.trim ? tex.trim.x : 0;\n        }\n\n        get offsetY(): number {\n            console.warn(\"Deprecation Warning: @Hackerham: I guess, if you are using PIXI-SPINE ATLAS region.offsetY, you want a texture, right? Use region.texture from now on.\");\n            return this.spineOffsetY;\n        }\n\n        get pixiOffsetY(): number {\n            const tex = this.texture;\n            return tex.trim ? tex.trim.y : 0;\n        }\n\n        get spineOffsetY(): number {\n            var tex = this.texture;\n            return this.originalHeight - this.height - (tex.trim ? tex.trim.y : 0);\n        }\n\n        get originalWidth(): number {\n            var tex = this.texture;\n            if (PIXI.VERSION[0] == '3') {\n                if (tex.trim) {\n                    return tex.trim.width;\n                }\n                return (tex as any).crop.width;\n            }\n            return tex.orig.width;\n        }\n\n        get originalHeight(): number {\n            const tex = this.texture;\n            if (PIXI.VERSION[0] == '3') {\n                if (tex.trim) {\n                    return tex.trim.height;\n                }\n                return (tex as any).crop.height;\n            }\n            return tex.orig.height;\n        }\n\n        get x(): number {\n            return this.texture.frame.x;\n        }\n\n        get y(): number {\n            return this.texture.frame.y;\n        }\n\n        get rotate(): boolean {\n            return this.texture.rotate !== 0;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class TextureAtlas implements Disposable {\n        pages = new Array<TextureAtlasPage>();\n        regions = new Array<TextureAtlasRegion>();\n\n        constructor(atlasText: string, textureLoader: (path: string, loaderFunction: (tex: PIXI.BaseTexture) => any) => any, callback: (obj: TextureAtlas) => any) {\n            if (atlasText) {\n                this.addSpineAtlas(atlasText, textureLoader, callback);\n            }\n        }\n\n        addTexture(name: string, texture: PIXI.Texture) {\n            let pages = this.pages;\n            let page: TextureAtlasPage = null;\n            for (var i = 0; i < pages.length; i++) {\n                if (pages[i].baseTexture === texture.baseTexture) {\n                    page = pages[i];\n                    break;\n                }\n            }\n            if (page === null) {\n                page = new TextureAtlasPage();\n                page.name = 'texturePage';\n                var baseTexture = texture.baseTexture;\n                page.width = baseTexture.realWidth;\n                page.height = baseTexture.realHeight;\n                page.baseTexture = baseTexture;\n                //those fields are not relevant in Pixi\n                page.minFilter = page.magFilter = TextureFilter.Nearest;\n                page.uWrap = TextureWrap.ClampToEdge;\n                page.vWrap = TextureWrap.ClampToEdge;\n                pages.push(page);\n            }\n            var region = new TextureAtlasRegion();\n            region.name = name;\n            region.page = page;\n            region.texture = texture;\n            region.index = -1;\n            this.regions.push(region);\n            return region;\n        }\n\n        addTextureHash(textures: Map<PIXI.Texture>, stripExtension: boolean) {\n            for (var key in textures) {\n                if (textures.hasOwnProperty(key)) {\n                    this.addTexture(stripExtension && key.indexOf('.') !== -1 ? key.substr(0, key.lastIndexOf('.')) : key, textures[key]);\n                }\n            }\n        }\n\n        public addSpineAtlas(atlasText: string, textureLoader: (path: string, loaderFunction: (tex: PIXI.BaseTexture)  => any) => any, callback: (obj: TextureAtlas) => any) {\n            return this.load(atlasText, textureLoader, callback);\n        }\n\n        private load(atlasText: string, textureLoader: (path: string, loaderFunction: (tex: PIXI.BaseTexture) => any) => any, callback: (obj: TextureAtlas) => any) {\n            if (textureLoader == null)\n                throw new Error(\"textureLoader cannot be null.\");\n\n            let reader = new TextureAtlasReader(atlasText);\n            let tuple = new Array<string>(4);\n            let page: TextureAtlasPage = null;\n\n            let iterateParser = () => {\n                while (true) {\n                    let line = reader.readLine();\n                    if (line == null) {\n                        return callback && callback(this);\n                    }\n                    line = line.trim();\n                    if (line.length == 0)\n                        page = null;\n                    else if (!page) {\n                        page = new TextureAtlasPage();\n                        page.name = line;\n\n                        if (reader.readTuple(tuple) == 2) { // size is only optional for an atlas packed with an old TexturePacker.\n                            page.width = parseInt(tuple[0]);\n                            page.height = parseInt(tuple[1]);\n                            reader.readTuple(tuple);\n                        }\n                        // page.format = Format[tuple[0]]; we don't need format in WebGL\n\n                        reader.readTuple(tuple);\n                        page.minFilter = Texture.filterFromString(tuple[0]);\n                        page.magFilter = Texture.filterFromString(tuple[1]);\n\n                        let direction = reader.readValue();\n                        page.uWrap = TextureWrap.ClampToEdge;\n                        page.vWrap = TextureWrap.ClampToEdge;\n                        if (direction == \"x\")\n                            page.uWrap = TextureWrap.Repeat;\n                        else if (direction == \"y\")\n                            page.vWrap = TextureWrap.Repeat;\n                        else if (direction == \"xy\")\n                            page.uWrap = page.vWrap = TextureWrap.Repeat;\n\n                        textureLoader(line, (texture: PIXI.BaseTexture) => {\n                            page.baseTexture = texture;\n                            if (!texture.hasLoaded) {\n                                texture.width = page.width;\n                                texture.height = page.height;\n                            }\n                            this.pages.push(page);\n                            page.setFilters();\n\n                            if (!page.width || !page.height) {\n                                page.width = texture.realWidth;\n                                page.height = texture.realHeight;\n                                if (!page.width || !page.height) {\n                                    console.log(\"ERROR spine atlas page \" + page.name + \": meshes wont work if you dont specify size in atlas (http://www.html5gamedevs.com/topic/18888-pixi-spines-and-meshes/?p=107121)\");\n                                }\n                            }\n                            iterateParser();\n                        });\n                        this.pages.push(page);\n                        break;\n                    } else {\n                        let region: TextureAtlasRegion = new TextureAtlasRegion();\n                        region.name = line;\n                        region.page = page;\n\n                        let rotate: number = reader.readValue() == \"true\" ? 6 : 0;\n\n                        reader.readTuple(tuple);\n                        let x = parseInt(tuple[0]);\n                        let y = parseInt(tuple[1]);\n\n                        reader.readTuple(tuple);\n                        let width = parseInt(tuple[0]);\n                        let height = parseInt(tuple[1]);\n\n                        let resolution = page.baseTexture.resolution;\n                        x /= resolution;\n                        y /= resolution;\n                        width /= resolution;\n                        height /= resolution;\n\n                        let frame = new PIXI.Rectangle(x, y, rotate ? height : width, rotate ? width : height);\n\n                        if (reader.readTuple(tuple) == 4) { // split is optional\n                            // region.splits = new Vector.<int>(parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3]));\n\n                            if (reader.readTuple(tuple) == 4) { // pad is optional, but only present with splits\n                                //region.pads = Vector.<int>(parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3]));\n\n                                reader.readTuple(tuple);\n                            }\n                        }\n\n                        let originalWidth = parseInt(tuple[0]) / resolution;\n                        let originalHeight = parseInt(tuple[1]) / resolution;\n                        reader.readTuple(tuple);\n                        let offsetX = parseInt(tuple[0]) / resolution;\n                        let offsetY = parseInt(tuple[1]) / resolution;\n\n                        let orig = new PIXI.Rectangle(0, 0, originalWidth, originalHeight);\n                        let trim = new PIXI.Rectangle(offsetX, originalHeight - height - offsetY, width, height);\n\n                        //TODO: pixiv3 uses different frame/crop/trim\n\n                        if (PIXI.VERSION[0] == '4') {\n                            // pixi v4.0.0\n                            region.texture = new PIXI.Texture(region.page.baseTexture, frame, orig, trim, rotate);\n                        } else {\n                            // pixi v3.0.11\n                            var frame2 = new PIXI.Rectangle(x, y, width, height);\n                            var crop = frame2.clone();\n                            trim.width = originalWidth;\n                            trim.height = originalHeight;\n                            region.texture = new PIXI.Texture(region.page.baseTexture, frame2, crop, trim, rotate);\n                        }\n\n                        region.index = parseInt(reader.readValue());\n                        (region.texture as any)._updateUvs();\n\n                        this.regions.push(region);\n                    }\n                }\n            }\n\n            iterateParser();\n        }\n\n        findRegion(name: string): TextureAtlasRegion {\n            for (let i = 0; i < this.regions.length; i++) {\n                if (this.regions[i].name == name) {\n                    return this.regions[i];\n                }\n            }\n            return null;\n        }\n\n        dispose() {\n            for (let i = 0; i < this.pages.length; i++) {\n                this.pages[i].baseTexture.dispose();\n            }\n        }\n    }\n\n    class TextureAtlasReader {\n        lines: Array<string>;\n        index: number = 0;\n\n        constructor(text: string) {\n            this.lines = text.split(/\\r\\n|\\r|\\n/);\n        }\n\n        readLine(): string {\n            if (this.index >= this.lines.length)\n                return null;\n            return this.lines[this.index++];\n        }\n\n        readValue(): string {\n            let line = this.readLine();\n            let colon = line.indexOf(\":\");\n            if (colon == -1)\n                throw new Error(\"Invalid line: \" + line);\n            return line.substring(colon + 1).trim();\n        }\n\n        readTuple(tuple: Array<string>): number {\n            let line = this.readLine();\n            let colon = line.indexOf(\":\");\n            if (colon == -1)\n                throw new Error(\"Invalid line: \" + line);\n            let i = 0, lastMatch = colon + 1;\n            for (; i < 3; i++) {\n                let comma = line.indexOf(\",\", lastMatch);\n                if (comma == -1) break;\n                tuple[i] = line.substr(lastMatch, comma - lastMatch).trim();\n                lastMatch = comma + 1;\n            }\n            tuple[i] = line.substring(lastMatch).trim();\n            return i + 1;\n        }\n    }\n\n    export class TextureAtlasPage {\n        name: string;\n        minFilter: TextureFilter;\n        magFilter: TextureFilter;\n        uWrap: TextureWrap;\n        vWrap: TextureWrap;\n        baseTexture: PIXI.BaseTexture;\n        width: number;\n        height: number;\n\n        public setFilters() {\n            let tex = this.baseTexture;\n            let filter = this.minFilter;\n            if (filter == TextureFilter.Linear) {\n                tex.scaleMode = PIXI.SCALE_MODES.LINEAR;\n            } else if (this.minFilter == TextureFilter.Nearest) {\n                tex.scaleMode = PIXI.SCALE_MODES.NEAREST;\n            } else {\n                tex.mipmap = true;\n                if (filter == TextureFilter.MipMapNearestNearest) {\n                    tex.scaleMode = PIXI.SCALE_MODES.NEAREST;\n                } else {\n                    tex.scaleMode = PIXI.SCALE_MODES.LINEAR;\n                }\n            }\n        }\n    }\n\n    export class TextureAtlasRegion extends TextureRegion {\n        page: TextureAtlasPage;\n        name: string;\n        index: number;\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class TransformConstraint implements Constraint {\n        data: TransformConstraintData;\n        bones: Array<Bone>;\n        target: Bone;\n        rotateMix = 0;\n        translateMix = 0;\n        scaleMix = 0;\n        shearMix = 0;\n        temp = new Vector2();\n\n        constructor(data: TransformConstraintData, skeleton: Skeleton) {\n            if (data == null) throw new Error(\"data cannot be null.\");\n            if (skeleton == null) throw new Error(\"skeleton cannot be null.\");\n            this.data = data;\n            this.rotateMix = data.rotateMix;\n            this.translateMix = data.translateMix;\n            this.scaleMix = data.scaleMix;\n            this.shearMix = data.shearMix;\n            this.bones = new Array<Bone>();\n            for (let i = 0; i < data.bones.length; i++)\n                this.bones.push(skeleton.findBone(data.bones[i].name));\n            this.target = skeleton.findBone(data.target.name);\n        }\n\n        apply() {\n            this.update();\n        }\n\n        update() {\n            let rotateMix = this.rotateMix, translateMix = this.translateMix, scaleMix = this.scaleMix, shearMix = this.shearMix;\n            let target = this.target;\n            let ta = target.matrix.a, tb = target.matrix.c, tc = target.matrix.b, td = target.matrix.d;\n            let bones = this.bones;\n            for (let i = 0, n = bones.length; i < n; i++) {\n                let bone = bones[i];\n                let m = bone.matrix;\n                let modified = false;\n\n                if (rotateMix != 0) {\n                    let a = m.a, b = m.c, c = m.b, d = m.d;\n                    let r = Math.atan2(tc, ta) - Math.atan2(c, a) + this.data.offsetRotation * MathUtils.degRad;\n                    if (r > MathUtils.PI)\n                        r -= MathUtils.PI2;\n                    else if (r < -MathUtils.PI)\n                        r += MathUtils.PI2;\n                    r *= rotateMix;\n                    let cos = Math.cos(r), sin = Math.sin(r);\n                    m.a = cos * a - sin * c;\n                    m.c = cos * b - sin * d;\n                    m.b = sin * a + cos * c;\n                    m.d = sin * b + cos * d;\n                    modified = true;\n                }\n\n                if (translateMix != 0) {\n                    let temp = this.temp;\n                    target.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));\n                    m.tx += (temp.x - m.tx) * translateMix;\n                    m.ty += (temp.y - m.ty) * translateMix;\n                    modified = true;\n                }\n\n                if (scaleMix > 0) {\n                    let s = Math.sqrt(m.a * m.a + m.b * m.b);\n                    let ts = Math.sqrt(ta * ta + tc * tc);\n                    if (s > 0.00001) s = (s + (ts - s + this.data.offsetScaleX) * scaleMix) / s;\n                    m.a *= s;\n                    m.b *= s;\n                    s = Math.sqrt(m.c * m.c + m.d * m.d);\n                    ts = Math.sqrt(tb * tb + td * td);\n                    if (s > 0.00001) s = (s + (ts - s + this.data.offsetScaleY) * scaleMix) / s;\n                    m.c *= s;\n                    m.d *= s;\n                    modified = true;\n                }\n\n                if (shearMix > 0) {\n                    let b = m.c, d = m.d;\n                    let by = Math.atan2(d, b);\n                    let r = Math.atan2(td, tb) - Math.atan2(tc, ta) - (by - Math.atan2(m.b, m.a));\n                    if (r > MathUtils.PI)\n                        r -= MathUtils.PI2;\n                    else if (r < -MathUtils.PI)\n                        r += MathUtils.PI2;\n                    r = by + (r + this.data.offsetShearY * MathUtils.degRad) * shearMix;\n                    let s = Math.sqrt(b * b + d * d);\n                    m.c = Math.cos(r) * s;\n                    m.d = Math.sin(r) * s;\n                    modified = true;\n                }\n\n                if (modified) bone.appliedValid = false;\n            }\n        }\n\n        getOrder() {\n            return this.data.order;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export class TransformConstraintData {\n        name: string;\n        order = 0;\n        bones = new Array<BoneData>();\n        target: BoneData;\n        rotateMix = 0;\n        translateMix = 0;\n        scaleMix = 0;\n        shearMix = 0;\n        offsetRotation = 0;\n        offsetX = 0;\n        offsetY = 0;\n        offsetScaleX = 0;\n        offsetScaleY = 0;\n        offsetShearY = 0;\n\n        constructor(name: string) {\n            if (name == null) throw new Error(\"name cannot be null.\");\n            this.name = name;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n    export interface Updatable {\n        update(): void;\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License v2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nmodule PIXI.spine.core {\n\texport interface Map<T> {\n\t\t[key: string]: T;\n\t}\n\n\texport class IntSet {\n\t\tarray = new Array<number>();\n\n\t\tadd (value: number): boolean {\n\t\t\tlet contains = this.contains(value);\n\t\t\tthis.array[value | 0] = value | 0;\n\t\t\treturn !contains;\n\t\t}\n\n\t\tcontains (value: number) {\n\t\t\treturn this.array[value | 0] != undefined;\n\t\t}\n\n\t\tremove (value: number) {\n\t\t\tthis.array[value | 0] = undefined;\n\t\t}\n\n\t\tclear () {\n\t\t\tthis.array.length = 0;\n\t\t}\n\t}\n\n\texport interface Disposable {\n\t\tdispose (): void;\n\t}\n\n\texport class Color {\n\t\tpublic static WHITE = new Color(1, 1, 1, 1);\n\t\tpublic static RED = new Color(1, 0, 0, 1);\n\t\tpublic static GREEN = new Color(0, 1, 0, 1);\n\t\tpublic static BLUE = new Color(0, 0, 1, 1);\n\t\tpublic static MAGENTA = new Color(1, 0, 1, 1);\n\n\t\tconstructor (public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 0) {\n\t\t}\n\n\t\tset (r: number, g: number, b: number, a: number) {\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\t\t\tthis.a = a;\n\t\t\tthis.clamp();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromColor (c: Color) {\n\t\t\tthis.r = c.r;\n\t\t\tthis.g = c.g;\n\t\t\tthis.b = c.b;\n\t\t\tthis.a = c.a;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromString (hex: string) {\n\t\t\thex = hex.charAt(0) == '#' ? hex.substr(1) : hex;\n\t\t\tthis.r = parseInt(hex.substr(0, 2), 16) / 255.0;\n\t\t\tthis.g = parseInt(hex.substr(2, 2), 16) / 255.0;\n\t\t\tthis.b = parseInt(hex.substr(4, 2), 16) / 255.0;\n\t\t\tthis.a = (hex.length != 8 ? 255 : parseInt(hex.substr(6, 2), 16)) / 255.0;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd (r: number, g: number, b: number, a: number) {\n\t\t\tthis.r += r;\n\t\t\tthis.g += g;\n\t\t\tthis.b += b;\n\t\t\tthis.a += a;\n\t\t\tthis.clamp();\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp () {\n\t\t\tif (this.r < 0) this.r = 0;\n\t\t\telse if (this.r > 1) this.r = 1;\n\n\t\t\tif (this.g < 0) this.g = 0;\n\t\t\telse if (this.g > 1) this.g = 1;\n\n\t\t\tif (this.b < 0) this.b = 0;\n\t\t\telse if (this.b > 1) this.b = 1;\n\n\t\t\tif (this.a < 0) this.a = 0;\n\t\t\telse if (this.a > 1) this.a = 1;\n\t\t\treturn this;\n\t\t}\n\t}\n\n\texport class MathUtils {\n\t\tstatic PI = 3.1415927;\n\t\tstatic PI2 = MathUtils.PI * 2;\n\t\tstatic radiansToDegrees = 180 / MathUtils.PI;\n\t\tstatic radDeg = MathUtils.radiansToDegrees;\n\t\tstatic degreesToRadians = MathUtils.PI / 180;\n\t\tstatic degRad = MathUtils.degreesToRadians;\n\n\t\tstatic clamp (value: number, min: number, max: number) {\n\t\t\tif (value < min) return min;\n\t\t\tif (value > max) return max;\n\t\t\treturn value;\n\t\t}\n\n\t\tstatic cosDeg (degrees: number) {\n\t\t\treturn Math.cos(degrees * MathUtils.degRad);\n\t\t}\n\n\t\tstatic sinDeg (degrees: number) {\n\t\t\treturn Math.sin(degrees * MathUtils.degRad);\n\t\t}\n\n\t\tstatic signum (value: number): number {\n\t\t\treturn value > 0 ? 1 : value < 0 ? -1 : 0;\n\t\t}\n\n\t\tstatic toInt (x: number) {\n\t\t\treturn x > 0 ? Math.floor(x) : Math.ceil(x);\n\t\t}\n\n\t\tstatic cbrt (x: number) {\n\t\t\tvar y = Math.pow(Math.abs(x), 1/3);\n\t\t\treturn x < 0 ? -y : y;\n\t\t}\n\t}\n\n\texport class Utils {\n\t\tstatic SUPPORTS_TYPED_ARRAYS = typeof(Float32Array) !== \"undefined\";\n\n\t\tstatic arrayCopy<T> (source: ArrayLike<T>, sourceStart: number, dest: ArrayLike<T>, destStart: number, numElements: number) {\n\t\t\tfor (let i = sourceStart, j = destStart; i < sourceStart + numElements; i++, j++) {\n\t\t\t\tdest[j] = source[i];\n\t\t\t}\n\t\t}\n\n\t\tstatic setArraySize<T> (array: Array<T>, size: number, value: any = 0): Array<T> {\n\t\t\tlet oldSize = array.length;\n\t\t\tif (oldSize == size) return array;\n\t\t\tarray.length = size;\n\t\t\tif (oldSize < size) {\n\t\t\t\tfor (let i = oldSize; i < size; i++) array[i] = value;\n\t\t\t}\n\t\t\treturn array;\n\t\t}\n\n\t\tstatic ensureArrayCapacity<T> (array: Array<T>, size: number, value: any = 0): Array<T> {\n\t\t\tif (array.length >= size) return array;\n\t\t\treturn Utils.setArraySize(array, size, value);\n\t\t}\n\n\t\tstatic newArray<T> (size: number, defaultValue: T): Array<T> {\n\t\t\tlet array = new Array<T>(size);\n\t\t\tfor (let i = 0; i < size; i++) array[i] = defaultValue;\n\t\t\treturn array;\n\t\t}\n\n\t\tstatic newFloatArray (size: number): ArrayLike<number> {\n\t\t\tif (Utils.SUPPORTS_TYPED_ARRAYS) {\n\t\t\t\treturn new Float32Array(size)\n\t\t\t} else {\n\t\t\t\t let array = new Array<number>(size);\n\t\t\t\t for (let i = 0; i < array.length; i++) array[i] = 0;\n\t\t\t\t return array;\n\t\t\t}\n\t\t}\n\n\t\tstatic toFloatArray (array: Array<number>) {\n\t\t\treturn Utils.SUPPORTS_TYPED_ARRAYS ? new Float32Array(array) : array;\n\t\t}\n\t}\n\n\texport class DebugUtils {\n\t\tstatic logBones(skeleton: Skeleton) {\n\t\t\tfor (let i = 0; i < skeleton.bones.length; i++) {\n\t\t\t\tlet bone = skeleton.bones[i]\n                let mat = bone.matrix\n\t\t\t\tconsole.log(bone.data.name + \", \" + mat.a + \", \" + mat.b + \", \" + mat.c + \", \" + mat.d + \", \" + mat.tx + \", \" + mat.ty);\n\t\t\t}\n\t\t}\n\t}\n\n\texport class Pool<T> {\n\t\tprivate items = new Array<T>();\n\t\tprivate instantiator: () => T;\n\n\t\tconstructor (instantiator: () => T) {\n\t\t\tthis.instantiator = instantiator;\n\t\t}\n\n\t\tobtain () {\n\t\t\treturn this.items.length > 0 ? this.items.pop() : this.instantiator();\n\t\t}\n\n\t\tfree (item: T) {\n\t\t\tif ((item as any).reset) (item as any).reset();\n\t\t\tthis.items.push(item);\n\t\t}\n\n\t\tfreeAll (items: ArrayLike<T>) {\n\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\tif ((items[i] as any).reset) (items[i] as any).reset();\n\t\t\t\tthis.items[i] = items[i];\n\t\t\t}\n\t\t}\n\n\t\tclear () {\n\t\t\tthis.items.length = 0;\n\t\t}\n\t}\n\n\texport class Vector2 {\n\t\tconstructor (public x = 0, public y = 0) {\n\t\t}\n\n\t\tset (x: number, y: number): Vector2 {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tlength () {\n\t\t\tlet x = this.x;\n\t\t\tlet y = this.y;\n\t\t\treturn Math.sqrt(x * x + y * y);\n\t\t}\n\n\t\tnormalize () {\n\t\t\tlet len = this.length();\n\t\t\tif (len != 0) {\n\t\t\t\tthis.x /= len;\n\t\t\t\tthis.y /= len;\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t}\n\n\texport class TimeKeeper {\n\t\tmaxDelta = 0.064;\n\t\tframesPerSecond = 0;\n\t\tdelta = 0;\n\t\ttotalTime = 0;\n\n\t\tprivate lastTime = Date.now() / 1000;\n\t\tprivate frameCount = 0;\n\t\tprivate frameTime = 0;\n\n\t\tupdate () {\n\t\t\tvar now = Date.now() / 1000;\n\t\t\tthis.delta = now - this.lastTime;\n\t\t\tthis.frameTime += this.delta;\n\t\t\tthis.totalTime += this.delta;\n\t\t\tif (this.delta > this.maxDelta) this.delta = this.maxDelta;\n\t\t\tthis.lastTime = now;\n\n\t\t\tthis.frameCount++;\n\t\t\tif (this.frameTime > 1) {\n\t\t\t\tthis.framesPerSecond = this.frameCount / this.frameTime;\n\t\t\t\tthis.frameTime = 0;\n\t\t\t\tthis.frameCount = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\texport interface ArrayLike<T> {\n\t\tlength: number;\n\t\t[n: number]: T;\n\t}\n}\n","module PIXI.spine {\n    export function atlasParser() {\n        return function (resource: PIXI.loaders.Resource, next: () => any) {\n            // skip if no data, its not json, or it isn't atlas data\n            if (!resource.data || !resource.isJson || !resource.data.bones) {\n                return next();\n            }\n\n            var metadataAtlas = resource.metadata ? resource.metadata.spineAtlas : null;\n            if (metadataAtlas === false) {\n                return next();\n            }\n            if (metadataAtlas && metadataAtlas.pages) {\n                //its an atlas!\n                var spineJsonParser = new core.SkeletonJson(new core.AtlasAttachmentLoader(metadataAtlas));\n                var skeletonData = spineJsonParser.readSkeletonData(resource.data);\n\n                resource.spineData = skeletonData;\n                resource.spineAtlas = metadataAtlas;\n\n                return next();\n            }\n\n            var metadataAtlasSuffix = '.atlas';\n            if (resource.metadata && resource.metadata.spineAtlasSuffix) {\n                metadataAtlasSuffix = resource.metadata.spineAtlasSuffix;\n            }\n\n            /**\n             * use a bit of hackery to load the atlas file, here we assume that the .json, .atlas and .png files\n             * that correspond to the spine file are in the same base URL and that the .json and .atlas files\n             * have the same name\n             */\n            var atlasPath = resource.url.substr(0, resource.url.lastIndexOf('.')) + metadataAtlasSuffix;\n            //remove the baseUrl\n            atlasPath = atlasPath.replace(this.baseUrl, '');\n\n            var atlasOptions = {\n                crossOrigin: resource.crossOrigin,\n                xhrType: PIXI.loaders.Resource.XHR_RESPONSE_TYPE.TEXT,\n                metadata: resource.metadata ? resource.metadata.spineMetadata : null\n            };\n            var imageOptions = {\n                crossOrigin: resource.crossOrigin,\n                metadata: resource.metadata ? resource.metadata.imageMetadata : null\n            };\n            var baseUrl = resource.url.substr(0, resource.url.lastIndexOf('/') + 1);\n            //remove the baseUrl\n            baseUrl = baseUrl.replace(this.baseUrl, '');\n\n            var adapter = imageLoaderAdapter(this, resource.name + '_atlas_page_', baseUrl, imageOptions);\n\n            this.add(resource.name + '_atlas', atlasPath, atlasOptions, function () {\n                new core.TextureAtlas(this.xhr.responseText, adapter, function (spineAtlas) {\n                    var spineJsonParser = new core.SkeletonJson(new core.AtlasAttachmentLoader(spineAtlas));\n                    var skeletonData = spineJsonParser.readSkeletonData(resource.data);\n\n                    resource.spineData = skeletonData;\n                    resource.spineAtlas = spineAtlas;\n\n                    next();\n                });\n            });\n        };\n    }\n\n    export function imageLoaderAdapter(loader: any, namePrefix: any, baseUrl: any, imageOptions: any) {\n        if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length - 1)) {\n            baseUrl += '/';\n        }\n        return function (line: String, callback: (baseTexture: PIXI.BaseTexture) => any) {\n            var name = namePrefix + line;\n            var url = baseUrl + line;\n            loader.add(name, url, imageOptions, (resource: PIXI.loaders.Resource) => {\n                callback(resource.texture.baseTexture);\n            });\n        }\n    }\n\n    export function syncImageLoaderAdapter(baseUrl: any, crossOrigin: any) {\n        if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length - 1)) {\n            baseUrl += '/';\n        }\n        return function (line: any, callback: any) {\n            callback(PIXI.BaseTexture.fromImage(line, crossOrigin));\n        }\n    }\n\n    PIXI.loaders.Loader.addPixiMiddleware(atlasParser);\n    PIXI.loader.use(atlasParser());\n}\n","/// <reference path=\"pixi.js.d.ts\" />\n\nmodule PIXI.spine {\n    /* Esoteric Software SPINE wrapper for pixi.js */\n    core.Bone.yDown = true;\n\n    let tempRgb = [0, 0, 0];\n\n    export class SpineSprite extends PIXI.Sprite {\n        region: core.TextureRegion;\n\n        constructor(tex: PIXI.Texture) {\n            super(tex);\n        }\n    }\n\n    export class SpineMesh extends PIXI.mesh.Mesh {\n        region: core.TextureRegion;\n\n        constructor(texture: PIXI.Texture, vertices?: Float32Array, uvs?: Float32Array, indices?: Uint16Array, drawMode?: number) {\n            super(texture, vertices, uvs, indices, drawMode);\n        }\n    }\n\n    /**\n     * A class that enables the you to import and run your spine animations in pixi.\n     * The Spine animation data needs to be loaded using either the Loader or a SpineLoader before it can be used by this class\n     * See example 12 (http://www.goodboydigital.com/pixijs/examples/12/) to see a working example and check out the source\n     *\n     * ```js\n     * var spineAnimation = new PIXI.Spine(spineData);\n     * ```\n     *\n     * @class\n     * @extends Container\n     * @memberof PIXI.spine\n     * @param spineData {object} The spine data loaded from a spine atlas.\n     */\n    export class Spine extends PIXI.Container {\n        static globalAutoUpdate: boolean = true;\n\n        tintRgb: ArrayLike<number>;\n        spineData: core.SkeletonData;\n        skeleton: core.Skeleton;\n        stateData: core.AnimationStateData;\n        state: core.AnimationState;\n        slotContainers: Array<PIXI.Container>;\n\n        constructor(spineData: core.SkeletonData) {\n            super();\n\n            if (!spineData) {\n                throw new Error('The spineData param is required.');\n            }\n\n            if ((typeof spineData) === \"string\") {\n                throw new Error('spineData param cant be string. Please use PIXI.spine.Spine.fromAtlas(\"YOUR_RESOURCE_NAME\") from now on.');\n            }\n\n            /**\n             * The spineData object\n             *\n             * @member {object}\n             */\n            this.spineData = spineData;\n\n            /**\n             * A spine Skeleton object\n             *\n             * @member {object}\n             */\n            this.skeleton = new core.Skeleton(spineData);\n            this.skeleton.updateWorldTransform();\n\n            /**\n             * A spine AnimationStateData object created from the spine data passed in the constructor\n             *\n             * @member {object}\n             */\n            this.stateData = new core.AnimationStateData(spineData);\n\n            /**\n             * A spine AnimationState object created from the spine AnimationStateData object\n             *\n             * @member {object}\n             */\n            this.state = new core.AnimationState(this.stateData);\n\n            /**\n             * An array of containers\n             *\n             * @member {Container[]}\n             */\n            this.slotContainers = [];\n\n            for (var i = 0, n = this.skeleton.slots.length; i < n; i++) {\n                var slot = this.skeleton.slots[i];\n                var attachment: any = slot.attachment;\n                var slotContainer = new PIXI.Container();\n                this.slotContainers.push(slotContainer);\n                this.addChild(slotContainer);\n\n                if (attachment instanceof core.RegionAttachment) {\n                    var spriteName = (attachment.region as core.TextureAtlasRegion).name;\n                    var sprite = this.createSprite(slot, attachment, spriteName);\n                    slot.currentSprite = sprite;\n                    slot.currentSpriteName = spriteName;\n                    slotContainer.addChild(sprite);\n                }\n                else if (attachment instanceof core.MeshAttachment) {\n                    var mesh = this.createMesh(slot, attachment);\n                    slot.currentMesh = mesh;\n                    slot.currentMeshName = attachment.name;\n                    slotContainer.addChild(mesh);\n                }\n                else {\n                    continue;\n                }\n\n            }\n\n            /**\n             * Should the Spine object update its transforms\n             *\n             * @member {boolean}\n             */\n            this.autoUpdate = true;\n\n            /**\n             * The tint applied to all spine slots. This is a [r,g,b] value. A value of [1,1,1] will remove any tint effect.\n             *\n             * @member {number}\n             * @memberof PIXI.spine.Spine#\n             */\n            this.tintRgb = new Float32Array([1, 1, 1]);\n        }\n\n        /**\n         * If this flag is set to true, the spine animation will be autoupdated every time\n         * the object id drawn. The down side of this approach is that the delta time is\n         * automatically calculated and you could miss out on cool effects like slow motion,\n         * pause, skip ahead and the sorts. Most of these effects can be achieved even with\n         * autoupdate enabled but are harder to achieve.\n         *\n         * @member {boolean}\n         * @memberof PIXI.spine.Spine#\n         * @default true\n         */\n        get autoUpdate(): boolean {\n            return (this.updateTransform === Spine.prototype.autoUpdateTransform);\n        }\n\n        set autoUpdate(value: boolean) {\n            this.updateTransform = value ? Spine.prototype.autoUpdateTransform : PIXI.Container.prototype.updateTransform;\n        }\n\n        /**\n         * The tint applied to the spine object. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n         *\n         * @member {number}\n         * @memberof PIXI.spine.Spine#\n         * @default 0xFFFFFF\n         */\n        get tint(): number {\n            return PIXI.utils.rgb2hex(this.tintRgb as any);\n        }\n\n        set tint(value: number) {\n            this.tintRgb = PIXI.utils.hex2rgb(value, this.tintRgb as any);\n        }\n\n        /**\n         * Update the spine skeleton and its animations by delta time (dt)\n         *\n         * @param dt {number} Delta time. Time by which the animation should be updated\n         */\n        update(dt: number) {\n            this.state.update(dt);\n            this.state.apply(this.skeleton);\n            this.skeleton.updateWorldTransform();\n\n            let drawOrder = this.skeleton.drawOrder;\n            let slots = this.skeleton.slots;\n\n            for (var i = 0, n = drawOrder.length; i < n; i++) {\n                this.children[i] = this.slotContainers[drawOrder[i].data.index];\n            }\n\n            var r0 = this.tintRgb[0];\n            var g0 = this.tintRgb[1];\n            var b0 = this.tintRgb[2];\n\n            for (i = 0, n = slots.length; i < n; i++) {\n                var slot = slots[i];\n                var attachment = slot.attachment;\n                var slotContainer = this.slotContainers[i];\n\n                if (!attachment) {\n                    slotContainer.visible = false;\n                    continue;\n                }\n\n                var attColor = (attachment as any).color;\n                if (attachment instanceof core.RegionAttachment) {\n                    let region = (attachment as core.RegionAttachment).region;\n                    if (region) {\n                        let ar = region as core.TextureAtlasRegion;\n                        if (!slot.currentSpriteName || slot.currentSpriteName !== ar.name) {\n                            var spriteName = ar.name;\n                            if (slot.currentSprite) {\n                                slot.currentSprite.visible = false;\n                            }\n                            slot.sprites = slot.sprites || {};\n                            if (slot.sprites[spriteName] !== undefined) {\n                                slot.sprites[spriteName].visible = true;\n                            }\n                            else {\n                                var sprite = this.createSprite(slot, attachment, spriteName);\n                                slotContainer.addChild(sprite);\n                            }\n                            slot.currentSprite = slot.sprites[spriteName];\n                            slot.currentSpriteName = spriteName;\n                        }\n                    }\n\n                    if (slotContainer.transform) {\n                        let transform = slotContainer.transform;\n                        let transAny : any  = transform;\n                        let lt: PIXI.Matrix;\n                        if (transAny.matrix2d) {\n                            //gameofbombs pixi fork, sorry for that, we really use it :)\n                            lt = transAny.matrix2d;\n                            transAny._dirtyVersion++;\n                            transAny.version = transAny._dirtyVersion;\n                            transAny.isStatic = true;\n                            transAny.operMode = 0;\n                        } else {\n                            if (transAny.position) {\n                                transform = new PIXI.TransformBase();\n                                slotContainer.transform = transform;\n                            }\n                            lt = transform.localTransform;\n                        }\n                        slot.bone.matrix.copy(lt);\n                    } else {\n                        //PIXI v3\n                        var lt = slotContainer.localTransform || new PIXI.Matrix();\n                        slot.bone.matrix.copy(lt);\n                        slotContainer.localTransform = lt;\n                        (slotContainer as any).displayObjectUpdateTransform = SlotContainerUpdateTransformV3;\n                    }\n                    tempRgb[0] = r0 * slot.color.r * attColor.r;\n                    tempRgb[1] = g0 * slot.color.g * attColor.g;\n                    tempRgb[2] = b0 * slot.color.b * attColor.b;\n                    slot.currentSprite.tint = PIXI.utils.rgb2hex(tempRgb);\n                    slot.currentSprite.blendMode = slot.blendMode;\n                }\n                else if (attachment instanceof core.MeshAttachment) {\n                    if (!slot.currentMeshName || slot.currentMeshName !== attachment.name) {\n                        var meshName = attachment.name;\n                        if (slot.currentMesh) {\n                            slot.currentMesh.visible = false;\n                        }\n\n                        slot.meshes = slot.meshes || {};\n\n                        if (slot.meshes[meshName] !== undefined) {\n                            slot.meshes[meshName].visible = true;\n                        }\n                        else {\n                            var mesh = this.createMesh(slot, attachment);\n                            slotContainer.addChild(mesh);\n                        }\n\n                        slot.currentMesh = slot.meshes[meshName];\n                        slot.currentMeshName = meshName;\n                    }\n                    (attachment as core.VertexAttachment).computeWorldVertices(slot, slot.currentMesh.vertices);\n                    if (PIXI.VERSION[0] !== '3') {\n                        // PIXI version 4\n                        // slot.currentMesh.dirty++;\n                        //only for PIXI v4\n                        var tintRgb = slot.currentMesh.tintRgb;\n                        tintRgb[0] = r0 * slot.color.r * attColor.r;\n                        tintRgb[1] = g0 * slot.color.g * attColor.g;\n                        tintRgb[2] = b0 * slot.color.b * attColor.b;\n                    }\n                    slot.currentMesh.blendMode = slot.blendMode;\n                }\n                else {\n                    slotContainer.visible = false;\n                    continue;\n                }\n                slotContainer.visible = true;\n\n                slotContainer.alpha = slot.color.a;\n            }\n        };\n\n        private setSpriteRegion(attachment: core.RegionAttachment, sprite: SpineSprite, region: core.TextureRegion) {\n            sprite.region = region;\n            sprite.texture = region.texture;\n            if (!region.size) {\n                sprite.scale.x = attachment.scaleX * attachment.width / region.originalWidth;\n                sprite.scale.y = -attachment.scaleY * attachment.height / region.originalHeight;\n            } else {\n                //hacked!\n                sprite.scale.x = region.size.width / region.originalWidth;\n                sprite.scale.y = -region.size.height / region.originalHeight;\n            }\n        }\n\n        private setMeshRegion(attachment: core.MeshAttachment, mesh: SpineMesh, region: core.TextureRegion) {\n            mesh.region = region;\n            mesh.texture = region.texture;\n            attachment.updateUVs(region, mesh.uvs);\n            // if (PIXI.VERSION[0] !== '3') {\n            // PIXI version 4\n            // mesh.indexDirty++;\n            // } else {\n            // PIXI version 3\n            mesh.dirty++;\n            // }\n        }\n\n        protected lastTime: number;\n\n        /**\n         * When autoupdate is set to yes this function is used as pixi's updateTransform function\n         *\n         * @private\n         */\n        autoUpdateTransform() {\n            if (Spine.globalAutoUpdate) {\n                this.lastTime = this.lastTime || Date.now();\n                var timeDelta = (Date.now() - this.lastTime) * 0.001;\n                this.lastTime = Date.now();\n                this.update(timeDelta);\n            } else {\n                this.lastTime = 0;\n            }\n\n            PIXI.Container.prototype.updateTransform.call(this);\n        };\n\n        /**\n         * Create a new sprite to be used with core.RegionAttachment\n         *\n         * @param slot {spine.Slot} The slot to which the attachment is parented\n         * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n         * @private\n         */\n        createSprite(slot: core.Slot, attachment: core.RegionAttachment, defName: string) {\n            let region = attachment.region;\n            if (slot.tempAttachment === attachment) {\n                region = slot.tempRegion;\n                slot.tempAttachment = null;\n                slot.tempRegion = null;\n            }\n            var texture = region.texture;\n            var sprite = new SpineSprite(texture);\n            sprite.rotation = attachment.rotation * core.MathUtils.degRad;\n            sprite.anchor.x = 0.5;\n            sprite.anchor.y = 0.5;\n            sprite.position.x = attachment.x;\n            sprite.position.y = attachment.y;\n            sprite.alpha = attachment.color.a;\n\n            sprite.region = attachment.region;\n            this.setSpriteRegion(attachment, sprite, attachment.region);\n\n            slot.sprites = slot.sprites || {};\n            slot.sprites[defName] = sprite;\n            return sprite;\n        };\n\n        /**\n         * Creates a Strip from the spine data\n         * @param slot {spine.Slot} The slot to which the attachment is parented\n         * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n         * @private\n         */\n        createMesh(slot: core.Slot, attachment: core.MeshAttachment) {\n            let region = attachment.region;\n            if (slot.tempAttachment === attachment) {\n                region = slot.tempRegion;\n                slot.tempAttachment = null;\n                slot.tempRegion = null;\n            }\n            let strip = new SpineMesh(\n                region.texture,\n                new Float32Array(attachment.regionUVs.length),\n                new Float32Array(attachment.regionUVs.length),\n                new Uint16Array(attachment.triangles),\n                PIXI.mesh.Mesh.DRAW_MODES.TRIANGLES);\n\n            strip.canvasPadding = 1.5;\n\n            strip.alpha = attachment.color.a;\n\n            strip.region = attachment.region;\n            this.setMeshRegion(attachment, strip, region);\n\n            slot.meshes = slot.meshes || {};\n            slot.meshes[attachment.name] = strip;\n            return strip;\n        };\n\n        /**\n         * Changes texture in attachment in specific slot.\n         *\n         * PIXI runtime feature, it was made to satisfy our users.\n         *\n         * @param slotIndex {number}\n         * @param [texture = null] {PIXI.Texture} If null, take default (original) texture\n         * @param [size = null] {PIXI.Point} sometimes we need new size for region attachment, you can pass 'texture.orig' there\n         * @returns {boolean} Success flag\n         */\n        hackTextureBySlotIndex(slotIndex: number, texture: PIXI.Texture = null, size: PIXI.Rectangle = null) {\n            var slot = this.skeleton.slots[slotIndex];\n            if (!slot) {\n                return false;\n            }\n            var attachment: any = slot.attachment;\n            var region: core.TextureRegion = attachment.region;\n            if (texture) {\n                region = new core.TextureRegion();\n                region.texture = texture;\n                region.size = size;\n            }\n            if (slot.currentSprite && slot.currentSprite.region != region) {\n                this.setSpriteRegion(attachment, slot.currentSprite, region);\n                slot.currentSprite.region = region;\n            } else if (slot.currentMesh && slot.currentMesh.region != region) {\n                this.setMeshRegion(attachment, slot.currentMesh, region);\n            } else {\n                slot.tempRegion = region;\n                slot.tempAttachment = attachment;\n            }\n            return true;\n        }\n\n        /**\n         * Changes texture in attachment in specific slot.\n         *\n         * PIXI runtime feature, it was made to satisfy our users.\n         *\n         * @param slotName {string}\n         * @param [texture = null] {PIXI.Texture} If null, take default (original) texture\n         * @param [size = null] {PIXI.Point} sometimes we need new size for region attachment, you can pass 'texture.orig' there\n         * @returns {boolean} Success flag\n         */\n        hackTextureBySlotName = function (slotName: String, texture: PIXI.Texture = null, size: PIXI.Rectangle = null) {\n            var index = this.skeleton.findSlotIndex(slotName);\n            if (index == -1) {\n                return false;\n            }\n            return this.hackTextureBySlotIndex(index, texture, size);\n        }\n    }\n\n    function SlotContainerUpdateTransformV3() {\n        var pt = this.parent.worldTransform;\n        var wt = this.worldTransform;\n        var lt = this.localTransform;\n        wt.a = lt.a * pt.a + lt.b * pt.c;\n        wt.b = lt.a * pt.b + lt.b * pt.d;\n        wt.c = lt.c * pt.a + lt.d * pt.c;\n        wt.d = lt.c * pt.b + lt.d * pt.d;\n        wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;\n        wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n        this._currentBounds = null;\n    }\n}\n"]}